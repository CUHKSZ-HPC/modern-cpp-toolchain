<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="700" onload="init(evt)" viewBox="0 0 1200 700" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="709.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="709.00"> </text><svg id="frames" x="10" width="1180" total_samples="278590"><g><title>__GI___poll (28 samples, 0.01%)</title><rect x="0.0039%" y="629" width="0.0101%" height="15" fill="rgb(227,0,7)" fg:x="11" fg:w="28"/><text x="0.2539%" y="639.50"></text></g><g><title>entry_SYSCALL_64 (242 samples, 0.09%)</title><rect x="0.0183%" y="613" width="0.0869%" height="15" fill="rgb(217,0,24)" fg:x="51" fg:w="242"/><text x="0.2683%" y="623.50"></text></g><g><title>__lll_lock_wait (243 samples, 0.09%)</title><rect x="0.0183%" y="629" width="0.0872%" height="15" fill="rgb(221,193,54)" fg:x="51" fg:w="243"/><text x="0.2683%" y="639.50"></text></g><g><title>_int_free (54 samples, 0.02%)</title><rect x="0.1055%" y="629" width="0.0194%" height="15" fill="rgb(248,212,6)" fg:x="294" fg:w="54"/><text x="0.3555%" y="639.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::prepare_insert (47 samples, 0.02%)</title><rect x="0.1314%" y="629" width="0.0169%" height="15" fill="rgb(208,68,35)" fg:x="366" fg:w="47"/><text x="0.3814%" y="639.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::prepare_insert (334 samples, 0.12%)</title><rect x="0.1482%" y="629" width="0.1199%" height="15" fill="rgb(232,128,0)" fg:x="413" fg:w="334"/><text x="0.3982%" y="639.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::prepare_insert (304 samples, 0.11%)</title><rect x="0.2681%" y="629" width="0.1091%" height="15" fill="rgb(207,160,47)" fg:x="747" fg:w="304"/><text x="0.5181%" y="639.50"></text></g><g><title>distLouvainMethod (35 samples, 0.01%)</title><rect x="0.3805%" y="629" width="0.0126%" height="15" fill="rgb(228,23,34)" fg:x="1060" fg:w="35"/><text x="0.6305%" y="639.50"></text></g><g><title>distExecuteLouvainIteration (35 samples, 0.01%)</title><rect x="0.3805%" y="613" width="0.0126%" height="15" fill="rgb(218,30,26)" fg:x="1060" fg:w="35"/><text x="0.6305%" y="623.50"></text></g><g><title>event_strlcpy_ (85 samples, 0.03%)</title><rect x="0.3938%" y="629" width="0.0305%" height="15" fill="rgb(220,122,19)" fg:x="1097" fg:w="85"/><text x="0.6438%" y="639.50"></text></g><g><title>evutil_gettime_monotonic_ (32 samples, 0.01%)</title><rect x="0.4243%" y="629" width="0.0115%" height="15" fill="rgb(250,228,42)" fg:x="1182" fg:w="32"/><text x="0.6743%" y="639.50"></text></g><g><title>operator new (29 samples, 0.01%)</title><rect x="0.4480%" y="629" width="0.0104%" height="15" fill="rgb(240,193,28)" fg:x="1248" fg:w="29"/><text x="0.6980%" y="639.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;long const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt; &gt; (343 samples, 0.12%)</title><rect x="0.4598%" y="629" width="0.1231%" height="15" fill="rgb(216,20,37)" fg:x="1281" fg:w="343"/><text x="0.7098%" y="639.50"></text></g><g><title>[[heap]] (1,630 samples, 0.59%)</title><rect x="0.0000%" y="645" width="0.5851%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1630"/><text x="0.2500%" y="655.50"></text></g><g><title>__GI___pthread_mutex_lock (38 samples, 0.01%)</title><rect x="0.5908%" y="629" width="0.0136%" height="15" fill="rgb(217,207,13)" fg:x="1646" fg:w="38"/><text x="0.8408%" y="639.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::prepare_insert (1,252 samples, 0.45%)</title><rect x="0.6213%" y="629" width="0.4494%" height="15" fill="rgb(231,73,38)" fg:x="1731" fg:w="1252"/><text x="0.8713%" y="639.50"></text></g><g><title>event_base_loop (106 samples, 0.04%)</title><rect x="1.0779%" y="629" width="0.0380%" height="15" fill="rgb(225,20,46)" fg:x="3003" fg:w="106"/><text x="1.3279%" y="639.50"></text></g><g><title>opal_progress (41 samples, 0.01%)</title><rect x="1.1282%" y="629" width="0.0147%" height="15" fill="rgb(210,31,41)" fg:x="3143" fg:w="41"/><text x="1.3782%" y="639.50"></text></g><g><title>[[stack]] (1,646 samples, 0.59%)</title><rect x="0.5851%" y="645" width="0.5908%" height="15" fill="rgb(221,200,47)" fg:x="1630" fg:w="1646"/><text x="0.8351%" y="655.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;long const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt; &gt; (78 samples, 0.03%)</title><rect x="1.1479%" y="629" width="0.0280%" height="15" fill="rgb(226,26,5)" fg:x="3198" fg:w="78"/><text x="1.3979%" y="639.50"></text></g><g><title>[anon] (39 samples, 0.01%)</title><rect x="1.1759%" y="645" width="0.0140%" height="15" fill="rgb(249,33,26)" fg:x="3276" fg:w="39"/><text x="1.4259%" y="655.50"></text></g><g><title>__GI___libc_malloc (31 samples, 0.01%)</title><rect x="1.2000%" y="629" width="0.0111%" height="15" fill="rgb(235,183,28)" fg:x="3343" fg:w="31"/><text x="1.4500%" y="639.50"></text></g><g><title>__GI___pthread_mutex_lock (91 samples, 0.03%)</title><rect x="1.2111%" y="629" width="0.0327%" height="15" fill="rgb(221,5,38)" fg:x="3374" fg:w="91"/><text x="1.4611%" y="639.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::prepare_insert (700 samples, 0.25%)</title><rect x="1.2764%" y="629" width="0.2513%" height="15" fill="rgb(247,18,42)" fg:x="3556" fg:w="700"/><text x="1.5264%" y="639.50"></text></g><g><title>[unknown] (1,070 samples, 0.38%)</title><rect x="1.1899%" y="645" width="0.3841%" height="15" fill="rgb(241,131,45)" fg:x="3315" fg:w="1070"/><text x="1.4399%" y="655.50"></text></g><g><title>distComputeModularity (43 samples, 0.02%)</title><rect x="1.5744%" y="597" width="0.0154%" height="15" fill="rgb(249,31,29)" fg:x="4386" fg:w="43"/><text x="1.8244%" y="607.50"></text></g><g><title>Graph::edge_range (49 samples, 0.02%)</title><rect x="1.7398%" y="565" width="0.0176%" height="15" fill="rgb(225,111,53)" fg:x="4847" fg:w="49"/><text x="1.9898%" y="575.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::GroupSse2Impl (48 samples, 0.02%)</title><rect x="1.7930%" y="501" width="0.0172%" height="15" fill="rgb(238,160,17)" fg:x="4995" fg:w="48"/><text x="2.0430%" y="511.50"></text></g><g><title>_mm_loadu_si128 (48 samples, 0.02%)</title><rect x="1.7930%" y="485" width="0.0172%" height="15" fill="rgb(214,148,48)" fg:x="4995" fg:w="48"/><text x="2.0430%" y="495.50"></text></g><g><title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::operator[]&lt;long, absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt; &gt; (140 samples, 0.05%)</title><rect x="1.7696%" y="565" width="0.0503%" height="15" fill="rgb(232,36,49)" fg:x="4930" fg:w="140"/><text x="2.0196%" y="575.50"></text></g><g><title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::try_emplace&lt;long, , 0&gt; (140 samples, 0.05%)</title><rect x="1.7696%" y="549" width="0.0503%" height="15" fill="rgb(209,103,24)" fg:x="4930" fg:w="140"/><text x="2.0196%" y="559.50"></text></g><g><title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::try_emplace_impl&lt;long const&amp;&gt; (140 samples, 0.05%)</title><rect x="1.7696%" y="533" width="0.0503%" height="15" fill="rgb(229,88,8)" fg:x="4930" fg:w="140"/><text x="2.0196%" y="543.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::find_or_prepare_insert&lt;long&gt; (127 samples, 0.05%)</title><rect x="1.7743%" y="517" width="0.0456%" height="15" fill="rgb(213,181,19)" fg:x="4943" fg:w="127"/><text x="2.0243%" y="527.50"></text></g><g><title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::operator[]&lt;long, absl::container_internal::FlatHashMapPolicy&lt;long, double&gt; &gt; (109 samples, 0.04%)</title><rect x="1.8199%" y="565" width="0.0391%" height="15" fill="rgb(254,191,54)" fg:x="5070" fg:w="109"/><text x="2.0699%" y="575.50"></text></g><g><title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::try_emplace&lt;long, , 0&gt; (109 samples, 0.04%)</title><rect x="1.8199%" y="549" width="0.0391%" height="15" fill="rgb(241,83,37)" fg:x="5070" fg:w="109"/><text x="2.0699%" y="559.50"></text></g><g><title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::try_emplace_impl&lt;long const&amp;&gt; (109 samples, 0.04%)</title><rect x="1.8199%" y="533" width="0.0391%" height="15" fill="rgb(233,36,39)" fg:x="5070" fg:w="109"/><text x="2.0699%" y="543.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::find_or_prepare_insert&lt;long&gt; (109 samples, 0.04%)</title><rect x="1.8199%" y="517" width="0.0391%" height="15" fill="rgb(226,3,54)" fg:x="5070" fg:w="109"/><text x="2.0699%" y="527.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::find&lt;long&gt; (102 samples, 0.04%)</title><rect x="1.8594%" y="549" width="0.0366%" height="15" fill="rgb(245,192,40)" fg:x="5180" fg:w="102"/><text x="2.1094%" y="559.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::find&lt;long&gt; (102 samples, 0.04%)</title><rect x="1.8594%" y="533" width="0.0366%" height="15" fill="rgb(238,167,29)" fg:x="5180" fg:w="102"/><text x="2.1094%" y="543.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::find&lt;long&gt; (112 samples, 0.04%)</title><rect x="1.8590%" y="565" width="0.0402%" height="15" fill="rgb(232,182,51)" fg:x="5179" fg:w="112"/><text x="2.1090%" y="575.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::erase (56 samples, 0.02%)</title><rect x="1.8992%" y="549" width="0.0201%" height="15" fill="rgb(231,60,39)" fg:x="5291" fg:w="56"/><text x="2.1492%" y="559.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::erase_meta_only (56 samples, 0.02%)</title><rect x="1.8992%" y="533" width="0.0201%" height="15" fill="rgb(208,69,12)" fg:x="5291" fg:w="56"/><text x="2.1492%" y="543.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::find&lt;long&gt; (42 samples, 0.02%)</title><rect x="1.9193%" y="533" width="0.0151%" height="15" fill="rgb(235,93,37)" fg:x="5347" fg:w="42"/><text x="2.1693%" y="543.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::erase&lt;long&gt; (99 samples, 0.04%)</title><rect x="1.8992%" y="565" width="0.0355%" height="15" fill="rgb(213,116,39)" fg:x="5291" fg:w="99"/><text x="2.1492%" y="575.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::find&lt;long&gt; (43 samples, 0.02%)</title><rect x="1.9193%" y="549" width="0.0154%" height="15" fill="rgb(222,207,29)" fg:x="5347" fg:w="43"/><text x="2.1693%" y="559.50"></text></g><g><title>malloc_consolidate (326 samples, 0.12%)</title><rect x="2.0367%" y="405" width="0.1170%" height="15" fill="rgb(206,96,30)" fg:x="5674" fg:w="326"/><text x="2.2867%" y="415.50"></text></g><g><title>unlink_chunk.isra.0 (111 samples, 0.04%)</title><rect x="2.1139%" y="389" width="0.0398%" height="15" fill="rgb(218,138,4)" fg:x="5889" fg:w="111"/><text x="2.3639%" y="399.50"></text></g><g><title>absl::container_internal::Allocate&lt;8ul, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt; (615 samples, 0.22%)</title><rect x="1.9426%" y="501" width="0.2208%" height="15" fill="rgb(250,191,14)" fg:x="5412" fg:w="615"/><text x="2.1926%" y="511.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;absl::container_internal::AlignedType&lt;8ul&gt; &gt; &gt;::allocate (612 samples, 0.22%)</title><rect x="1.9437%" y="485" width="0.2197%" height="15" fill="rgb(239,60,40)" fg:x="5415" fg:w="612"/><text x="2.1937%" y="495.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;absl::container_internal::AlignedType&lt;8ul&gt; &gt;::allocate (612 samples, 0.22%)</title><rect x="1.9437%" y="469" width="0.2197%" height="15" fill="rgb(206,27,48)" fg:x="5415" fg:w="612"/><text x="2.1937%" y="479.50"></text></g><g><title>operator new (602 samples, 0.22%)</title><rect x="1.9473%" y="453" width="0.2161%" height="15" fill="rgb(225,35,8)" fg:x="5425" fg:w="602"/><text x="2.1973%" y="463.50"></text></g><g><title>__GI___libc_malloc (592 samples, 0.21%)</title><rect x="1.9509%" y="437" width="0.2125%" height="15" fill="rgb(250,213,24)" fg:x="5435" fg:w="592"/><text x="2.2009%" y="447.50"></text></g><g><title>_int_malloc (485 samples, 0.17%)</title><rect x="1.9893%" y="421" width="0.1741%" height="15" fill="rgb(247,123,22)" fg:x="5542" fg:w="485"/><text x="2.2393%" y="431.50"></text></g><g><title>[libc-2.31.so] (29 samples, 0.01%)</title><rect x="2.1652%" y="469" width="0.0104%" height="15" fill="rgb(231,138,38)" fg:x="6032" fg:w="29"/><text x="2.4152%" y="479.50"></text></g><g><title>absl::container_internal::ResetCtrl (36 samples, 0.01%)</title><rect x="2.1634%" y="501" width="0.0129%" height="15" fill="rgb(231,145,46)" fg:x="6027" fg:w="36"/><text x="2.4134%" y="511.50"></text></g><g><title>distLouvainMethod (31 samples, 0.01%)</title><rect x="2.1652%" y="485" width="0.0111%" height="15" fill="rgb(251,118,11)" fg:x="6032" fg:w="31"/><text x="2.4152%" y="495.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::reserve (678 samples, 0.24%)</title><rect x="1.9347%" y="565" width="0.2434%" height="15" fill="rgb(217,147,25)" fg:x="5390" fg:w="678"/><text x="2.1847%" y="575.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::reserve (678 samples, 0.24%)</title><rect x="1.9347%" y="549" width="0.2434%" height="15" fill="rgb(247,81,37)" fg:x="5390" fg:w="678"/><text x="2.1847%" y="559.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::resize (661 samples, 0.24%)</title><rect x="1.9408%" y="533" width="0.2373%" height="15" fill="rgb(209,12,38)" fg:x="5407" fg:w="661"/><text x="2.1908%" y="543.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::initialize_slots (658 samples, 0.24%)</title><rect x="1.9419%" y="517" width="0.2362%" height="15" fill="rgb(227,1,9)" fg:x="5410" fg:w="658"/><text x="2.1919%" y="527.50"></text></g><g><title>__GI___libc_free (44 samples, 0.02%)</title><rect x="2.1885%" y="437" width="0.0158%" height="15" fill="rgb(248,47,43)" fg:x="6097" fg:w="44"/><text x="2.4385%" y="447.50"></text></g><g><title>_int_free (108 samples, 0.04%)</title><rect x="2.2043%" y="437" width="0.0388%" height="15" fill="rgb(221,10,30)" fg:x="6141" fg:w="108"/><text x="2.4543%" y="447.50"></text></g><g><title>absl::flat_hash_map&lt;long, double, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::~flat_hash_map (180 samples, 0.06%)</title><rect x="2.1795%" y="565" width="0.0646%" height="15" fill="rgb(210,229,1)" fg:x="6072" fg:w="180"/><text x="2.4295%" y="575.50"></text></g><g><title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::~raw_hash_map (180 samples, 0.06%)</title><rect x="2.1795%" y="549" width="0.0646%" height="15" fill="rgb(222,148,37)" fg:x="6072" fg:w="180"/><text x="2.4295%" y="559.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::~raw_hash_set (180 samples, 0.06%)</title><rect x="2.1795%" y="533" width="0.0646%" height="15" fill="rgb(234,67,33)" fg:x="6072" fg:w="180"/><text x="2.4295%" y="543.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::destroy_slots (180 samples, 0.06%)</title><rect x="2.1795%" y="517" width="0.0646%" height="15" fill="rgb(247,98,35)" fg:x="6072" fg:w="180"/><text x="2.4295%" y="527.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::destroy_slots (178 samples, 0.06%)</title><rect x="2.1803%" y="501" width="0.0639%" height="15" fill="rgb(247,138,52)" fg:x="6074" fg:w="178"/><text x="2.4303%" y="511.50"></text></g><g><title>absl::container_internal::Deallocate&lt;8ul, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt; (178 samples, 0.06%)</title><rect x="2.1803%" y="485" width="0.0639%" height="15" fill="rgb(213,79,30)" fg:x="6074" fg:w="178"/><text x="2.4303%" y="495.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;absl::container_internal::AlignedType&lt;8ul&gt; &gt; &gt;::deallocate (178 samples, 0.06%)</title><rect x="2.1803%" y="469" width="0.0639%" height="15" fill="rgb(246,177,23)" fg:x="6074" fg:w="178"/><text x="2.4303%" y="479.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;absl::container_internal::AlignedType&lt;8ul&gt; &gt;::deallocate (178 samples, 0.06%)</title><rect x="2.1803%" y="453" width="0.0639%" height="15" fill="rgb(230,62,27)" fg:x="6074" fg:w="178"/><text x="2.4303%" y="463.50"></text></g><g><title>Graph::get_edge (533 samples, 0.19%)</title><rect x="7.1926%" y="549" width="0.1913%" height="15" fill="rgb(216,154,8)" fg:x="20038" fg:w="533"/><text x="7.4426%" y="559.50"></text></g><g><title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::operator[] (533 samples, 0.19%)</title><rect x="7.1926%" y="533" width="0.1913%" height="15" fill="rgb(244,35,45)" fg:x="20038" fg:w="533"/><text x="7.4426%" y="543.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::emplace_at&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;long const&amp;&gt;, std::tuple&lt;&gt; &gt; (515 samples, 0.18%)</title><rect x="7.3840%" y="501" width="0.1849%" height="15" fill="rgb(251,115,12)" fg:x="20571" fg:w="515"/><text x="7.6340%" y="511.50"></text></g><g><title>absl::container_internal::common_policy_traits&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, void&gt;::construct&lt;std::allocator&lt;std::pair&lt;long const, double&gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;long const&amp;&gt;, std::tuple&lt;&gt; &gt; (293 samples, 0.11%)</title><rect x="7.4637%" y="485" width="0.1052%" height="15" fill="rgb(240,54,50)" fg:x="20793" fg:w="293"/><text x="7.7137%" y="495.50"></text></g><g><title>absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;::construct&lt;std::allocator&lt;std::pair&lt;long const, double&gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;long const&amp;&gt;, std::tuple&lt;&gt; &gt; (293 samples, 0.11%)</title><rect x="7.4637%" y="469" width="0.1052%" height="15" fill="rgb(233,84,52)" fg:x="20793" fg:w="293"/><text x="7.7137%" y="479.50"></text></g><g><title>absl::container_internal::map_slot_policy&lt;long, double&gt;::construct&lt;std::allocator&lt;std::pair&lt;long const, double&gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;long const&amp;&gt;, std::tuple&lt;&gt; &gt; (293 samples, 0.11%)</title><rect x="7.4637%" y="453" width="0.1052%" height="15" fill="rgb(207,117,47)" fg:x="20793" fg:w="293"/><text x="7.7137%" y="463.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::construct&lt;std::pair&lt;long, double&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;long const&amp;&gt;, std::tuple&lt;&gt; &gt; (293 samples, 0.11%)</title><rect x="7.4637%" y="437" width="0.1052%" height="15" fill="rgb(249,43,39)" fg:x="20793" fg:w="293"/><text x="7.7137%" y="447.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::pair&lt;long const, double&gt; &gt;::construct&lt;std::pair&lt;long, double&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;long const&amp;&gt;, std::tuple&lt;&gt; &gt; (293 samples, 0.11%)</title><rect x="7.4637%" y="421" width="0.1052%" height="15" fill="rgb(209,38,44)" fg:x="20793" fg:w="293"/><text x="7.7137%" y="431.50"></text></g><g><title>std::pair&lt;long, double&gt;::pair&lt;long const&amp;&gt; (293 samples, 0.11%)</title><rect x="7.4637%" y="405" width="0.1052%" height="15" fill="rgb(236,212,23)" fg:x="20793" fg:w="293"/><text x="7.7137%" y="415.50"></text></g><g><title>std::pair&lt;long, double&gt;::pair&lt;long const&amp;, 0ul&gt; (293 samples, 0.11%)</title><rect x="7.4637%" y="389" width="0.1052%" height="15" fill="rgb(242,79,21)" fg:x="20793" fg:w="293"/><text x="7.7137%" y="399.50"></text></g><g><title>absl::container_internal::BitMask&lt;unsigned int, 16, 0&gt;::operator* (918 samples, 0.33%)</title><rect x="8.3065%" y="485" width="0.3295%" height="15" fill="rgb(211,96,35)" fg:x="23141" fg:w="918"/><text x="8.5565%" y="495.50"></text></g><g><title>absl::container_internal::NonIterableBitMask&lt;unsigned int, 16, 0&gt;::LowestBitSet (918 samples, 0.33%)</title><rect x="8.3065%" y="469" width="0.3295%" height="15" fill="rgb(253,215,40)" fg:x="23141" fg:w="918"/><text x="8.5565%" y="479.50"></text></g><g><title>absl::container_internal::TrailingZeros&lt;unsigned int&gt; (918 samples, 0.33%)</title><rect x="8.3065%" y="453" width="0.3295%" height="15" fill="rgb(211,81,21)" fg:x="23141" fg:w="918"/><text x="8.5565%" y="463.50"></text></g><g><title>absl::countr_zero&lt;unsigned int&gt; (918 samples, 0.33%)</title><rect x="8.3065%" y="437" width="0.3295%" height="15" fill="rgb(208,190,38)" fg:x="23141" fg:w="918"/><text x="8.5565%" y="447.50"></text></g><g><title>absl::numeric_internal::CountTrailingZeroes&lt;unsigned int&gt; (918 samples, 0.33%)</title><rect x="8.3065%" y="421" width="0.3295%" height="15" fill="rgb(235,213,38)" fg:x="23141" fg:w="918"/><text x="8.5565%" y="431.50"></text></g><g><title>absl::numeric_internal::CountTrailingZeroesNonzero32 (918 samples, 0.33%)</title><rect x="8.3065%" y="405" width="0.3295%" height="15" fill="rgb(237,122,38)" fg:x="23141" fg:w="918"/><text x="8.5565%" y="415.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::GroupSse2Impl (1,498 samples, 0.54%)</title><rect x="8.6360%" y="485" width="0.5377%" height="15" fill="rgb(244,218,35)" fg:x="24059" fg:w="1498"/><text x="8.8860%" y="495.50"></text></g><g><title>_mm_loadu_si128 (1,498 samples, 0.54%)</title><rect x="8.6360%" y="469" width="0.5377%" height="15" fill="rgb(240,68,47)" fg:x="24059" fg:w="1498"/><text x="8.8860%" y="479.50"></text></g><g><title>_mm_movemask_epi8 (86 samples, 0.03%)</title><rect x="9.1737%" y="469" width="0.0309%" height="15" fill="rgb(210,16,53)" fg:x="25557" fg:w="86"/><text x="9.4237%" y="479.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::MaskEmpty (432 samples, 0.16%)</title><rect x="9.1737%" y="485" width="0.1551%" height="15" fill="rgb(235,124,12)" fg:x="25557" fg:w="432"/><text x="9.4237%" y="495.50"></text></g><g><title>_mm_sign_epi8 (346 samples, 0.12%)</title><rect x="9.2046%" y="469" width="0.1242%" height="15" fill="rgb(224,169,11)" fg:x="25643" fg:w="346"/><text x="9.4546%" y="479.50"></text></g><g><title>_mm_cmpeq_epi8 (792 samples, 0.28%)</title><rect x="9.3288%" y="469" width="0.2843%" height="15" fill="rgb(250,166,2)" fg:x="25989" fg:w="792"/><text x="9.5788%" y="479.50"></text></g><g><title>_mm_movemask_epi8 (806 samples, 0.29%)</title><rect x="9.6131%" y="469" width="0.2893%" height="15" fill="rgb(242,216,29)" fg:x="26781" fg:w="806"/><text x="9.8631%" y="479.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::Match (1,893 samples, 0.68%)</title><rect x="9.3288%" y="485" width="0.6795%" height="15" fill="rgb(230,116,27)" fg:x="25989" fg:w="1893"/><text x="9.5788%" y="495.50"></text></g><g><title>_mm_set1_epi8 (295 samples, 0.11%)</title><rect x="9.9024%" y="469" width="0.1059%" height="15" fill="rgb(228,99,48)" fg:x="27587" fg:w="295"/><text x="10.1524%" y="479.50"></text></g><g><title>_mm_set_epi8 (295 samples, 0.11%)</title><rect x="9.9024%" y="453" width="0.1059%" height="15" fill="rgb(253,11,6)" fg:x="27587" fg:w="295"/><text x="10.1524%" y="463.50"></text></g><g><title>absl::container_internal::H2 (63 samples, 0.02%)</title><rect x="10.0083%" y="485" width="0.0226%" height="15" fill="rgb(247,143,39)" fg:x="27882" fg:w="63"/><text x="10.2583%" y="495.50"></text></g><g><title>absl::container_internal::H1 (515 samples, 0.18%)</title><rect x="10.0309%" y="469" width="0.1849%" height="15" fill="rgb(236,97,10)" fg:x="27945" fg:w="515"/><text x="10.2809%" y="479.50"></text></g><g><title>absl::container_internal::probe (729 samples, 0.26%)</title><rect x="10.0309%" y="485" width="0.2617%" height="15" fill="rgb(233,208,19)" fg:x="27945" fg:w="729"/><text x="10.2809%" y="495.50"></text></g><g><title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (214 samples, 0.08%)</title><rect x="10.2157%" y="469" width="0.0768%" height="15" fill="rgb(216,164,2)" fg:x="28460" fg:w="214"/><text x="10.4657%" y="479.50"></text></g><g><title>absl::container_internal::probe_seq&lt;16ul&gt;::offset (494 samples, 0.18%)</title><rect x="10.2947%" y="485" width="0.1773%" height="15" fill="rgb(220,129,5)" fg:x="28680" fg:w="494"/><text x="10.5447%" y="495.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::prefetch_heap_block (152 samples, 0.05%)</title><rect x="10.4720%" y="485" width="0.0546%" height="15" fill="rgb(242,17,10)" fg:x="29174" fg:w="152"/><text x="10.7220%" y="495.50"></text></g><g><title>absl::base_internal::PrefetchT2 (152 samples, 0.05%)</title><rect x="10.4720%" y="469" width="0.0546%" height="15" fill="rgb(242,107,0)" fg:x="29174" fg:w="152"/><text x="10.7220%" y="479.50"></text></g><g><title>absl::container_internal::IsEmpty (632 samples, 0.23%)</title><rect x="10.7495%" y="469" width="0.2269%" height="15" fill="rgb(251,28,31)" fg:x="29947" fg:w="632"/><text x="10.9995%" y="479.50"></text></g><g><title>absl::container_internal::SetCtrl (165 samples, 0.06%)</title><rect x="10.9763%" y="469" width="0.0592%" height="15" fill="rgb(233,223,10)" fg:x="30579" fg:w="165"/><text x="11.2263%" y="479.50"></text></g><g><title>absl::container_internal::SetCtrl (165 samples, 0.06%)</title><rect x="10.9763%" y="453" width="0.0592%" height="15" fill="rgb(215,21,27)" fg:x="30579" fg:w="165"/><text x="11.2263%" y="463.50"></text></g><g><title>_mm_movemask_epi8 (48 samples, 0.02%)</title><rect x="11.1357%" y="437" width="0.0172%" height="15" fill="rgb(232,23,21)" fg:x="31023" fg:w="48"/><text x="11.3857%" y="447.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::MaskEmptyOrDeleted (244 samples, 0.09%)</title><rect x="11.1357%" y="453" width="0.0876%" height="15" fill="rgb(244,5,23)" fg:x="31023" fg:w="244"/><text x="11.3857%" y="463.50"></text></g><g><title>absl::container_internal::_mm_cmpgt_epi8_fixed (196 samples, 0.07%)</title><rect x="11.1529%" y="437" width="0.0704%" height="15" fill="rgb(226,81,46)" fg:x="31071" fg:w="196"/><text x="11.4029%" y="447.50"></text></g><g><title>_mm_cmpgt_epi8 (196 samples, 0.07%)</title><rect x="11.1529%" y="421" width="0.0704%" height="15" fill="rgb(247,70,30)" fg:x="31071" fg:w="196"/><text x="11.4029%" y="431.50"></text></g><g><title>absl::container_internal::NonIterableBitMask&lt;unsigned int, 16, 0&gt;::LowestBitSet (85 samples, 0.03%)</title><rect x="11.2233%" y="453" width="0.0305%" height="15" fill="rgb(212,68,19)" fg:x="31267" fg:w="85"/><text x="11.4733%" y="463.50"></text></g><g><title>absl::container_internal::TrailingZeros&lt;unsigned int&gt; (85 samples, 0.03%)</title><rect x="11.2233%" y="437" width="0.0305%" height="15" fill="rgb(240,187,13)" fg:x="31267" fg:w="85"/><text x="11.4733%" y="447.50"></text></g><g><title>absl::countr_zero&lt;unsigned int&gt; (85 samples, 0.03%)</title><rect x="11.2233%" y="421" width="0.0305%" height="15" fill="rgb(223,113,26)" fg:x="31267" fg:w="85"/><text x="11.4733%" y="431.50"></text></g><g><title>absl::numeric_internal::CountTrailingZeroes&lt;unsigned int&gt; (85 samples, 0.03%)</title><rect x="11.2233%" y="405" width="0.0305%" height="15" fill="rgb(206,192,2)" fg:x="31267" fg:w="85"/><text x="11.4733%" y="415.50"></text></g><g><title>absl::numeric_internal::CountTrailingZeroesNonzero32 (85 samples, 0.03%)</title><rect x="11.2233%" y="389" width="0.0305%" height="15" fill="rgb(241,108,4)" fg:x="31267" fg:w="85"/><text x="11.4733%" y="399.50"></text></g><g><title>absl::container_internal::H1 (353 samples, 0.13%)</title><rect x="11.2538%" y="437" width="0.1267%" height="15" fill="rgb(247,173,49)" fg:x="31352" fg:w="353"/><text x="11.5038%" y="447.50"></text></g><g><title>absl::container_internal::PerTableSalt (347 samples, 0.12%)</title><rect x="11.2560%" y="421" width="0.1246%" height="15" fill="rgb(224,114,35)" fg:x="31358" fg:w="347"/><text x="11.5060%" y="431.50"></text></g><g><title>absl::container_internal::probe (588 samples, 0.21%)</title><rect x="11.2538%" y="453" width="0.2111%" height="15" fill="rgb(245,159,27)" fg:x="31352" fg:w="588"/><text x="11.5038%" y="463.50"></text></g><g><title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (235 samples, 0.08%)</title><rect x="11.3805%" y="437" width="0.0844%" height="15" fill="rgb(245,172,44)" fg:x="31705" fg:w="235"/><text x="11.6305%" y="447.50"></text></g><g><title>absl::container_internal::find_first_non_full&lt;void&gt; (1,732 samples, 0.62%)</title><rect x="11.0356%" y="469" width="0.6217%" height="15" fill="rgb(236,23,11)" fg:x="30744" fg:w="1732"/><text x="11.2856%" y="479.50"></text></g><g><title>absl::container_internal::probe_seq&lt;16ul&gt;::offset (535 samples, 0.19%)</title><rect x="11.4652%" y="453" width="0.1920%" height="15" fill="rgb(205,117,38)" fg:x="31941" fg:w="535"/><text x="11.7152%" y="463.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::prepare_insert (3,151 samples, 1.13%)</title><rect x="10.5266%" y="485" width="1.1311%" height="15" fill="rgb(237,72,25)" fg:x="29326" fg:w="3151"/><text x="10.7766%" y="495.50"></text></g><g><title>absl::hash_internal::HashImpl&lt;long&gt;::operator (1,321 samples, 0.47%)</title><rect x="11.6576%" y="485" width="0.4742%" height="15" fill="rgb(244,70,9)" fg:x="32477" fg:w="1321"/><text x="11.9076%" y="495.50"></text></g><g><title>absl::hash_internal::MixingHashState::hash&lt;long, 0&gt; (1,321 samples, 0.47%)</title><rect x="11.6576%" y="469" width="0.4742%" height="15" fill="rgb(217,125,39)" fg:x="32477" fg:w="1321"/><text x="11.9076%" y="479.50"></text></g><g><title>absl::hash_internal::MixingHashState::Mix (1,321 samples, 0.47%)</title><rect x="11.6576%" y="453" width="0.4742%" height="15" fill="rgb(235,36,10)" fg:x="32477" fg:w="1321"/><text x="11.9076%" y="463.50"></text></g><g><title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::operator[]&lt;long, absl::container_internal::FlatHashMapPolicy&lt;long, double&gt; &gt; (13,229 samples, 4.75%)</title><rect x="7.3840%" y="549" width="4.7486%" height="15" fill="rgb(251,123,47)" fg:x="20571" fg:w="13229"/><text x="7.6340%" y="559.50">absl::..</text></g><g><title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::try_emplace&lt;long, , 0&gt; (13,229 samples, 4.75%)</title><rect x="7.3840%" y="533" width="4.7486%" height="15" fill="rgb(221,13,13)" fg:x="20571" fg:w="13229"/><text x="7.6340%" y="543.50">absl::..</text></g><g><title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::try_emplace_impl&lt;long const&amp;&gt; (13,229 samples, 4.75%)</title><rect x="7.3840%" y="517" width="4.7486%" height="15" fill="rgb(238,131,9)" fg:x="20571" fg:w="13229"/><text x="7.6340%" y="527.50">absl::..</text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::find_or_prepare_insert&lt;long&gt; (12,714 samples, 4.56%)</title><rect x="7.5688%" y="501" width="4.5637%" height="15" fill="rgb(211,50,8)" fg:x="21086" fg:w="12714"/><text x="7.8188%" y="511.50">absl:..</text></g><g><title>absl::container_internal::BitMask&lt;unsigned int, 16, 0&gt;::operator* (305 samples, 0.11%)</title><rect x="32.3310%" y="501" width="0.1095%" height="15" fill="rgb(245,182,24)" fg:x="90071" fg:w="305"/><text x="32.5810%" y="511.50"></text></g><g><title>absl::container_internal::NonIterableBitMask&lt;unsigned int, 16, 0&gt;::LowestBitSet (305 samples, 0.11%)</title><rect x="32.3310%" y="485" width="0.1095%" height="15" fill="rgb(242,14,37)" fg:x="90071" fg:w="305"/><text x="32.5810%" y="495.50"></text></g><g><title>absl::container_internal::TrailingZeros&lt;unsigned int&gt; (305 samples, 0.11%)</title><rect x="32.3310%" y="469" width="0.1095%" height="15" fill="rgb(246,228,12)" fg:x="90071" fg:w="305"/><text x="32.5810%" y="479.50"></text></g><g><title>absl::countr_zero&lt;unsigned int&gt; (305 samples, 0.11%)</title><rect x="32.3310%" y="453" width="0.1095%" height="15" fill="rgb(213,55,15)" fg:x="90071" fg:w="305"/><text x="32.5810%" y="463.50"></text></g><g><title>absl::numeric_internal::CountTrailingZeroes&lt;unsigned int&gt; (305 samples, 0.11%)</title><rect x="32.3310%" y="437" width="0.1095%" height="15" fill="rgb(209,9,3)" fg:x="90071" fg:w="305"/><text x="32.5810%" y="447.50"></text></g><g><title>absl::numeric_internal::CountTrailingZeroesNonzero32 (305 samples, 0.11%)</title><rect x="32.3310%" y="421" width="0.1095%" height="15" fill="rgb(230,59,30)" fg:x="90071" fg:w="305"/><text x="32.5810%" y="431.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::GroupSse2Impl (38,044 samples, 13.66%)</title><rect x="32.4405%" y="501" width="13.6559%" height="15" fill="rgb(209,121,21)" fg:x="90376" fg:w="38044"/><text x="32.6905%" y="511.50">absl::container_inter..</text></g><g><title>_mm_loadu_si128 (38,044 samples, 13.66%)</title><rect x="32.4405%" y="485" width="13.6559%" height="15" fill="rgb(220,109,13)" fg:x="90376" fg:w="38044"/><text x="32.6905%" y="495.50">_mm_loadu_si128</text></g><g><title>_mm_cmpeq_epi8 (418 samples, 0.15%)</title><rect x="46.0968%" y="485" width="0.1500%" height="15" fill="rgb(232,18,1)" fg:x="128421" fg:w="418"/><text x="46.3468%" y="495.50"></text></g><g><title>_mm_movemask_epi8 (437 samples, 0.16%)</title><rect x="46.2468%" y="485" width="0.1569%" height="15" fill="rgb(215,41,42)" fg:x="128839" fg:w="437"/><text x="46.4968%" y="495.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::Match (1,372 samples, 0.49%)</title><rect x="46.0968%" y="501" width="0.4925%" height="15" fill="rgb(224,123,36)" fg:x="128421" fg:w="1372"/><text x="46.3468%" y="511.50"></text></g><g><title>_mm_set1_epi8 (517 samples, 0.19%)</title><rect x="46.4037%" y="485" width="0.1856%" height="15" fill="rgb(240,125,3)" fg:x="129276" fg:w="517"/><text x="46.6537%" y="495.50"></text></g><g><title>_mm_set_epi8 (517 samples, 0.19%)</title><rect x="46.4037%" y="469" width="0.1856%" height="15" fill="rgb(205,98,50)" fg:x="129276" fg:w="517"/><text x="46.6537%" y="479.50"></text></g><g><title>absl::container_internal::H1 (517 samples, 0.19%)</title><rect x="46.5921%" y="485" width="0.1856%" height="15" fill="rgb(205,185,37)" fg:x="129801" fg:w="517"/><text x="46.8421%" y="495.50"></text></g><g><title>absl::container_internal::probe (975 samples, 0.35%)</title><rect x="46.5921%" y="501" width="0.3500%" height="15" fill="rgb(238,207,15)" fg:x="129801" fg:w="975"/><text x="46.8421%" y="511.50"></text></g><g><title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (458 samples, 0.16%)</title><rect x="46.7777%" y="485" width="0.1644%" height="15" fill="rgb(213,199,42)" fg:x="130318" fg:w="458"/><text x="47.0277%" y="495.50"></text></g><g><title>absl::container_internal::probe_seq&lt;16ul&gt;::offset (290 samples, 0.10%)</title><rect x="46.9425%" y="501" width="0.1041%" height="15" fill="rgb(235,201,11)" fg:x="130777" fg:w="290"/><text x="47.1925%" y="511.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find&lt;long&gt; (97,307 samples, 34.93%)</title><rect x="12.1347%" y="533" width="34.9284%" height="15" fill="rgb(207,46,11)" fg:x="33806" fg:w="97307"/><text x="12.3847%" y="543.50">absl::container_internal::raw_hash_set&lt;absl::container_in..</text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find&lt;long&gt; (97,307 samples, 34.93%)</title><rect x="12.1347%" y="517" width="34.9284%" height="15" fill="rgb(241,35,35)" fg:x="33806" fg:w="97307"/><text x="12.3847%" y="527.50">absl::container_internal::raw_hash_set&lt;absl::container_in..</text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find&lt;long&gt; (98,689 samples, 35.42%)</title><rect x="12.1325%" y="549" width="35.4245%" height="15" fill="rgb(243,32,47)" fg:x="33800" fg:w="98689"/><text x="12.3825%" y="559.50">absl::container_internal::raw_hash_set&lt;absl::container_int..</text></g><g><title>absl::hash_internal::HashImpl&lt;long&gt;::operator (1,356 samples, 0.49%)</title><rect x="47.0702%" y="533" width="0.4867%" height="15" fill="rgb(247,202,23)" fg:x="131133" fg:w="1356"/><text x="47.3202%" y="543.50"></text></g><g><title>absl::hash_internal::MixingHashState::hash&lt;long, 0&gt; (1,356 samples, 0.49%)</title><rect x="47.0702%" y="517" width="0.4867%" height="15" fill="rgb(219,102,11)" fg:x="131133" fg:w="1356"/><text x="47.3202%" y="527.50"></text></g><g><title>absl::hash_internal::MixingHashState::Mix (1,356 samples, 0.49%)</title><rect x="47.0702%" y="501" width="0.4867%" height="15" fill="rgb(243,110,44)" fg:x="131133" fg:w="1356"/><text x="47.3202%" y="511.50"></text></g><g><title>__hrtimer_run_queues (29 samples, 0.01%)</title><rect x="47.5588%" y="501" width="0.0104%" height="15" fill="rgb(222,74,54)" fg:x="132494" fg:w="29"/><text x="47.8088%" y="511.50"></text></g><g><title>hrtimer_interrupt (32 samples, 0.01%)</title><rect x="47.5588%" y="517" width="0.0115%" height="15" fill="rgb(216,99,12)" fg:x="132494" fg:w="32"/><text x="47.8088%" y="527.50"></text></g><g><title>apic_timer_interrupt (38 samples, 0.01%)</title><rect x="47.5570%" y="549" width="0.0136%" height="15" fill="rgb(226,22,26)" fg:x="132489" fg:w="38"/><text x="47.8070%" y="559.50"></text></g><g><title>smp_apic_timer_interrupt (34 samples, 0.01%)</title><rect x="47.5584%" y="533" width="0.0122%" height="15" fill="rgb(217,163,10)" fg:x="132493" fg:w="34"/><text x="47.8084%" y="543.50"></text></g><g><title>error_entry (76 samples, 0.03%)</title><rect x="47.5717%" y="549" width="0.0273%" height="15" fill="rgb(213,25,53)" fg:x="132530" fg:w="76"/><text x="47.8217%" y="559.50"></text></g><g><title>down_read_trylock (48 samples, 0.02%)</title><rect x="47.6184%" y="485" width="0.0172%" height="15" fill="rgb(252,105,26)" fg:x="132660" fg:w="48"/><text x="47.8684%" y="495.50"></text></g><g><title>mpol_misplaced (35 samples, 0.01%)</title><rect x="47.7002%" y="437" width="0.0126%" height="15" fill="rgb(220,39,43)" fg:x="132888" fg:w="35"/><text x="47.9502%" y="447.50"></text></g><g><title>do_numa_page (123 samples, 0.04%)</title><rect x="47.6779%" y="453" width="0.0442%" height="15" fill="rgb(229,68,48)" fg:x="132826" fg:w="123"/><text x="47.9279%" y="463.50"></text></g><g><title>__handle_mm_fault (203 samples, 0.07%)</title><rect x="47.6525%" y="469" width="0.0729%" height="15" fill="rgb(252,8,32)" fg:x="132755" fg:w="203"/><text x="47.9025%" y="479.50"></text></g><g><title>handle_mm_fault (239 samples, 0.09%)</title><rect x="47.6410%" y="485" width="0.0858%" height="15" fill="rgb(223,20,43)" fg:x="132723" fg:w="239"/><text x="47.8910%" y="495.50"></text></g><g><title>do_user_addr_fault (335 samples, 0.12%)</title><rect x="47.6087%" y="501" width="0.1202%" height="15" fill="rgb(229,81,49)" fg:x="132633" fg:w="335"/><text x="47.8587%" y="511.50"></text></g><g><title>__do_page_fault (373 samples, 0.13%)</title><rect x="47.6019%" y="517" width="0.1339%" height="15" fill="rgb(236,28,36)" fg:x="132614" fg:w="373"/><text x="47.8519%" y="527.50"></text></g><g><title>page_fault (379 samples, 0.14%)</title><rect x="47.6001%" y="549" width="0.1360%" height="15" fill="rgb(249,185,26)" fg:x="132609" fg:w="379"/><text x="47.8501%" y="559.50"></text></g><g><title>do_page_fault (378 samples, 0.14%)</title><rect x="47.6004%" y="533" width="0.1357%" height="15" fill="rgb(249,174,33)" fg:x="132610" fg:w="378"/><text x="47.8504%" y="543.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (298 samples, 0.11%)</title><rect x="47.7400%" y="549" width="0.1070%" height="15" fill="rgb(233,201,37)" fg:x="132999" fg:w="298"/><text x="47.9900%" y="559.50"></text></g><g><title>prepare_exit_to_usermode (220 samples, 0.08%)</title><rect x="47.7680%" y="533" width="0.0790%" height="15" fill="rgb(221,78,26)" fg:x="133077" fg:w="220"/><text x="48.0180%" y="543.50"></text></g><g><title>distBuildLocalMapCounter (127,072 samples, 45.61%)</title><rect x="2.2445%" y="565" width="45.6125%" height="15" fill="rgb(250,127,30)" fg:x="6253" fg:w="127072"/><text x="2.4945%" y="575.50">distBuildLocalMapCounter</text></g><g><title>sync_regs (28 samples, 0.01%)</title><rect x="47.8470%" y="549" width="0.0101%" height="15" fill="rgb(230,49,44)" fg:x="133297" fg:w="28"/><text x="48.0970%" y="559.50"></text></g><g><title>absl::container_internal::BitMask&lt;unsigned int, 16, 0&gt;::operator* (96 samples, 0.03%)</title><rect x="52.5155%" y="501" width="0.0345%" height="15" fill="rgb(229,67,23)" fg:x="146303" fg:w="96"/><text x="52.7655%" y="511.50"></text></g><g><title>absl::container_internal::NonIterableBitMask&lt;unsigned int, 16, 0&gt;::LowestBitSet (96 samples, 0.03%)</title><rect x="52.5155%" y="485" width="0.0345%" height="15" fill="rgb(249,83,47)" fg:x="146303" fg:w="96"/><text x="52.7655%" y="495.50"></text></g><g><title>absl::container_internal::TrailingZeros&lt;unsigned int&gt; (96 samples, 0.03%)</title><rect x="52.5155%" y="469" width="0.0345%" height="15" fill="rgb(215,43,3)" fg:x="146303" fg:w="96"/><text x="52.7655%" y="479.50"></text></g><g><title>absl::countr_zero&lt;unsigned int&gt; (96 samples, 0.03%)</title><rect x="52.5155%" y="453" width="0.0345%" height="15" fill="rgb(238,154,13)" fg:x="146303" fg:w="96"/><text x="52.7655%" y="463.50"></text></g><g><title>absl::numeric_internal::CountTrailingZeroes&lt;unsigned int&gt; (96 samples, 0.03%)</title><rect x="52.5155%" y="437" width="0.0345%" height="15" fill="rgb(219,56,2)" fg:x="146303" fg:w="96"/><text x="52.7655%" y="447.50"></text></g><g><title>absl::numeric_internal::CountTrailingZeroesNonzero32 (96 samples, 0.03%)</title><rect x="52.5155%" y="421" width="0.0345%" height="15" fill="rgb(233,0,4)" fg:x="146303" fg:w="96"/><text x="52.7655%" y="431.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::GroupSse2Impl (2,177 samples, 0.78%)</title><rect x="52.5500%" y="501" width="0.7814%" height="15" fill="rgb(235,30,7)" fg:x="146399" fg:w="2177"/><text x="52.8000%" y="511.50"></text></g><g><title>_mm_loadu_si128 (2,177 samples, 0.78%)</title><rect x="52.5500%" y="485" width="0.7814%" height="15" fill="rgb(250,79,13)" fg:x="146399" fg:w="2177"/><text x="52.8000%" y="495.50"></text></g><g><title>_mm_cmpeq_epi8 (88 samples, 0.03%)</title><rect x="53.3321%" y="485" width="0.0316%" height="15" fill="rgb(211,146,34)" fg:x="148578" fg:w="88"/><text x="53.5821%" y="495.50"></text></g><g><title>_mm_movemask_epi8 (46 samples, 0.02%)</title><rect x="53.3637%" y="485" width="0.0165%" height="15" fill="rgb(228,22,38)" fg:x="148666" fg:w="46"/><text x="53.6137%" y="495.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::Match (358 samples, 0.13%)</title><rect x="53.3321%" y="501" width="0.1285%" height="15" fill="rgb(235,168,5)" fg:x="148578" fg:w="358"/><text x="53.5821%" y="511.50"></text></g><g><title>_mm_set1_epi8 (224 samples, 0.08%)</title><rect x="53.3802%" y="485" width="0.0804%" height="15" fill="rgb(221,155,16)" fg:x="148712" fg:w="224"/><text x="53.6302%" y="495.50"></text></g><g><title>_mm_set_epi8 (224 samples, 0.08%)</title><rect x="53.3802%" y="469" width="0.0804%" height="15" fill="rgb(215,215,53)" fg:x="148712" fg:w="224"/><text x="53.6302%" y="479.50"></text></g><g><title>absl::container_internal::H2 (69 samples, 0.02%)</title><rect x="53.4606%" y="501" width="0.0248%" height="15" fill="rgb(223,4,10)" fg:x="148936" fg:w="69"/><text x="53.7106%" y="511.50"></text></g><g><title>absl::container_internal::H1 (143 samples, 0.05%)</title><rect x="53.4854%" y="485" width="0.0513%" height="15" fill="rgb(234,103,6)" fg:x="149005" fg:w="143"/><text x="53.7354%" y="495.50"></text></g><g><title>absl::container_internal::PerTableSalt (114 samples, 0.04%)</title><rect x="53.4958%" y="469" width="0.0409%" height="15" fill="rgb(227,97,0)" fg:x="149034" fg:w="114"/><text x="53.7458%" y="479.50"></text></g><g><title>absl::container_internal::probe (157 samples, 0.06%)</title><rect x="53.4854%" y="501" width="0.0564%" height="15" fill="rgb(234,150,53)" fg:x="149005" fg:w="157"/><text x="53.7354%" y="511.50"></text></g><g><title>absl::container_internal::probe_seq&lt;16ul&gt;::offset (55 samples, 0.02%)</title><rect x="53.5421%" y="501" width="0.0197%" height="15" fill="rgb(228,201,54)" fg:x="149163" fg:w="55"/><text x="53.7921%" y="511.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::find&lt;long&gt; (12,289 samples, 4.41%)</title><rect x="49.1604%" y="533" width="4.4111%" height="15" fill="rgb(222,22,37)" fg:x="136956" fg:w="12289"/><text x="49.4104%" y="543.50">absl:..</text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::find&lt;long&gt; (12,289 samples, 4.41%)</title><rect x="49.1604%" y="517" width="4.4111%" height="15" fill="rgb(237,53,32)" fg:x="136956" fg:w="12289"/><text x="49.4104%" y="527.50">absl:..</text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::prefetch_heap_block (95 samples, 0.03%)</title><rect x="53.5716%" y="533" width="0.0341%" height="15" fill="rgb(233,25,53)" fg:x="149245" fg:w="95"/><text x="53.8216%" y="543.50"></text></g><g><title>absl::base_internal::PrefetchT2 (95 samples, 0.03%)</title><rect x="53.5716%" y="517" width="0.0341%" height="15" fill="rgb(210,40,34)" fg:x="149245" fg:w="95"/><text x="53.8216%" y="527.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::find&lt;long&gt; (12,686 samples, 4.55%)</title><rect x="49.1281%" y="549" width="4.5536%" height="15" fill="rgb(241,220,44)" fg:x="136866" fg:w="12686"/><text x="49.3781%" y="559.50">absl:..</text></g><g><title>absl::hash_internal::HashImpl&lt;long&gt;::operator (212 samples, 0.08%)</title><rect x="53.6057%" y="533" width="0.0761%" height="15" fill="rgb(235,28,35)" fg:x="149340" fg:w="212"/><text x="53.8557%" y="543.50"></text></g><g><title>absl::hash_internal::MixingHashState::hash&lt;long, 0&gt; (212 samples, 0.08%)</title><rect x="53.6057%" y="517" width="0.0761%" height="15" fill="rgb(210,56,17)" fg:x="149340" fg:w="212"/><text x="53.8557%" y="527.50"></text></g><g><title>absl::hash_internal::MixingHashState::Mix (212 samples, 0.08%)</title><rect x="53.6057%" y="501" width="0.0761%" height="15" fill="rgb(224,130,29)" fg:x="149340" fg:w="212"/><text x="53.8557%" y="511.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::begin (51 samples, 0.02%)</title><rect x="53.6818%" y="549" width="0.0183%" height="15" fill="rgb(235,212,8)" fg:x="149552" fg:w="51"/><text x="53.9318%" y="559.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::begin (51 samples, 0.02%)</title><rect x="53.6818%" y="533" width="0.0183%" height="15" fill="rgb(223,33,50)" fg:x="149552" fg:w="51"/><text x="53.9318%" y="543.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::iterator::skip_empty_or_deleted (51 samples, 0.02%)</title><rect x="53.6818%" y="517" width="0.0183%" height="15" fill="rgb(219,149,13)" fg:x="149552" fg:w="51"/><text x="53.9318%" y="527.50"></text></g><g><title>absl::container_internal::TrailingZeros&lt;unsigned int&gt; (126 samples, 0.05%)</title><rect x="54.0335%" y="485" width="0.0452%" height="15" fill="rgb(250,156,29)" fg:x="150532" fg:w="126"/><text x="54.2835%" y="495.50"></text></g><g><title>absl::countr_zero&lt;unsigned int&gt; (126 samples, 0.05%)</title><rect x="54.0335%" y="469" width="0.0452%" height="15" fill="rgb(216,193,19)" fg:x="150532" fg:w="126"/><text x="54.2835%" y="479.50"></text></g><g><title>absl::numeric_internal::CountTrailingZeroes&lt;unsigned int&gt; (126 samples, 0.05%)</title><rect x="54.0335%" y="453" width="0.0452%" height="15" fill="rgb(216,135,14)" fg:x="150532" fg:w="126"/><text x="54.2835%" y="463.50"></text></g><g><title>absl::numeric_internal::CountTrailingZeroesNonzero32 (126 samples, 0.05%)</title><rect x="54.0335%" y="437" width="0.0452%" height="15" fill="rgb(241,47,5)" fg:x="150532" fg:w="126"/><text x="54.2835%" y="447.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::CountLeadingEmptyOrDeleted (284 samples, 0.10%)</title><rect x="54.0224%" y="501" width="0.1019%" height="15" fill="rgb(233,42,35)" fg:x="150501" fg:w="284"/><text x="54.2724%" y="511.50"></text></g><g><title>absl::container_internal::_mm_cmpgt_epi8_fixed (127 samples, 0.05%)</title><rect x="54.0788%" y="485" width="0.0456%" height="15" fill="rgb(231,13,6)" fg:x="150658" fg:w="127"/><text x="54.3288%" y="495.50"></text></g><g><title>_mm_cmpgt_epi8 (127 samples, 0.05%)</title><rect x="54.0788%" y="469" width="0.0456%" height="15" fill="rgb(207,181,40)" fg:x="150658" fg:w="127"/><text x="54.3288%" y="479.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::const_iterator::operator++ (1,183 samples, 0.42%)</title><rect x="53.7001%" y="549" width="0.4246%" height="15" fill="rgb(254,173,49)" fg:x="149603" fg:w="1183"/><text x="53.9501%" y="559.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::iterator::operator++ (1,183 samples, 0.42%)</title><rect x="53.7001%" y="533" width="0.4246%" height="15" fill="rgb(221,1,38)" fg:x="149603" fg:w="1183"/><text x="53.9501%" y="543.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::iterator::skip_empty_or_deleted (1,156 samples, 0.41%)</title><rect x="53.7098%" y="517" width="0.4149%" height="15" fill="rgb(206,124,46)" fg:x="149630" fg:w="1156"/><text x="53.9598%" y="527.50"></text></g><g><title>distGetMaxIndex (17,505 samples, 6.28%)</title><rect x="47.8571%" y="565" width="6.2834%" height="15" fill="rgb(249,21,11)" fg:x="133325" fg:w="17505"/><text x="48.1071%" y="575.50">distGetM..</text></g><g><title>std::vector&lt;Comm, std::allocator&lt;Comm&gt; &gt;::operator[] (38 samples, 0.01%)</title><rect x="54.1269%" y="549" width="0.0136%" height="15" fill="rgb(222,201,40)" fg:x="150792" fg:w="38"/><text x="54.3769%" y="559.50"></text></g><g><title>__GI___pthread_mutex_lock (60 samples, 0.02%)</title><rect x="54.1448%" y="517" width="0.0215%" height="15" fill="rgb(235,61,29)" fg:x="150842" fg:w="60"/><text x="54.3948%" y="527.50"></text></g><g><title>std::lock_guard&lt;std::mutex&gt;::lock_guard (76 samples, 0.03%)</title><rect x="54.1430%" y="565" width="0.0273%" height="15" fill="rgb(219,207,3)" fg:x="150837" fg:w="76"/><text x="54.3930%" y="575.50"></text></g><g><title>std::mutex::lock (76 samples, 0.03%)</title><rect x="54.1430%" y="549" width="0.0273%" height="15" fill="rgb(222,56,46)" fg:x="150837" fg:w="76"/><text x="54.3930%" y="559.50"></text></g><g><title>distLouvainMethod (74 samples, 0.03%)</title><rect x="54.1437%" y="533" width="0.0266%" height="15" fill="rgb(239,76,54)" fg:x="150839" fg:w="74"/><text x="54.3937%" y="543.50"></text></g><g><title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (86 samples, 0.03%)</title><rect x="54.1703%" y="565" width="0.0309%" height="15" fill="rgb(231,124,27)" fg:x="150913" fg:w="86"/><text x="54.4203%" y="575.50"></text></g><g><title>std::mutex::unlock (86 samples, 0.03%)</title><rect x="54.1703%" y="549" width="0.0309%" height="15" fill="rgb(249,195,6)" fg:x="150913" fg:w="86"/><text x="54.4203%" y="559.50"></text></g><g><title>distLouvainMethod (86 samples, 0.03%)</title><rect x="54.1703%" y="533" width="0.0309%" height="15" fill="rgb(237,174,47)" fg:x="150913" fg:w="86"/><text x="54.4203%" y="543.50"></text></g><g><title>__GI___pthread_mutex_unlock (85 samples, 0.03%)</title><rect x="54.1706%" y="517" width="0.0305%" height="15" fill="rgb(206,201,31)" fg:x="150914" fg:w="85"/><text x="54.4206%" y="527.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (84 samples, 0.03%)</title><rect x="54.1710%" y="501" width="0.0302%" height="15" fill="rgb(231,57,52)" fg:x="150915" fg:w="84"/><text x="54.4210%" y="511.50"></text></g><g><title>std::vector&lt;Comm, std::allocator&lt;Comm&gt; &gt;::operator[] (115 samples, 0.04%)</title><rect x="54.2012%" y="565" width="0.0413%" height="15" fill="rgb(248,177,22)" fg:x="150999" fg:w="115"/><text x="54.4512%" y="575.50"></text></g><g><title>distExecuteLouvainIteration (146,538 samples, 52.60%)</title><rect x="1.6444%" y="581" width="52.5999%" height="15" fill="rgb(215,211,37)" fg:x="4581" fg:w="146538"/><text x="1.8944%" y="591.50">distExecuteLouvainIteration</text></g><g><title>distLouvainMethod (146,696 samples, 52.66%)</title><rect x="1.5905%" y="597" width="52.6566%" height="15" fill="rgb(241,128,51)" fg:x="4431" fg:w="146696"/><text x="1.8405%" y="607.50">distLouvainMethod</text></g><g><title>distSumVertexDegree (122 samples, 0.04%)</title><rect x="54.2471%" y="597" width="0.0438%" height="15" fill="rgb(227,165,31)" fg:x="151127" fg:w="122"/><text x="54.4971%" y="607.50"></text></g><g><title>std::advance&lt;__gnu_cxx::__normal_iterator&lt;long const*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long&gt; (82 samples, 0.03%)</title><rect x="54.4697%" y="533" width="0.0294%" height="15" fill="rgb(228,167,24)" fg:x="151747" fg:w="82"/><text x="54.7197%" y="543.50"></text></g><g><title>std::__advance&lt;__gnu_cxx::__normal_iterator&lt;long const*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long&gt; (82 samples, 0.03%)</title><rect x="54.4697%" y="517" width="0.0294%" height="15" fill="rgb(228,143,12)" fg:x="151747" fg:w="82"/><text x="54.7197%" y="527.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;long const*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;::operator+= (82 samples, 0.03%)</title><rect x="54.4697%" y="501" width="0.0294%" height="15" fill="rgb(249,149,8)" fg:x="151747" fg:w="82"/><text x="54.7197%" y="511.50"></text></g><g><title>Graph::get_owner (472 samples, 0.17%)</title><rect x="54.3480%" y="581" width="0.1694%" height="15" fill="rgb(243,35,44)" fg:x="151408" fg:w="472"/><text x="54.5980%" y="591.50"></text></g><g><title>std::upper_bound&lt;__gnu_cxx::__normal_iterator&lt;long const*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long&gt; (421 samples, 0.15%)</title><rect x="54.3663%" y="565" width="0.1511%" height="15" fill="rgb(246,89,9)" fg:x="151459" fg:w="421"/><text x="54.6163%" y="575.50"></text></g><g><title>std::__upper_bound&lt;__gnu_cxx::__normal_iterator&lt;long const*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Val_less_iter&gt; (421 samples, 0.15%)</title><rect x="54.3663%" y="549" width="0.1511%" height="15" fill="rgb(233,213,13)" fg:x="151459" fg:w="421"/><text x="54.6163%" y="559.50"></text></g><g><title>std::distance&lt;__gnu_cxx::__normal_iterator&lt;long const*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt; &gt; (51 samples, 0.02%)</title><rect x="54.4991%" y="533" width="0.0183%" height="15" fill="rgb(233,141,41)" fg:x="151829" fg:w="51"/><text x="54.7491%" y="543.50"></text></g><g><title>std::__distance&lt;__gnu_cxx::__normal_iterator&lt;long const*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt; &gt; (51 samples, 0.02%)</title><rect x="54.4991%" y="517" width="0.0183%" height="15" fill="rgb(239,167,4)" fg:x="151829" fg:w="51"/><text x="54.7491%" y="527.50"></text></g><g><title>__gnu_cxx::operator-&lt;long const*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt; (51 samples, 0.02%)</title><rect x="54.4991%" y="501" width="0.0183%" height="15" fill="rgb(209,217,16)" fg:x="151829" fg:w="51"/><text x="54.7491%" y="511.50"></text></g><g><title>do_user_addr_fault (45 samples, 0.02%)</title><rect x="54.5242%" y="533" width="0.0162%" height="15" fill="rgb(219,88,35)" fg:x="151899" fg:w="45"/><text x="54.7742%" y="543.50"></text></g><g><title>handle_mm_fault (34 samples, 0.01%)</title><rect x="54.5282%" y="517" width="0.0122%" height="15" fill="rgb(220,193,23)" fg:x="151910" fg:w="34"/><text x="54.7782%" y="527.50"></text></g><g><title>page_fault (51 samples, 0.02%)</title><rect x="54.5224%" y="581" width="0.0183%" height="15" fill="rgb(230,90,52)" fg:x="151894" fg:w="51"/><text x="54.7724%" y="591.50"></text></g><g><title>do_page_fault (50 samples, 0.02%)</title><rect x="54.5228%" y="565" width="0.0179%" height="15" fill="rgb(252,106,19)" fg:x="151895" fg:w="50"/><text x="54.7728%" y="575.50"></text></g><g><title>__do_page_fault (49 samples, 0.02%)</title><rect x="54.5231%" y="549" width="0.0176%" height="15" fill="rgb(206,74,20)" fg:x="151896" fg:w="49"/><text x="54.7731%" y="559.50"></text></g><g><title>entry_SYSCALL_64 (257 samples, 0.09%)</title><rect x="54.9449%" y="501" width="0.0923%" height="15" fill="rgb(230,138,44)" fg:x="153071" fg:w="257"/><text x="55.1949%" y="511.50"></text></g><g><title>_raw_spin_lock (90 samples, 0.03%)</title><rect x="55.6567%" y="421" width="0.0323%" height="15" fill="rgb(235,182,43)" fg:x="155054" fg:w="90"/><text x="55.9067%" y="431.50"></text></g><g><title>ctx_sched_out (72 samples, 0.03%)</title><rect x="55.7698%" y="341" width="0.0258%" height="15" fill="rgb(242,16,51)" fg:x="155369" fg:w="72"/><text x="56.0198%" y="351.50"></text></g><g><title>__perf_event_task_sched_out (99 samples, 0.04%)</title><rect x="55.7604%" y="373" width="0.0355%" height="15" fill="rgb(248,9,4)" fg:x="155343" fg:w="99"/><text x="56.0104%" y="383.50"></text></g><g><title>task_ctx_sched_out (73 samples, 0.03%)</title><rect x="55.7698%" y="357" width="0.0262%" height="15" fill="rgb(210,31,22)" fg:x="155369" fg:w="73"/><text x="56.0198%" y="367.50"></text></g><g><title>account_entity_dequeue (28 samples, 0.01%)</title><rect x="55.8344%" y="341" width="0.0101%" height="15" fill="rgb(239,54,39)" fg:x="155549" fg:w="28"/><text x="56.0844%" y="351.50"></text></g><g><title>account_entity_dequeue (34 samples, 0.01%)</title><rect x="55.8961%" y="325" width="0.0122%" height="15" fill="rgb(230,99,41)" fg:x="155721" fg:w="34"/><text x="56.1461%" y="335.50"></text></g><g><title>update_cfs_group (219 samples, 0.08%)</title><rect x="55.9162%" y="325" width="0.0786%" height="15" fill="rgb(253,106,12)" fg:x="155777" fg:w="219"/><text x="56.1662%" y="335.50"></text></g><g><title>reweight_entity (118 samples, 0.04%)</title><rect x="55.9525%" y="309" width="0.0424%" height="15" fill="rgb(213,46,41)" fg:x="155878" fg:w="118"/><text x="56.2025%" y="319.50"></text></g><g><title>__calc_delta (57 samples, 0.02%)</title><rect x="56.0279%" y="309" width="0.0205%" height="15" fill="rgb(215,133,35)" fg:x="156088" fg:w="57"/><text x="56.2779%" y="319.50"></text></g><g><title>cpuacct_charge (28 samples, 0.01%)</title><rect x="56.0544%" y="309" width="0.0101%" height="15" fill="rgb(213,28,5)" fg:x="156162" fg:w="28"/><text x="56.3044%" y="319.50"></text></g><g><title>update_curr (227 samples, 0.08%)</title><rect x="55.9948%" y="325" width="0.0815%" height="15" fill="rgb(215,77,49)" fg:x="155996" fg:w="227"/><text x="56.2448%" y="335.50"></text></g><g><title>update_min_vruntime (33 samples, 0.01%)</title><rect x="56.0645%" y="309" width="0.0118%" height="15" fill="rgb(248,100,22)" fg:x="156190" fg:w="33"/><text x="56.3145%" y="319.50"></text></g><g><title>__update_load_avg_cfs_rq (46 samples, 0.02%)</title><rect x="56.0964%" y="309" width="0.0165%" height="15" fill="rgb(208,67,9)" fg:x="156279" fg:w="46"/><text x="56.3464%" y="319.50"></text></g><g><title>update_load_avg (148 samples, 0.05%)</title><rect x="56.0763%" y="325" width="0.0531%" height="15" fill="rgb(219,133,21)" fg:x="156223" fg:w="148"/><text x="56.3263%" y="335.50"></text></g><g><title>__update_load_avg_se (46 samples, 0.02%)</title><rect x="56.1129%" y="309" width="0.0165%" height="15" fill="rgb(246,46,29)" fg:x="156325" fg:w="46"/><text x="56.3629%" y="319.50"></text></g><g><title>dequeue_entity (808 samples, 0.29%)</title><rect x="55.8480%" y="341" width="0.2900%" height="15" fill="rgb(246,185,52)" fg:x="155587" fg:w="808"/><text x="56.0980%" y="351.50"></text></g><g><title>update_cfs_group (38 samples, 0.01%)</title><rect x="56.1381%" y="341" width="0.0136%" height="15" fill="rgb(252,136,11)" fg:x="156395" fg:w="38"/><text x="56.3881%" y="351.50"></text></g><g><title>dequeue_task_fair (992 samples, 0.36%)</title><rect x="55.8114%" y="357" width="0.3561%" height="15" fill="rgb(219,138,53)" fg:x="155485" fg:w="992"/><text x="56.0614%" y="367.50"></text></g><g><title>record_times (121 samples, 0.04%)</title><rect x="56.2885%" y="341" width="0.0434%" height="15" fill="rgb(211,51,23)" fg:x="156814" fg:w="121"/><text x="56.5385%" y="351.50"></text></g><g><title>sched_clock_cpu (67 samples, 0.02%)</title><rect x="56.3078%" y="325" width="0.0240%" height="15" fill="rgb(247,221,28)" fg:x="156868" fg:w="67"/><text x="56.5578%" y="335.50"></text></g><g><title>native_sched_clock (48 samples, 0.02%)</title><rect x="56.3147%" y="309" width="0.0172%" height="15" fill="rgb(251,222,45)" fg:x="156887" fg:w="48"/><text x="56.5647%" y="319.50"></text></g><g><title>psi_task_change (460 samples, 0.17%)</title><rect x="56.1678%" y="357" width="0.1651%" height="15" fill="rgb(217,162,53)" fg:x="156478" fg:w="460"/><text x="56.4178%" y="367.50"></text></g><g><title>deactivate_task (1,479 samples, 0.53%)</title><rect x="55.8024%" y="373" width="0.5309%" height="15" fill="rgb(229,93,14)" fg:x="155460" fg:w="1479"/><text x="56.0524%" y="383.50"></text></g><g><title>__perf_event_task_sched_in (224 samples, 0.08%)</title><rect x="56.4004%" y="357" width="0.0804%" height="15" fill="rgb(209,67,49)" fg:x="157126" fg:w="224"/><text x="56.6504%" y="367.50"></text></g><g><title>perf_pmu_enable.part.0 (198 samples, 0.07%)</title><rect x="56.4098%" y="341" width="0.0711%" height="15" fill="rgb(213,87,29)" fg:x="157152" fg:w="198"/><text x="56.6598%" y="351.50"></text></g><g><title>x86_pmu_enable (193 samples, 0.07%)</title><rect x="56.4116%" y="325" width="0.0693%" height="15" fill="rgb(205,151,52)" fg:x="157157" fg:w="193"/><text x="56.6616%" y="335.50"></text></g><g><title>intel_pmu_enable_all (183 samples, 0.07%)</title><rect x="56.4152%" y="309" width="0.0657%" height="15" fill="rgb(253,215,39)" fg:x="157167" fg:w="183"/><text x="56.6652%" y="319.50"></text></g><g><title>native_write_msr (172 samples, 0.06%)</title><rect x="56.4191%" y="293" width="0.0617%" height="15" fill="rgb(221,220,41)" fg:x="157178" fg:w="172"/><text x="56.6691%" y="303.50"></text></g><g><title>finish_task_switch (409 samples, 0.15%)</title><rect x="56.3348%" y="373" width="0.1468%" height="15" fill="rgb(218,133,21)" fg:x="156943" fg:w="409"/><text x="56.5848%" y="383.50"></text></g><g><title>pick_next_task_fair (89 samples, 0.03%)</title><rect x="56.4848%" y="373" width="0.0319%" height="15" fill="rgb(221,193,43)" fg:x="157361" fg:w="89"/><text x="56.7348%" y="383.50"></text></g><g><title>newidle_balance (70 samples, 0.03%)</title><rect x="56.4916%" y="357" width="0.0251%" height="15" fill="rgb(240,128,52)" fg:x="157380" fg:w="70"/><text x="56.7416%" y="367.50"></text></g><g><title>put_prev_task_fair (43 samples, 0.02%)</title><rect x="56.5228%" y="357" width="0.0154%" height="15" fill="rgb(253,114,12)" fg:x="157467" fg:w="43"/><text x="56.7728%" y="367.50"></text></g><g><title>pick_next_task_idle (61 samples, 0.02%)</title><rect x="56.5167%" y="373" width="0.0219%" height="15" fill="rgb(215,223,47)" fg:x="157450" fg:w="61"/><text x="56.7667%" y="383.50"></text></g><g><title>__schedule (2,352 samples, 0.84%)</title><rect x="55.7227%" y="389" width="0.8443%" height="15" fill="rgb(248,225,23)" fg:x="155238" fg:w="2352"/><text x="55.9727%" y="399.50"></text></g><g><title>update_rq_clock (49 samples, 0.02%)</title><rect x="56.5494%" y="373" width="0.0176%" height="15" fill="rgb(250,108,0)" fg:x="157541" fg:w="49"/><text x="56.7994%" y="383.50"></text></g><g><title>sched_clock_cpu (32 samples, 0.01%)</title><rect x="56.5555%" y="357" width="0.0115%" height="15" fill="rgb(228,208,7)" fg:x="157558" fg:w="32"/><text x="56.8055%" y="367.50"></text></g><g><title>_raw_spin_lock (59 samples, 0.02%)</title><rect x="56.5684%" y="389" width="0.0212%" height="15" fill="rgb(244,45,10)" fg:x="157594" fg:w="59"/><text x="56.8184%" y="399.50"></text></g><g><title>futex_wait_queue_me (2,516 samples, 0.90%)</title><rect x="55.6912%" y="421" width="0.9031%" height="15" fill="rgb(207,125,25)" fg:x="155150" fg:w="2516"/><text x="55.9412%" y="431.50"></text></g><g><title>schedule (2,440 samples, 0.88%)</title><rect x="55.7184%" y="405" width="0.8758%" height="15" fill="rgb(210,195,18)" fg:x="155226" fg:w="2440"/><text x="55.9684%" y="415.50"></text></g><g><title>_raw_spin_lock (332 samples, 0.12%)</title><rect x="56.7282%" y="405" width="0.1192%" height="15" fill="rgb(249,80,12)" fg:x="158039" fg:w="332"/><text x="56.9782%" y="415.50"></text></g><g><title>native_queued_spin_lock_slowpath (332 samples, 0.12%)</title><rect x="56.7282%" y="389" width="0.1192%" height="15" fill="rgb(221,65,9)" fg:x="158039" fg:w="332"/><text x="56.9782%" y="399.50"></text></g><g><title>get_futex_key (134 samples, 0.05%)</title><rect x="56.8473%" y="405" width="0.0481%" height="15" fill="rgb(235,49,36)" fg:x="158371" fg:w="134"/><text x="57.0973%" y="415.50"></text></g><g><title>get_futex_key_refs.isra.0 (71 samples, 0.03%)</title><rect x="56.8700%" y="389" width="0.0255%" height="15" fill="rgb(225,32,20)" fg:x="158434" fg:w="71"/><text x="57.1200%" y="399.50"></text></g><g><title>get_futex_value_locked (236 samples, 0.08%)</title><rect x="56.8962%" y="405" width="0.0847%" height="15" fill="rgb(215,141,46)" fg:x="158507" fg:w="236"/><text x="57.1462%" y="415.50"></text></g><g><title>futex_wait_setup (1,079 samples, 0.39%)</title><rect x="56.5943%" y="421" width="0.3873%" height="15" fill="rgb(250,160,47)" fg:x="157666" fg:w="1079"/><text x="56.8443%" y="431.50"></text></g><g><title>hash_futex (95 samples, 0.03%)</title><rect x="56.9927%" y="421" width="0.0341%" height="15" fill="rgb(216,222,40)" fg:x="158776" fg:w="95"/><text x="57.2427%" y="431.50"></text></g><g><title>plist_add (52 samples, 0.02%)</title><rect x="57.0268%" y="421" width="0.0187%" height="15" fill="rgb(234,217,39)" fg:x="158871" fg:w="52"/><text x="57.2768%" y="431.50"></text></g><g><title>futex_wait (3,947 samples, 1.42%)</title><rect x="55.6309%" y="437" width="1.4168%" height="15" fill="rgb(207,178,40)" fg:x="154982" fg:w="3947"/><text x="55.8809%" y="447.50"></text></g><g><title>do_futex (4,057 samples, 1.46%)</title><rect x="55.5975%" y="453" width="1.4563%" height="15" fill="rgb(221,136,13)" fg:x="154889" fg:w="4057"/><text x="55.8475%" y="463.50"></text></g><g><title>__x64_sys_futex (4,130 samples, 1.48%)</title><rect x="55.5738%" y="469" width="1.4825%" height="15" fill="rgb(249,199,10)" fg:x="154823" fg:w="4130"/><text x="55.8238%" y="479.50"></text></g><g><title>do_syscall_64 (5,511 samples, 1.98%)</title><rect x="55.0953%" y="485" width="1.9782%" height="15" fill="rgb(249,222,13)" fg:x="153490" fg:w="5511"/><text x="55.3453%" y="495.50">d..</text></g><g><title>entry_SYSCALL_64_after_hwframe (5,693 samples, 2.04%)</title><rect x="55.0372%" y="501" width="2.0435%" height="15" fill="rgb(244,185,38)" fg:x="153328" fg:w="5693"/><text x="55.2872%" y="511.50">e..</text></g><g><title>__lll_lock_wait (6,851 samples, 2.46%)</title><rect x="54.7758%" y="517" width="2.4592%" height="15" fill="rgb(236,202,9)" fg:x="152600" fg:w="6851"/><text x="55.0258%" y="527.50">__..</text></g><g><title>syscall_return_via_sysret (429 samples, 0.15%)</title><rect x="57.0810%" y="501" width="0.1540%" height="15" fill="rgb(250,229,37)" fg:x="159022" fg:w="429"/><text x="57.3310%" y="511.50"></text></g><g><title>__GI___pthread_mutex_lock (7,420 samples, 2.66%)</title><rect x="54.5720%" y="533" width="2.6634%" height="15" fill="rgb(206,174,23)" fg:x="152032" fg:w="7420"/><text x="54.8220%" y="543.50">__..</text></g><g><title>__GI___pthread_mutex_unlock (189 samples, 0.07%)</title><rect x="57.2354%" y="533" width="0.0678%" height="15" fill="rgb(211,33,43)" fg:x="159452" fg:w="189"/><text x="57.4854%" y="543.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (189 samples, 0.07%)</title><rect x="57.2354%" y="517" width="0.0678%" height="15" fill="rgb(245,58,50)" fg:x="159452" fg:w="189"/><text x="57.4854%" y="527.50"></text></g><g><title>entry_SYSCALL_64 (189 samples, 0.07%)</title><rect x="57.2354%" y="501" width="0.0678%" height="15" fill="rgb(244,68,36)" fg:x="159452" fg:w="189"/><text x="57.4854%" y="511.50"></text></g><g><title>std::lock_guard&lt;std::mutex&gt;::lock_guard (7,722 samples, 2.77%)</title><rect x="54.5407%" y="581" width="2.7718%" height="15" fill="rgb(232,229,15)" fg:x="151945" fg:w="7722"/><text x="54.7907%" y="591.50">st..</text></g><g><title>std::mutex::lock (7,722 samples, 2.77%)</title><rect x="54.5407%" y="565" width="2.7718%" height="15" fill="rgb(254,30,23)" fg:x="151945" fg:w="7722"/><text x="54.7907%" y="575.50">st..</text></g><g><title>exchangeVertexReqs (7,697 samples, 2.76%)</title><rect x="54.5497%" y="549" width="2.7628%" height="15" fill="rgb(235,160,14)" fg:x="151970" fg:w="7697"/><text x="54.7997%" y="559.50">ex..</text></g><g><title>entry_SYSCALL_64 (229 samples, 0.08%)</title><rect x="57.7142%" y="501" width="0.0822%" height="15" fill="rgb(212,155,44)" fg:x="160786" fg:w="229"/><text x="57.9642%" y="511.50"></text></g><g><title>_raw_spin_lock (190 samples, 0.07%)</title><rect x="58.3492%" y="437" width="0.0682%" height="15" fill="rgb(226,2,50)" fg:x="162555" fg:w="190"/><text x="58.5992%" y="447.50"></text></g><g><title>_raw_spin_lock (256 samples, 0.09%)</title><rect x="58.5276%" y="421" width="0.0919%" height="15" fill="rgb(234,177,6)" fg:x="163052" fg:w="256"/><text x="58.7776%" y="431.50"></text></g><g><title>native_queued_spin_lock_slowpath (255 samples, 0.09%)</title><rect x="58.5279%" y="405" width="0.0915%" height="15" fill="rgb(217,24,9)" fg:x="163053" fg:w="255"/><text x="58.7779%" y="415.50"></text></g><g><title>get_futex_key (74 samples, 0.03%)</title><rect x="58.6195%" y="421" width="0.0266%" height="15" fill="rgb(220,13,46)" fg:x="163308" fg:w="74"/><text x="58.8695%" y="431.50"></text></g><g><title>get_futex_key_refs.isra.0 (43 samples, 0.02%)</title><rect x="58.6306%" y="405" width="0.0154%" height="15" fill="rgb(239,221,27)" fg:x="163339" fg:w="43"/><text x="58.8806%" y="415.50"></text></g><g><title>__unqueue_futex (115 samples, 0.04%)</title><rect x="58.6834%" y="405" width="0.0413%" height="15" fill="rgb(222,198,25)" fg:x="163486" fg:w="115"/><text x="58.9334%" y="415.50"></text></g><g><title>mark_wake_futex (216 samples, 0.08%)</title><rect x="58.6493%" y="421" width="0.0775%" height="15" fill="rgb(211,99,13)" fg:x="163391" fg:w="216"/><text x="58.8993%" y="431.50"></text></g><g><title>wake_q_add_safe (33 samples, 0.01%)</title><rect x="58.7290%" y="421" width="0.0118%" height="15" fill="rgb(232,111,31)" fg:x="163613" fg:w="33"/><text x="58.9790%" y="431.50"></text></g><g><title>_raw_spin_lock (31 samples, 0.01%)</title><rect x="58.7684%" y="405" width="0.0111%" height="15" fill="rgb(245,82,37)" fg:x="163723" fg:w="31"/><text x="59.0184%" y="415.50"></text></g><g><title>_raw_spin_lock_irqsave (34 samples, 0.01%)</title><rect x="59.6963%" y="389" width="0.0122%" height="15" fill="rgb(227,149,46)" fg:x="166308" fg:w="34"/><text x="59.9463%" y="399.50"></text></g><g><title>select_task_rq_fair (191 samples, 0.07%)</title><rect x="59.7132%" y="389" width="0.0686%" height="15" fill="rgb(218,36,50)" fg:x="166355" fg:w="191"/><text x="59.9632%" y="399.50"></text></g><g><title>place_entity (28 samples, 0.01%)</title><rect x="59.9361%" y="325" width="0.0101%" height="15" fill="rgb(226,80,48)" fg:x="166976" fg:w="28"/><text x="60.1861%" y="335.50"></text></g><g><title>update_cfs_group (302 samples, 0.11%)</title><rect x="59.9472%" y="325" width="0.1084%" height="15" fill="rgb(238,224,15)" fg:x="167007" fg:w="302"/><text x="60.1972%" y="335.50"></text></g><g><title>reweight_entity (221 samples, 0.08%)</title><rect x="59.9763%" y="309" width="0.0793%" height="15" fill="rgb(241,136,10)" fg:x="167088" fg:w="221"/><text x="60.2263%" y="319.50"></text></g><g><title>update_curr (114 samples, 0.04%)</title><rect x="60.0556%" y="325" width="0.0409%" height="15" fill="rgb(208,32,45)" fg:x="167309" fg:w="114"/><text x="60.3056%" y="335.50"></text></g><g><title>__update_load_avg_cfs_rq (158 samples, 0.06%)</title><rect x="60.1881%" y="309" width="0.0567%" height="15" fill="rgb(207,135,9)" fg:x="167678" fg:w="158"/><text x="60.4381%" y="319.50"></text></g><g><title>enqueue_entity (1,127 samples, 0.40%)</title><rect x="59.8604%" y="341" width="0.4045%" height="15" fill="rgb(206,86,44)" fg:x="166765" fg:w="1127"/><text x="60.1104%" y="351.50"></text></g><g><title>update_load_avg (469 samples, 0.17%)</title><rect x="60.0966%" y="325" width="0.1683%" height="15" fill="rgb(245,177,15)" fg:x="167423" fg:w="469"/><text x="60.3466%" y="335.50"></text></g><g><title>__update_load_avg_se (56 samples, 0.02%)</title><rect x="60.2448%" y="309" width="0.0201%" height="15" fill="rgb(206,64,50)" fg:x="167836" fg:w="56"/><text x="60.4948%" y="319.50"></text></g><g><title>update_cfs_group (30 samples, 0.01%)</title><rect x="60.2656%" y="341" width="0.0108%" height="15" fill="rgb(234,36,40)" fg:x="167894" fg:w="30"/><text x="60.5156%" y="351.50"></text></g><g><title>enqueue_task_fair (1,318 samples, 0.47%)</title><rect x="59.8062%" y="357" width="0.4731%" height="15" fill="rgb(213,64,8)" fg:x="166614" fg:w="1318"/><text x="60.0562%" y="367.50"></text></g><g><title>record_times (139 samples, 0.05%)</title><rect x="60.3830%" y="341" width="0.0499%" height="15" fill="rgb(210,75,36)" fg:x="168221" fg:w="139"/><text x="60.6330%" y="351.50"></text></g><g><title>sched_clock_cpu (72 samples, 0.03%)</title><rect x="60.4070%" y="325" width="0.0258%" height="15" fill="rgb(229,88,21)" fg:x="168288" fg:w="72"/><text x="60.6570%" y="335.50"></text></g><g><title>native_sched_clock (63 samples, 0.02%)</title><rect x="60.4103%" y="309" width="0.0226%" height="15" fill="rgb(252,204,47)" fg:x="168297" fg:w="63"/><text x="60.6603%" y="319.50"></text></g><g><title>psi_task_change (430 samples, 0.15%)</title><rect x="60.2803%" y="357" width="0.1543%" height="15" fill="rgb(208,77,27)" fg:x="167935" fg:w="430"/><text x="60.5303%" y="367.50"></text></g><g><title>activate_task (1,805 samples, 0.65%)</title><rect x="59.7904%" y="373" width="0.6479%" height="15" fill="rgb(221,76,26)" fg:x="166570" fg:w="1805"/><text x="60.0404%" y="383.50"></text></g><g><title>check_preempt_curr (323 samples, 0.12%)</title><rect x="60.4516%" y="357" width="0.1159%" height="15" fill="rgb(225,139,18)" fg:x="168412" fg:w="323"/><text x="60.7016%" y="367.50"></text></g><g><title>resched_curr (294 samples, 0.11%)</title><rect x="60.4620%" y="341" width="0.1055%" height="15" fill="rgb(230,137,11)" fg:x="168441" fg:w="294"/><text x="60.7120%" y="351.50"></text></g><g><title>ttwu_do_activate (2,212 samples, 0.79%)</title><rect x="59.7818%" y="389" width="0.7940%" height="15" fill="rgb(212,28,1)" fg:x="166546" fg:w="2212"/><text x="60.0318%" y="399.50"></text></g><g><title>ttwu_do_wakeup (376 samples, 0.13%)</title><rect x="60.4408%" y="373" width="0.1350%" height="15" fill="rgb(248,164,17)" fg:x="168382" fg:w="376"/><text x="60.6908%" y="383.50"></text></g><g><title>update_cfs_rq_h_load (100 samples, 0.04%)</title><rect x="60.5761%" y="389" width="0.0359%" height="15" fill="rgb(222,171,42)" fg:x="168759" fg:w="100"/><text x="60.8261%" y="399.50"></text></g><g><title>try_to_wake_up (5,218 samples, 1.87%)</title><rect x="58.7871%" y="405" width="1.8730%" height="15" fill="rgb(243,84,45)" fg:x="163775" fg:w="5218"/><text x="59.0371%" y="415.50">t..</text></g><g><title>update_rq_clock (134 samples, 0.05%)</title><rect x="60.6120%" y="389" width="0.0481%" height="15" fill="rgb(252,49,23)" fg:x="168859" fg:w="134"/><text x="60.8620%" y="399.50"></text></g><g><title>sched_clock_cpu (38 samples, 0.01%)</title><rect x="60.6465%" y="373" width="0.0136%" height="15" fill="rgb(215,19,7)" fg:x="168955" fg:w="38"/><text x="60.8965%" y="383.50"></text></g><g><title>native_sched_clock (29 samples, 0.01%)</title><rect x="60.6497%" y="357" width="0.0104%" height="15" fill="rgb(238,81,41)" fg:x="168964" fg:w="29"/><text x="60.8997%" y="367.50"></text></g><g><title>futex_wake (6,240 samples, 2.24%)</title><rect x="58.4221%" y="437" width="2.2399%" height="15" fill="rgb(210,199,37)" fg:x="162758" fg:w="6240"/><text x="58.6721%" y="447.50">f..</text></g><g><title>wake_up_q (5,352 samples, 1.92%)</title><rect x="58.7408%" y="421" width="1.9211%" height="15" fill="rgb(244,192,49)" fg:x="163646" fg:w="5352"/><text x="58.9908%" y="431.50">w..</text></g><g><title>hash_futex (84 samples, 0.03%)</title><rect x="60.6651%" y="437" width="0.0302%" height="15" fill="rgb(226,211,11)" fg:x="169007" fg:w="84"/><text x="60.9151%" y="447.50"></text></g><g><title>do_futex (6,616 samples, 2.37%)</title><rect x="58.3226%" y="453" width="2.3748%" height="15" fill="rgb(236,162,54)" fg:x="162481" fg:w="6616"/><text x="58.5726%" y="463.50">do..</text></g><g><title>__x64_sys_futex (6,709 samples, 2.41%)</title><rect x="58.2914%" y="469" width="2.4082%" height="15" fill="rgb(220,229,9)" fg:x="162394" fg:w="6709"/><text x="58.5414%" y="479.50">__..</text></g><g><title>do_syscall_64 (8,008 samples, 2.87%)</title><rect x="57.8348%" y="485" width="2.8745%" height="15" fill="rgb(250,87,22)" fg:x="161122" fg:w="8008"/><text x="58.0848%" y="495.50">do..</text></g><g><title>entry_SYSCALL_64_after_hwframe (8,131 samples, 2.92%)</title><rect x="57.7964%" y="501" width="2.9186%" height="15" fill="rgb(239,43,17)" fg:x="161015" fg:w="8131"/><text x="58.0464%" y="511.50">en..</text></g><g><title>__GI___pthread_mutex_unlock (9,884 samples, 3.55%)</title><rect x="57.3183%" y="533" width="3.5479%" height="15" fill="rgb(231,177,25)" fg:x="159683" fg:w="9884"/><text x="57.5683%" y="543.50">__GI..</text></g><g><title>__pthread_mutex_unlock_usercnt (9,873 samples, 3.54%)</title><rect x="57.3222%" y="517" width="3.5439%" height="15" fill="rgb(219,179,1)" fg:x="159694" fg:w="9873"/><text x="57.5722%" y="527.50">__pt..</text></g><g><title>syscall_return_via_sysret (410 samples, 0.15%)</title><rect x="60.7190%" y="501" width="0.1472%" height="15" fill="rgb(238,219,53)" fg:x="169157" fg:w="410"/><text x="60.9690%" y="511.50"></text></g><g><title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (9,918 samples, 3.56%)</title><rect x="57.3125%" y="581" width="3.5601%" height="15" fill="rgb(232,167,36)" fg:x="159667" fg:w="9918"/><text x="57.5625%" y="591.50">std:..</text></g><g><title>std::mutex::unlock (9,918 samples, 3.56%)</title><rect x="57.3125%" y="565" width="3.5601%" height="15" fill="rgb(244,19,51)" fg:x="159667" fg:w="9918"/><text x="57.5625%" y="575.50">std:..</text></g><g><title>exchangeVertexReqs (9,918 samples, 3.56%)</title><rect x="57.3125%" y="549" width="3.5601%" height="15" fill="rgb(224,6,22)" fg:x="159667" fg:w="9918"/><text x="57.5625%" y="559.50">exch..</text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (64 samples, 0.02%)</title><rect x="60.8866%" y="533" width="0.0230%" height="15" fill="rgb(224,145,5)" fg:x="169624" fg:w="64"/><text x="61.1366%" y="543.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;long, long, std::__detail::_Identity, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (64 samples, 0.02%)</title><rect x="60.8866%" y="517" width="0.0230%" height="15" fill="rgb(234,130,49)" fg:x="169624" fg:w="64"/><text x="61.1366%" y="527.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (64 samples, 0.02%)</title><rect x="60.8866%" y="501" width="0.0230%" height="15" fill="rgb(254,6,2)" fg:x="169624" fg:w="64"/><text x="61.1366%" y="511.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (390 samples, 0.14%)</title><rect x="63.2245%" y="501" width="0.1400%" height="15" fill="rgb(208,96,46)" fg:x="176137" fg:w="390"/><text x="63.4745%" y="511.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;long, long, std::__detail::_Identity, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (390 samples, 0.14%)</title><rect x="63.2245%" y="485" width="0.1400%" height="15" fill="rgb(239,3,39)" fg:x="176137" fg:w="390"/><text x="63.4745%" y="495.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_node (6,854 samples, 2.46%)</title><rect x="60.9096%" y="533" width="2.4602%" height="15" fill="rgb(233,210,1)" fg:x="169688" fg:w="6854"/><text x="61.1596%" y="543.50">st..</text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (6,854 samples, 2.46%)</title><rect x="60.9096%" y="517" width="2.4602%" height="15" fill="rgb(244,137,37)" fg:x="169688" fg:w="6854"/><text x="61.1596%" y="527.50">st..</text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_bucket_begin (59 samples, 0.02%)</title><rect x="63.3738%" y="517" width="0.0212%" height="15" fill="rgb(240,136,2)" fg:x="176553" fg:w="59"/><text x="63.6238%" y="527.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (34 samples, 0.01%)</title><rect x="63.3827%" y="501" width="0.0122%" height="15" fill="rgb(239,18,37)" fg:x="176578" fg:w="34"/><text x="63.6327%" y="511.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;long, long, std::__detail::_Identity, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (34 samples, 0.01%)</title><rect x="63.3827%" y="485" width="0.0122%" height="15" fill="rgb(218,185,22)" fg:x="176578" fg:w="34"/><text x="63.6327%" y="495.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (34 samples, 0.01%)</title><rect x="63.3827%" y="469" width="0.0122%" height="15" fill="rgb(225,218,4)" fg:x="176578" fg:w="34"/><text x="63.6327%" y="479.50"></text></g><g><title>page_fault (32 samples, 0.01%)</title><rect x="63.5378%" y="437" width="0.0115%" height="15" fill="rgb(230,182,32)" fg:x="177010" fg:w="32"/><text x="63.7878%" y="447.50"></text></g><g><title>do_page_fault (32 samples, 0.01%)</title><rect x="63.5378%" y="421" width="0.0115%" height="15" fill="rgb(242,56,43)" fg:x="177010" fg:w="32"/><text x="63.7878%" y="431.50"></text></g><g><title>__do_page_fault (32 samples, 0.01%)</title><rect x="63.5378%" y="405" width="0.0115%" height="15" fill="rgb(233,99,24)" fg:x="177010" fg:w="32"/><text x="63.7878%" y="415.50"></text></g><g><title>do_user_addr_fault (31 samples, 0.01%)</title><rect x="63.5382%" y="389" width="0.0111%" height="15" fill="rgb(234,209,42)" fg:x="177011" fg:w="31"/><text x="63.7882%" y="399.50"></text></g><g><title>handle_mm_fault (28 samples, 0.01%)</title><rect x="63.5393%" y="373" width="0.0101%" height="15" fill="rgb(227,7,12)" fg:x="177014" fg:w="28"/><text x="63.7893%" y="383.50"></text></g><g><title>__handle_mm_fault (28 samples, 0.01%)</title><rect x="63.5393%" y="357" width="0.0101%" height="15" fill="rgb(245,203,43)" fg:x="177014" fg:w="28"/><text x="63.7893%" y="367.50"></text></g><g><title>[libc-2.31.so] (45 samples, 0.02%)</title><rect x="63.5357%" y="453" width="0.0162%" height="15" fill="rgb(238,205,33)" fg:x="177004" fg:w="45"/><text x="63.7857%" y="463.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_allocate_buckets (46 samples, 0.02%)</title><rect x="63.5357%" y="485" width="0.0165%" height="15" fill="rgb(231,56,7)" fg:x="177004" fg:w="46"/><text x="63.7857%" y="495.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::_M_allocate_buckets (46 samples, 0.02%)</title><rect x="63.5357%" y="469" width="0.0165%" height="15" fill="rgb(244,186,29)" fg:x="177004" fg:w="46"/><text x="63.7857%" y="479.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique_node (568 samples, 0.20%)</title><rect x="63.3698%" y="533" width="0.2039%" height="15" fill="rgb(234,111,31)" fg:x="176542" fg:w="568"/><text x="63.6198%" y="543.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash (498 samples, 0.18%)</title><rect x="63.3950%" y="517" width="0.1788%" height="15" fill="rgb(241,149,10)" fg:x="176612" fg:w="498"/><text x="63.6450%" y="527.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash_aux (498 samples, 0.18%)</title><rect x="63.3950%" y="501" width="0.1788%" height="15" fill="rgb(249,206,44)" fg:x="176612" fg:w="498"/><text x="63.6450%" y="511.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;long, long, std::__detail::_Identity, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (59 samples, 0.02%)</title><rect x="63.5525%" y="485" width="0.0212%" height="15" fill="rgb(251,153,30)" fg:x="177051" fg:w="59"/><text x="63.8025%" y="495.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (59 samples, 0.02%)</title><rect x="63.5525%" y="469" width="0.0212%" height="15" fill="rgb(239,152,38)" fg:x="177051" fg:w="59"/><text x="63.8025%" y="479.50"></text></g><g><title>do_mprotect_pkey (44 samples, 0.02%)</title><rect x="63.6746%" y="341" width="0.0158%" height="15" fill="rgb(249,139,47)" fg:x="177391" fg:w="44"/><text x="63.9246%" y="351.50"></text></g><g><title>mprotect_fixup (41 samples, 0.01%)</title><rect x="63.6757%" y="325" width="0.0147%" height="15" fill="rgb(244,64,35)" fg:x="177394" fg:w="41"/><text x="63.9257%" y="335.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (54 samples, 0.02%)</title><rect x="63.6717%" y="389" width="0.0194%" height="15" fill="rgb(216,46,15)" fg:x="177383" fg:w="54"/><text x="63.9217%" y="399.50"></text></g><g><title>do_syscall_64 (54 samples, 0.02%)</title><rect x="63.6717%" y="373" width="0.0194%" height="15" fill="rgb(250,74,19)" fg:x="177383" fg:w="54"/><text x="63.9217%" y="383.50"></text></g><g><title>__x64_sys_mprotect (46 samples, 0.02%)</title><rect x="63.6746%" y="357" width="0.0165%" height="15" fill="rgb(249,42,33)" fg:x="177391" fg:w="46"/><text x="63.9246%" y="367.50"></text></g><g><title>__GI___mprotect (57 samples, 0.02%)</title><rect x="63.6717%" y="405" width="0.0205%" height="15" fill="rgb(242,149,17)" fg:x="177383" fg:w="57"/><text x="63.9217%" y="415.50"></text></g><g><title>std::unordered_set&lt;long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;long&gt; &gt;::insert (7,886 samples, 2.83%)</title><rect x="60.8726%" y="581" width="2.8307%" height="15" fill="rgb(244,29,21)" fg:x="169585" fg:w="7886"/><text x="61.1226%" y="591.50">st..</text></g><g><title>std::__detail::_Insert_base&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::insert (7,886 samples, 2.83%)</title><rect x="60.8726%" y="565" width="2.8307%" height="15" fill="rgb(220,130,37)" fg:x="169585" fg:w="7886"/><text x="61.1226%" y="575.50">st..</text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;long const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt; &gt; (7,885 samples, 2.83%)</title><rect x="60.8730%" y="549" width="2.8303%" height="15" fill="rgb(211,67,2)" fg:x="169586" fg:w="7885"/><text x="61.1230%" y="559.50">st..</text></g><g><title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::operator (361 samples, 0.13%)</title><rect x="63.5737%" y="533" width="0.1296%" height="15" fill="rgb(235,68,52)" fg:x="177110" fg:w="361"/><text x="63.8237%" y="543.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::_M_allocate_node&lt;long const&amp;&gt; (361 samples, 0.13%)</title><rect x="63.5737%" y="517" width="0.1296%" height="15" fill="rgb(246,142,3)" fg:x="177110" fg:w="361"/><text x="63.8237%" y="527.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::allocate (359 samples, 0.13%)</title><rect x="63.5744%" y="501" width="0.1289%" height="15" fill="rgb(241,25,7)" fg:x="177112" fg:w="359"/><text x="63.8244%" y="511.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt;::allocate (359 samples, 0.13%)</title><rect x="63.5744%" y="485" width="0.1289%" height="15" fill="rgb(242,119,39)" fg:x="177112" fg:w="359"/><text x="63.8244%" y="495.50"></text></g><g><title>operator new (335 samples, 0.12%)</title><rect x="63.5830%" y="469" width="0.1202%" height="15" fill="rgb(241,98,45)" fg:x="177136" fg:w="335"/><text x="63.8330%" y="479.50"></text></g><g><title>__GI___libc_malloc (315 samples, 0.11%)</title><rect x="63.5902%" y="453" width="0.1131%" height="15" fill="rgb(254,28,30)" fg:x="177156" fg:w="315"/><text x="63.8402%" y="463.50"></text></g><g><title>_int_malloc (213 samples, 0.08%)</title><rect x="63.6268%" y="437" width="0.0765%" height="15" fill="rgb(241,142,54)" fg:x="177258" fg:w="213"/><text x="63.8768%" y="447.50"></text></g><g><title>sysmalloc (92 samples, 0.03%)</title><rect x="63.6703%" y="421" width="0.0330%" height="15" fill="rgb(222,85,15)" fg:x="177379" fg:w="92"/><text x="63.9203%" y="431.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (31 samples, 0.01%)</title><rect x="63.7169%" y="581" width="0.0111%" height="15" fill="rgb(210,85,47)" fg:x="177509" fg:w="31"/><text x="63.9669%" y="591.50"></text></g><g><title>exchangeVertexReqs (26,292 samples, 9.44%)</title><rect x="54.2909%" y="597" width="9.4375%" height="15" fill="rgb(224,206,25)" fg:x="151249" fg:w="26292"/><text x="54.5409%" y="607.50">exchangeVerte..</text></g><g><title>fillRemoteCommunities (427 samples, 0.15%)</title><rect x="63.7284%" y="597" width="0.1533%" height="15" fill="rgb(243,201,19)" fg:x="177541" fg:w="427"/><text x="63.9784%" y="607.50"></text></g><g><title>omp_get_num_procs (435 samples, 0.16%)</title><rect x="63.8817%" y="597" width="0.1561%" height="15" fill="rgb(236,59,4)" fg:x="177968" fg:w="435"/><text x="64.1317%" y="607.50"></text></g><g><title>omp_is_initial_device (226 samples, 0.08%)</title><rect x="64.0576%" y="581" width="0.0811%" height="15" fill="rgb(254,179,45)" fg:x="178458" fg:w="226"/><text x="64.3076%" y="591.50"></text></g><g><title>__GI___clone (174,302 samples, 62.57%)</title><rect x="1.5740%" y="645" width="62.5658%" height="15" fill="rgb(226,14,10)" fg:x="4385" fg:w="174302"/><text x="1.8240%" y="655.50">__GI___clone</text></g><g><title>start_thread (174,302 samples, 62.57%)</title><rect x="1.5740%" y="629" width="62.5658%" height="15" fill="rgb(244,27,41)" fg:x="4385" fg:w="174302"/><text x="1.8240%" y="639.50">start_thread</text></g><g><title>omp_in_final (174,302 samples, 62.57%)</title><rect x="1.5740%" y="613" width="62.5658%" height="15" fill="rgb(235,35,32)" fg:x="4385" fg:w="174302"/><text x="1.8240%" y="623.50">omp_in_final</text></g><g><title>updateRemoteCommunities (284 samples, 0.10%)</title><rect x="64.0378%" y="597" width="0.1019%" height="15" fill="rgb(218,68,31)" fg:x="178403" fg:w="284"/><text x="64.2878%" y="607.50"></text></g><g><title>_IO_file_xsgetn (80 samples, 0.03%)</title><rect x="64.1667%" y="533" width="0.0287%" height="15" fill="rgb(207,120,37)" fg:x="178762" fg:w="80"/><text x="64.4167%" y="543.50"></text></g><g><title>BinaryEdgeList::read_balanced (150 samples, 0.05%)</title><rect x="64.1462%" y="565" width="0.0538%" height="15" fill="rgb(227,98,0)" fg:x="178705" fg:w="150"/><text x="64.3962%" y="575.50"></text></g><g><title>__GI__IO_fread (147 samples, 0.05%)</title><rect x="64.1473%" y="549" width="0.0528%" height="15" fill="rgb(207,7,3)" fg:x="178708" fg:w="147"/><text x="64.3973%" y="559.50"></text></g><g><title>BinaryEdgeList::read_balanced (170 samples, 0.06%)</title><rect x="64.1416%" y="597" width="0.0610%" height="15" fill="rgb(206,98,19)" fg:x="178692" fg:w="170"/><text x="64.3916%" y="607.50"></text></g><g><title>BinaryEdgeList::find_balanced_num_edges (170 samples, 0.06%)</title><rect x="64.1416%" y="581" width="0.0610%" height="15" fill="rgb(217,5,26)" fg:x="178692" fg:w="170"/><text x="64.3916%" y="591.50"></text></g><g><title>_start (176 samples, 0.06%)</title><rect x="64.1416%" y="645" width="0.0632%" height="15" fill="rgb(235,190,38)" fg:x="178692" fg:w="176"/><text x="64.3916%" y="655.50"></text></g><g><title>__libc_start_main (176 samples, 0.06%)</title><rect x="64.1416%" y="629" width="0.0632%" height="15" fill="rgb(247,86,24)" fg:x="178692" fg:w="176"/><text x="64.3916%" y="639.50"></text></g><g><title>main (176 samples, 0.06%)</title><rect x="64.1416%" y="613" width="0.0632%" height="15" fill="rgb(205,101,16)" fg:x="178692" fg:w="176"/><text x="64.3916%" y="623.50"></text></g><g><title>apic_timer_interrupt (113 samples, 0.04%)</title><rect x="64.2047%" y="645" width="0.0406%" height="15" fill="rgb(246,168,33)" fg:x="178868" fg:w="113"/><text x="64.4547%" y="655.50"></text></g><g><title>entry_SYSCALL_64 (708 samples, 0.25%)</title><rect x="64.2460%" y="645" width="0.2541%" height="15" fill="rgb(231,114,1)" fg:x="178983" fg:w="708"/><text x="64.4960%" y="655.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (230 samples, 0.08%)</title><rect x="64.5002%" y="645" width="0.0826%" height="15" fill="rgb(207,184,53)" fg:x="179691" fg:w="230"/><text x="64.7502%" y="655.50"></text></g><g><title>_IO_file_xsgetn (65 samples, 0.02%)</title><rect x="64.6061%" y="565" width="0.0233%" height="15" fill="rgb(224,95,51)" fg:x="179986" fg:w="65"/><text x="64.8561%" y="575.50"></text></g><g><title>BinaryEdgeList::read_balanced (127 samples, 0.05%)</title><rect x="64.5885%" y="597" width="0.0456%" height="15" fill="rgb(212,188,45)" fg:x="179937" fg:w="127"/><text x="64.8385%" y="607.50"></text></g><g><title>__GI__IO_fread (126 samples, 0.05%)</title><rect x="64.5888%" y="581" width="0.0452%" height="15" fill="rgb(223,154,38)" fg:x="179938" fg:w="126"/><text x="64.8388%" y="591.50"></text></g><g><title>BinaryEdgeList::find_balanced_num_edges (136 samples, 0.05%)</title><rect x="64.5856%" y="613" width="0.0488%" height="15" fill="rgb(251,22,52)" fg:x="179929" fg:w="136"/><text x="64.8356%" y="623.50"></text></g><g><title>clear_page_erms (86 samples, 0.03%)</title><rect x="64.6610%" y="325" width="0.0309%" height="15" fill="rgb(229,209,22)" fg:x="180139" fg:w="86"/><text x="64.9110%" y="335.50"></text></g><g><title>get_page_from_freelist (97 samples, 0.03%)</title><rect x="64.6606%" y="341" width="0.0348%" height="15" fill="rgb(234,138,34)" fg:x="180138" fg:w="97"/><text x="64.9106%" y="351.50"></text></g><g><title>__alloc_pages_nodemask (99 samples, 0.04%)</title><rect x="64.6603%" y="357" width="0.0355%" height="15" fill="rgb(212,95,11)" fg:x="180137" fg:w="99"/><text x="64.9103%" y="367.50"></text></g><g><title>alloc_pages_vma (100 samples, 0.04%)</title><rect x="64.6603%" y="373" width="0.0359%" height="15" fill="rgb(240,179,47)" fg:x="180137" fg:w="100"/><text x="64.9103%" y="383.50"></text></g><g><title>mem_cgroup_try_charge_delay (45 samples, 0.02%)</title><rect x="64.7026%" y="373" width="0.0162%" height="15" fill="rgb(240,163,11)" fg:x="180255" fg:w="45"/><text x="64.9526%" y="383.50"></text></g><g><title>do_anonymous_page (172 samples, 0.06%)</title><rect x="64.6585%" y="389" width="0.0617%" height="15" fill="rgb(236,37,12)" fg:x="180132" fg:w="172"/><text x="64.9085%" y="399.50"></text></g><g><title>__do_page_fault (189 samples, 0.07%)</title><rect x="64.6531%" y="453" width="0.0678%" height="15" fill="rgb(232,164,16)" fg:x="180117" fg:w="189"/><text x="64.9031%" y="463.50"></text></g><g><title>do_user_addr_fault (189 samples, 0.07%)</title><rect x="64.6531%" y="437" width="0.0678%" height="15" fill="rgb(244,205,15)" fg:x="180117" fg:w="189"/><text x="64.9031%" y="447.50"></text></g><g><title>handle_mm_fault (179 samples, 0.06%)</title><rect x="64.6567%" y="421" width="0.0643%" height="15" fill="rgb(223,117,47)" fg:x="180127" fg:w="179"/><text x="64.9067%" y="431.50"></text></g><g><title>__handle_mm_fault (176 samples, 0.06%)</title><rect x="64.6577%" y="405" width="0.0632%" height="15" fill="rgb(244,107,35)" fg:x="180130" fg:w="176"/><text x="64.9077%" y="415.50"></text></g><g><title>page_fault (190 samples, 0.07%)</title><rect x="64.6531%" y="485" width="0.0682%" height="15" fill="rgb(205,140,8)" fg:x="180117" fg:w="190"/><text x="64.9031%" y="495.50"></text></g><g><title>do_page_fault (190 samples, 0.07%)</title><rect x="64.6531%" y="469" width="0.0682%" height="15" fill="rgb(228,84,46)" fg:x="180117" fg:w="190"/><text x="64.9031%" y="479.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (34 samples, 0.01%)</title><rect x="64.7213%" y="485" width="0.0122%" height="15" fill="rgb(254,188,9)" fg:x="180307" fg:w="34"/><text x="64.9713%" y="495.50"></text></g><g><title>Graph::set_nedges (276 samples, 0.10%)</title><rect x="64.6348%" y="613" width="0.0991%" height="15" fill="rgb(206,112,54)" fg:x="180066" fg:w="276"/><text x="64.8848%" y="623.50"></text></g><g><title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::resize (276 samples, 0.10%)</title><rect x="64.6348%" y="597" width="0.0991%" height="15" fill="rgb(216,84,49)" fg:x="180066" fg:w="276"/><text x="64.8848%" y="607.50"></text></g><g><title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::_M_default_append (276 samples, 0.10%)</title><rect x="64.6348%" y="581" width="0.0991%" height="15" fill="rgb(214,194,35)" fg:x="180066" fg:w="276"/><text x="64.8848%" y="591.50"></text></g><g><title>std::__uninitialized_default_n_a&lt;Edge*, unsigned long, Edge&gt; (276 samples, 0.10%)</title><rect x="64.6348%" y="565" width="0.0991%" height="15" fill="rgb(249,28,3)" fg:x="180066" fg:w="276"/><text x="64.8848%" y="575.50"></text></g><g><title>std::__uninitialized_default_n&lt;Edge*, unsigned long&gt; (276 samples, 0.10%)</title><rect x="64.6348%" y="549" width="0.0991%" height="15" fill="rgb(222,56,52)" fg:x="180066" fg:w="276"/><text x="64.8848%" y="559.50"></text></g><g><title>std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;Edge*, unsigned long&gt; (276 samples, 0.10%)</title><rect x="64.6348%" y="533" width="0.0991%" height="15" fill="rgb(245,217,50)" fg:x="180066" fg:w="276"/><text x="64.8848%" y="543.50"></text></g><g><title>std::_Construct&lt;Edge&gt; (275 samples, 0.10%)</title><rect x="64.6351%" y="517" width="0.0987%" height="15" fill="rgb(213,201,24)" fg:x="180067" fg:w="275"/><text x="64.8851%" y="527.50"></text></g><g><title>Edge::Edge (275 samples, 0.10%)</title><rect x="64.6351%" y="501" width="0.0987%" height="15" fill="rgb(248,116,28)" fg:x="180067" fg:w="275"/><text x="64.8851%" y="511.50"></text></g><g><title>copy_user_enhanced_fast_string (122 samples, 0.04%)</title><rect x="64.7565%" y="341" width="0.0438%" height="15" fill="rgb(219,72,43)" fg:x="180405" fg:w="122"/><text x="65.0065%" y="351.50"></text></g><g><title>copy_page_to_iter (136 samples, 0.05%)</title><rect x="64.7561%" y="357" width="0.0488%" height="15" fill="rgb(209,138,14)" fg:x="180404" fg:w="136"/><text x="65.0061%" y="367.50"></text></g><g><title>MPI_File_read_at (174 samples, 0.06%)</title><rect x="64.7439%" y="613" width="0.0625%" height="15" fill="rgb(222,18,33)" fg:x="180370" fg:w="174"/><text x="64.9939%" y="623.50"></text></g><g><title>mca_io_ompio_file_read_at (174 samples, 0.06%)</title><rect x="64.7439%" y="597" width="0.0625%" height="15" fill="rgb(213,199,7)" fg:x="180370" fg:w="174"/><text x="64.9939%" y="607.50"></text></g><g><title>mca_common_ompio_file_read_at (174 samples, 0.06%)</title><rect x="64.7439%" y="581" width="0.0625%" height="15" fill="rgb(250,110,10)" fg:x="180370" fg:w="174"/><text x="64.9939%" y="591.50"></text></g><g><title>mca_common_ompio_file_read (174 samples, 0.06%)</title><rect x="64.7439%" y="565" width="0.0625%" height="15" fill="rgb(248,123,6)" fg:x="180370" fg:w="174"/><text x="64.9939%" y="575.50"></text></g><g><title>mca_fbtl_posix_preadv (174 samples, 0.06%)</title><rect x="64.7439%" y="549" width="0.0625%" height="15" fill="rgb(206,91,31)" fg:x="180370" fg:w="174"/><text x="64.9939%" y="559.50"></text></g><g><title>__GI___pread (174 samples, 0.06%)</title><rect x="64.7439%" y="533" width="0.0625%" height="15" fill="rgb(211,154,13)" fg:x="180370" fg:w="174"/><text x="64.9939%" y="543.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (174 samples, 0.06%)</title><rect x="64.7439%" y="517" width="0.0625%" height="15" fill="rgb(225,148,7)" fg:x="180370" fg:w="174"/><text x="64.9939%" y="527.50"></text></g><g><title>do_syscall_64 (174 samples, 0.06%)</title><rect x="64.7439%" y="501" width="0.0625%" height="15" fill="rgb(220,160,43)" fg:x="180370" fg:w="174"/><text x="64.9939%" y="511.50"></text></g><g><title>__x64_sys_pread64 (174 samples, 0.06%)</title><rect x="64.7439%" y="485" width="0.0625%" height="15" fill="rgb(213,52,39)" fg:x="180370" fg:w="174"/><text x="64.9939%" y="495.50"></text></g><g><title>ksys_pread64 (174 samples, 0.06%)</title><rect x="64.7439%" y="469" width="0.0625%" height="15" fill="rgb(243,137,7)" fg:x="180370" fg:w="174"/><text x="64.9939%" y="479.50"></text></g><g><title>vfs_read (174 samples, 0.06%)</title><rect x="64.7439%" y="453" width="0.0625%" height="15" fill="rgb(230,79,13)" fg:x="180370" fg:w="174"/><text x="64.9939%" y="463.50"></text></g><g><title>__vfs_read (174 samples, 0.06%)</title><rect x="64.7439%" y="437" width="0.0625%" height="15" fill="rgb(247,105,23)" fg:x="180370" fg:w="174"/><text x="64.9939%" y="447.50"></text></g><g><title>new_sync_read (174 samples, 0.06%)</title><rect x="64.7439%" y="421" width="0.0625%" height="15" fill="rgb(223,179,41)" fg:x="180370" fg:w="174"/><text x="64.9939%" y="431.50"></text></g><g><title>nfs_file_read (174 samples, 0.06%)</title><rect x="64.7439%" y="405" width="0.0625%" height="15" fill="rgb(218,9,34)" fg:x="180370" fg:w="174"/><text x="64.9939%" y="415.50"></text></g><g><title>generic_file_read_iter (174 samples, 0.06%)</title><rect x="64.7439%" y="389" width="0.0625%" height="15" fill="rgb(222,106,8)" fg:x="180370" fg:w="174"/><text x="64.9939%" y="399.50"></text></g><g><title>generic_file_buffered_read (174 samples, 0.06%)</title><rect x="64.7439%" y="373" width="0.0625%" height="15" fill="rgb(211,220,0)" fg:x="180370" fg:w="174"/><text x="64.9939%" y="383.50"></text></g><g><title>BinaryEdgeList::read_balanced (633 samples, 0.23%)</title><rect x="64.5856%" y="629" width="0.2272%" height="15" fill="rgb(229,52,16)" fg:x="179929" fg:w="633"/><text x="64.8356%" y="639.50"></text></g><g><title>absl::container_internal::Allocate&lt;8ul, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt; (42 samples, 0.02%)</title><rect x="64.8631%" y="501" width="0.0151%" height="15" fill="rgb(212,155,18)" fg:x="180702" fg:w="42"/><text x="65.1131%" y="511.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;absl::container_internal::AlignedType&lt;8ul&gt; &gt; &gt;::allocate (42 samples, 0.02%)</title><rect x="64.8631%" y="485" width="0.0151%" height="15" fill="rgb(242,21,14)" fg:x="180702" fg:w="42"/><text x="65.1131%" y="495.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;absl::container_internal::AlignedType&lt;8ul&gt; &gt;::allocate (42 samples, 0.02%)</title><rect x="64.8631%" y="469" width="0.0151%" height="15" fill="rgb(222,19,48)" fg:x="180702" fg:w="42"/><text x="65.1131%" y="479.50"></text></g><g><title>operator new (41 samples, 0.01%)</title><rect x="64.8634%" y="453" width="0.0147%" height="15" fill="rgb(232,45,27)" fg:x="180703" fg:w="41"/><text x="65.1134%" y="463.50"></text></g><g><title>__GI___libc_malloc (40 samples, 0.01%)</title><rect x="64.8638%" y="437" width="0.0144%" height="15" fill="rgb(249,103,42)" fg:x="180704" fg:w="40"/><text x="65.1138%" y="447.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::reserve (48 samples, 0.02%)</title><rect x="64.8620%" y="565" width="0.0172%" height="15" fill="rgb(246,81,33)" fg:x="180699" fg:w="48"/><text x="65.1120%" y="575.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::reserve (48 samples, 0.02%)</title><rect x="64.8620%" y="549" width="0.0172%" height="15" fill="rgb(252,33,42)" fg:x="180699" fg:w="48"/><text x="65.1120%" y="559.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::resize (45 samples, 0.02%)</title><rect x="64.8631%" y="533" width="0.0162%" height="15" fill="rgb(209,212,41)" fg:x="180702" fg:w="45"/><text x="65.1131%" y="543.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::initialize_slots (45 samples, 0.02%)</title><rect x="64.8631%" y="517" width="0.0162%" height="15" fill="rgb(207,154,6)" fg:x="180702" fg:w="45"/><text x="65.1131%" y="527.50"></text></g><g><title>absl::flat_hash_map&lt;long, double, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::~flat_hash_map (30 samples, 0.01%)</title><rect x="64.8796%" y="565" width="0.0108%" height="15" fill="rgb(223,64,47)" fg:x="180748" fg:w="30"/><text x="65.1296%" y="575.50"></text></g><g><title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::~raw_hash_map (30 samples, 0.01%)</title><rect x="64.8796%" y="549" width="0.0108%" height="15" fill="rgb(211,161,38)" fg:x="180748" fg:w="30"/><text x="65.1296%" y="559.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::~raw_hash_set (30 samples, 0.01%)</title><rect x="64.8796%" y="533" width="0.0108%" height="15" fill="rgb(219,138,40)" fg:x="180748" fg:w="30"/><text x="65.1296%" y="543.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::destroy_slots (30 samples, 0.01%)</title><rect x="64.8796%" y="517" width="0.0108%" height="15" fill="rgb(241,228,46)" fg:x="180748" fg:w="30"/><text x="65.1296%" y="527.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::destroy_slots (30 samples, 0.01%)</title><rect x="64.8796%" y="501" width="0.0108%" height="15" fill="rgb(223,209,38)" fg:x="180748" fg:w="30"/><text x="65.1296%" y="511.50"></text></g><g><title>absl::container_internal::Deallocate&lt;8ul, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt; (30 samples, 0.01%)</title><rect x="64.8796%" y="485" width="0.0108%" height="15" fill="rgb(236,164,45)" fg:x="180748" fg:w="30"/><text x="65.1296%" y="495.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;absl::container_internal::AlignedType&lt;8ul&gt; &gt; &gt;::deallocate (30 samples, 0.01%)</title><rect x="64.8796%" y="469" width="0.0108%" height="15" fill="rgb(231,15,5)" fg:x="180748" fg:w="30"/><text x="65.1296%" y="479.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;absl::container_internal::AlignedType&lt;8ul&gt; &gt;::deallocate (30 samples, 0.01%)</title><rect x="64.8796%" y="453" width="0.0108%" height="15" fill="rgb(252,35,15)" fg:x="180748" fg:w="30"/><text x="65.1296%" y="463.50"></text></g><g><title>Graph::get_edge (44 samples, 0.02%)</title><rect x="65.4087%" y="549" width="0.0158%" height="15" fill="rgb(248,181,18)" fg:x="182222" fg:w="44"/><text x="65.6587%" y="559.50"></text></g><g><title>std::vector&lt;Edge, std::allocator&lt;Edge&gt; &gt;::operator[] (44 samples, 0.02%)</title><rect x="65.4087%" y="533" width="0.0158%" height="15" fill="rgb(233,39,42)" fg:x="182222" fg:w="44"/><text x="65.6587%" y="543.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::emplace_at&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;long const&amp;&gt;, std::tuple&lt;&gt; &gt; (58 samples, 0.02%)</title><rect x="65.4245%" y="501" width="0.0208%" height="15" fill="rgb(238,110,33)" fg:x="182266" fg:w="58"/><text x="65.6745%" y="511.50"></text></g><g><title>absl::container_internal::common_policy_traits&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, void&gt;::construct&lt;std::allocator&lt;std::pair&lt;long const, double&gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;long const&amp;&gt;, std::tuple&lt;&gt; &gt; (35 samples, 0.01%)</title><rect x="65.4327%" y="485" width="0.0126%" height="15" fill="rgb(233,195,10)" fg:x="182289" fg:w="35"/><text x="65.6827%" y="495.50"></text></g><g><title>absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;::construct&lt;std::allocator&lt;std::pair&lt;long const, double&gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;long const&amp;&gt;, std::tuple&lt;&gt; &gt; (35 samples, 0.01%)</title><rect x="65.4327%" y="469" width="0.0126%" height="15" fill="rgb(254,105,3)" fg:x="182289" fg:w="35"/><text x="65.6827%" y="479.50"></text></g><g><title>absl::container_internal::map_slot_policy&lt;long, double&gt;::construct&lt;std::allocator&lt;std::pair&lt;long const, double&gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;long const&amp;&gt;, std::tuple&lt;&gt; &gt; (35 samples, 0.01%)</title><rect x="65.4327%" y="453" width="0.0126%" height="15" fill="rgb(221,225,9)" fg:x="182289" fg:w="35"/><text x="65.6827%" y="463.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::construct&lt;std::pair&lt;long, double&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;long const&amp;&gt;, std::tuple&lt;&gt; &gt; (35 samples, 0.01%)</title><rect x="65.4327%" y="437" width="0.0126%" height="15" fill="rgb(224,227,45)" fg:x="182289" fg:w="35"/><text x="65.6827%" y="447.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::pair&lt;long const, double&gt; &gt;::construct&lt;std::pair&lt;long, double&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;long const&amp;&gt;, std::tuple&lt;&gt; &gt; (35 samples, 0.01%)</title><rect x="65.4327%" y="421" width="0.0126%" height="15" fill="rgb(229,198,43)" fg:x="182289" fg:w="35"/><text x="65.6827%" y="431.50"></text></g><g><title>std::pair&lt;long, double&gt;::pair&lt;long const&amp;&gt; (35 samples, 0.01%)</title><rect x="65.4327%" y="405" width="0.0126%" height="15" fill="rgb(206,209,35)" fg:x="182289" fg:w="35"/><text x="65.6827%" y="415.50"></text></g><g><title>std::pair&lt;long, double&gt;::pair&lt;long const&amp;, 0ul&gt; (35 samples, 0.01%)</title><rect x="65.4327%" y="389" width="0.0126%" height="15" fill="rgb(245,195,53)" fg:x="182289" fg:w="35"/><text x="65.6827%" y="399.50"></text></g><g><title>absl::container_internal::BitMask&lt;unsigned int, 16, 0&gt;::operator* (111 samples, 0.04%)</title><rect x="65.5368%" y="485" width="0.0398%" height="15" fill="rgb(240,92,26)" fg:x="182579" fg:w="111"/><text x="65.7868%" y="495.50"></text></g><g><title>absl::container_internal::NonIterableBitMask&lt;unsigned int, 16, 0&gt;::LowestBitSet (111 samples, 0.04%)</title><rect x="65.5368%" y="469" width="0.0398%" height="15" fill="rgb(207,40,23)" fg:x="182579" fg:w="111"/><text x="65.7868%" y="479.50"></text></g><g><title>absl::container_internal::TrailingZeros&lt;unsigned int&gt; (111 samples, 0.04%)</title><rect x="65.5368%" y="453" width="0.0398%" height="15" fill="rgb(223,111,35)" fg:x="182579" fg:w="111"/><text x="65.7868%" y="463.50"></text></g><g><title>absl::countr_zero&lt;unsigned int&gt; (111 samples, 0.04%)</title><rect x="65.5368%" y="437" width="0.0398%" height="15" fill="rgb(229,147,28)" fg:x="182579" fg:w="111"/><text x="65.7868%" y="447.50"></text></g><g><title>absl::numeric_internal::CountTrailingZeroes&lt;unsigned int&gt; (111 samples, 0.04%)</title><rect x="65.5368%" y="421" width="0.0398%" height="15" fill="rgb(211,29,28)" fg:x="182579" fg:w="111"/><text x="65.7868%" y="431.50"></text></g><g><title>absl::numeric_internal::CountTrailingZeroesNonzero32 (111 samples, 0.04%)</title><rect x="65.5368%" y="405" width="0.0398%" height="15" fill="rgb(228,72,33)" fg:x="182579" fg:w="111"/><text x="65.7868%" y="415.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::GroupSse2Impl (162 samples, 0.06%)</title><rect x="65.5767%" y="485" width="0.0581%" height="15" fill="rgb(205,214,31)" fg:x="182690" fg:w="162"/><text x="65.8267%" y="495.50"></text></g><g><title>_mm_loadu_si128 (162 samples, 0.06%)</title><rect x="65.5767%" y="469" width="0.0581%" height="15" fill="rgb(224,111,15)" fg:x="182690" fg:w="162"/><text x="65.8267%" y="479.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::MaskEmpty (52 samples, 0.02%)</title><rect x="65.6348%" y="485" width="0.0187%" height="15" fill="rgb(253,21,26)" fg:x="182852" fg:w="52"/><text x="65.8848%" y="495.50"></text></g><g><title>_mm_sign_epi8 (37 samples, 0.01%)</title><rect x="65.6402%" y="469" width="0.0133%" height="15" fill="rgb(245,139,43)" fg:x="182867" fg:w="37"/><text x="65.8902%" y="479.50"></text></g><g><title>_mm_cmpeq_epi8 (91 samples, 0.03%)</title><rect x="65.6535%" y="469" width="0.0327%" height="15" fill="rgb(252,170,7)" fg:x="182904" fg:w="91"/><text x="65.9035%" y="479.50"></text></g><g><title>_mm_movemask_epi8 (95 samples, 0.03%)</title><rect x="65.6861%" y="469" width="0.0341%" height="15" fill="rgb(231,118,14)" fg:x="182995" fg:w="95"/><text x="65.9361%" y="479.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::Match (216 samples, 0.08%)</title><rect x="65.6535%" y="485" width="0.0775%" height="15" fill="rgb(238,83,0)" fg:x="182904" fg:w="216"/><text x="65.9035%" y="495.50"></text></g><g><title>_mm_set1_epi8 (30 samples, 0.01%)</title><rect x="65.7202%" y="469" width="0.0108%" height="15" fill="rgb(221,39,39)" fg:x="183090" fg:w="30"/><text x="65.9702%" y="479.50"></text></g><g><title>_mm_set_epi8 (30 samples, 0.01%)</title><rect x="65.7202%" y="453" width="0.0108%" height="15" fill="rgb(222,119,46)" fg:x="183090" fg:w="30"/><text x="65.9702%" y="463.50"></text></g><g><title>absl::container_internal::H1 (56 samples, 0.02%)</title><rect x="65.7350%" y="469" width="0.0201%" height="15" fill="rgb(222,165,49)" fg:x="183131" fg:w="56"/><text x="65.9850%" y="479.50"></text></g><g><title>absl::container_internal::probe (84 samples, 0.03%)</title><rect x="65.7350%" y="485" width="0.0302%" height="15" fill="rgb(219,113,52)" fg:x="183131" fg:w="84"/><text x="65.9850%" y="495.50"></text></g><g><title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (28 samples, 0.01%)</title><rect x="65.7551%" y="469" width="0.0101%" height="15" fill="rgb(214,7,15)" fg:x="183187" fg:w="28"/><text x="66.0051%" y="479.50"></text></g><g><title>absl::container_internal::probe_seq&lt;16ul&gt;::offset (74 samples, 0.03%)</title><rect x="65.7651%" y="485" width="0.0266%" height="15" fill="rgb(235,32,4)" fg:x="183215" fg:w="74"/><text x="66.0151%" y="495.50"></text></g><g><title>absl::container_internal::IsEmpty (84 samples, 0.03%)</title><rect x="65.8268%" y="469" width="0.0302%" height="15" fill="rgb(238,90,54)" fg:x="183387" fg:w="84"/><text x="66.0768%" y="479.50"></text></g><g><title>absl::container_internal::H1 (38 samples, 0.01%)</title><rect x="65.8868%" y="437" width="0.0136%" height="15" fill="rgb(213,208,19)" fg:x="183554" fg:w="38"/><text x="66.1368%" y="447.50"></text></g><g><title>absl::container_internal::PerTableSalt (36 samples, 0.01%)</title><rect x="65.8875%" y="421" width="0.0129%" height="15" fill="rgb(233,156,4)" fg:x="183556" fg:w="36"/><text x="66.1375%" y="431.50"></text></g><g><title>absl::container_internal::probe (71 samples, 0.03%)</title><rect x="65.8868%" y="453" width="0.0255%" height="15" fill="rgb(207,194,5)" fg:x="183554" fg:w="71"/><text x="66.1368%" y="463.50"></text></g><g><title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (33 samples, 0.01%)</title><rect x="65.9004%" y="437" width="0.0118%" height="15" fill="rgb(206,111,30)" fg:x="183592" fg:w="33"/><text x="66.1504%" y="447.50"></text></g><g><title>absl::container_internal::find_first_non_full&lt;void&gt; (192 samples, 0.07%)</title><rect x="65.8609%" y="469" width="0.0689%" height="15" fill="rgb(243,70,54)" fg:x="183482" fg:w="192"/><text x="66.1109%" y="479.50"></text></g><g><title>absl::container_internal::probe_seq&lt;16ul&gt;::offset (49 samples, 0.02%)</title><rect x="65.9123%" y="453" width="0.0176%" height="15" fill="rgb(242,28,8)" fg:x="183625" fg:w="49"/><text x="66.1623%" y="463.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::prepare_insert (363 samples, 0.13%)</title><rect x="65.7999%" y="485" width="0.1303%" height="15" fill="rgb(219,106,18)" fg:x="183312" fg:w="363"/><text x="66.0499%" y="495.50"></text></g><g><title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::operator[]&lt;long, absl::container_internal::FlatHashMapPolicy&lt;long, double&gt; &gt; (1,535 samples, 0.55%)</title><rect x="65.4245%" y="549" width="0.5510%" height="15" fill="rgb(244,222,10)" fg:x="182266" fg:w="1535"/><text x="65.6745%" y="559.50"></text></g><g><title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::try_emplace&lt;long, , 0&gt; (1,535 samples, 0.55%)</title><rect x="65.4245%" y="533" width="0.5510%" height="15" fill="rgb(236,179,52)" fg:x="182266" fg:w="1535"/><text x="65.6745%" y="543.50"></text></g><g><title>absl::container_internal::raw_hash_map&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::try_emplace_impl&lt;long const&amp;&gt; (1,535 samples, 0.55%)</title><rect x="65.4245%" y="517" width="0.5510%" height="15" fill="rgb(213,23,39)" fg:x="182266" fg:w="1535"/><text x="65.6745%" y="527.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::find_or_prepare_insert&lt;long&gt; (1,477 samples, 0.53%)</title><rect x="65.4453%" y="501" width="0.5302%" height="15" fill="rgb(238,48,10)" fg:x="182324" fg:w="1477"/><text x="65.6953%" y="511.50"></text></g><g><title>absl::hash_internal::HashImpl&lt;long&gt;::operator (126 samples, 0.05%)</title><rect x="65.9302%" y="485" width="0.0452%" height="15" fill="rgb(251,196,23)" fg:x="183675" fg:w="126"/><text x="66.1802%" y="495.50"></text></g><g><title>absl::hash_internal::MixingHashState::hash&lt;long, 0&gt; (126 samples, 0.05%)</title><rect x="65.9302%" y="469" width="0.0452%" height="15" fill="rgb(250,152,24)" fg:x="183675" fg:w="126"/><text x="66.1802%" y="479.50"></text></g><g><title>absl::hash_internal::MixingHashState::Mix (126 samples, 0.05%)</title><rect x="65.9302%" y="453" width="0.0452%" height="15" fill="rgb(209,150,17)" fg:x="183675" fg:w="126"/><text x="66.1802%" y="463.50"></text></g><g><title>absl::container_internal::BitMask&lt;unsigned int, 16, 0&gt;::operator* (37 samples, 0.01%)</title><rect x="68.2508%" y="501" width="0.0133%" height="15" fill="rgb(234,202,34)" fg:x="190140" fg:w="37"/><text x="68.5008%" y="511.50"></text></g><g><title>absl::container_internal::NonIterableBitMask&lt;unsigned int, 16, 0&gt;::LowestBitSet (37 samples, 0.01%)</title><rect x="68.2508%" y="485" width="0.0133%" height="15" fill="rgb(253,148,53)" fg:x="190140" fg:w="37"/><text x="68.5008%" y="495.50"></text></g><g><title>absl::container_internal::TrailingZeros&lt;unsigned int&gt; (37 samples, 0.01%)</title><rect x="68.2508%" y="469" width="0.0133%" height="15" fill="rgb(218,129,16)" fg:x="190140" fg:w="37"/><text x="68.5008%" y="479.50"></text></g><g><title>absl::countr_zero&lt;unsigned int&gt; (37 samples, 0.01%)</title><rect x="68.2508%" y="453" width="0.0133%" height="15" fill="rgb(216,85,19)" fg:x="190140" fg:w="37"/><text x="68.5008%" y="463.50"></text></g><g><title>absl::numeric_internal::CountTrailingZeroes&lt;unsigned int&gt; (37 samples, 0.01%)</title><rect x="68.2508%" y="437" width="0.0133%" height="15" fill="rgb(235,228,7)" fg:x="190140" fg:w="37"/><text x="68.5008%" y="447.50"></text></g><g><title>absl::numeric_internal::CountTrailingZeroesNonzero32 (37 samples, 0.01%)</title><rect x="68.2508%" y="421" width="0.0133%" height="15" fill="rgb(245,175,0)" fg:x="190140" fg:w="37"/><text x="68.5008%" y="431.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::GroupSse2Impl (4,222 samples, 1.52%)</title><rect x="68.2641%" y="501" width="1.5155%" height="15" fill="rgb(208,168,36)" fg:x="190177" fg:w="4222"/><text x="68.5141%" y="511.50"></text></g><g><title>_mm_loadu_si128 (4,222 samples, 1.52%)</title><rect x="68.2641%" y="485" width="1.5155%" height="15" fill="rgb(246,171,24)" fg:x="190177" fg:w="4222"/><text x="68.5141%" y="495.50"></text></g><g><title>_mm_cmpeq_epi8 (31 samples, 0.01%)</title><rect x="69.7796%" y="485" width="0.0111%" height="15" fill="rgb(215,142,24)" fg:x="194399" fg:w="31"/><text x="70.0296%" y="495.50"></text></g><g><title>_mm_movemask_epi8 (54 samples, 0.02%)</title><rect x="69.7907%" y="485" width="0.0194%" height="15" fill="rgb(250,187,7)" fg:x="194430" fg:w="54"/><text x="70.0407%" y="495.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::Match (140 samples, 0.05%)</title><rect x="69.7796%" y="501" width="0.0503%" height="15" fill="rgb(228,66,33)" fg:x="194399" fg:w="140"/><text x="70.0296%" y="511.50"></text></g><g><title>_mm_set1_epi8 (55 samples, 0.02%)</title><rect x="69.8101%" y="485" width="0.0197%" height="15" fill="rgb(234,215,21)" fg:x="194484" fg:w="55"/><text x="70.0601%" y="495.50"></text></g><g><title>_mm_set_epi8 (55 samples, 0.02%)</title><rect x="69.8101%" y="469" width="0.0197%" height="15" fill="rgb(222,191,20)" fg:x="194484" fg:w="55"/><text x="70.0601%" y="479.50"></text></g><g><title>absl::container_internal::H1 (64 samples, 0.02%)</title><rect x="69.8302%" y="485" width="0.0230%" height="15" fill="rgb(245,79,54)" fg:x="194540" fg:w="64"/><text x="70.0802%" y="495.50"></text></g><g><title>absl::container_internal::probe (101 samples, 0.04%)</title><rect x="69.8302%" y="501" width="0.0363%" height="15" fill="rgb(240,10,37)" fg:x="194540" fg:w="101"/><text x="70.0802%" y="511.50"></text></g><g><title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (37 samples, 0.01%)</title><rect x="69.8532%" y="485" width="0.0133%" height="15" fill="rgb(214,192,32)" fg:x="194604" fg:w="37"/><text x="70.1032%" y="495.50"></text></g><g><title>absl::container_internal::probe_seq&lt;16ul&gt;::offset (34 samples, 0.01%)</title><rect x="69.8665%" y="501" width="0.0122%" height="15" fill="rgb(209,36,54)" fg:x="194641" fg:w="34"/><text x="70.1165%" y="511.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find&lt;long&gt; (10,882 samples, 3.91%)</title><rect x="65.9754%" y="533" width="3.9061%" height="15" fill="rgb(220,10,11)" fg:x="183801" fg:w="10882"/><text x="66.2254%" y="543.50">absl..</text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find&lt;long&gt; (10,882 samples, 3.91%)</title><rect x="65.9754%" y="517" width="3.9061%" height="15" fill="rgb(221,106,17)" fg:x="183801" fg:w="10882"/><text x="66.2254%" y="527.50">absl..</text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find&lt;long&gt; (11,023 samples, 3.96%)</title><rect x="65.9754%" y="549" width="3.9567%" height="15" fill="rgb(251,142,44)" fg:x="183801" fg:w="11023"/><text x="66.2254%" y="559.50">absl..</text></g><g><title>absl::hash_internal::HashImpl&lt;long&gt;::operator (140 samples, 0.05%)</title><rect x="69.8819%" y="533" width="0.0503%" height="15" fill="rgb(238,13,15)" fg:x="194684" fg:w="140"/><text x="70.1319%" y="543.50"></text></g><g><title>absl::hash_internal::MixingHashState::hash&lt;long, 0&gt; (140 samples, 0.05%)</title><rect x="69.8819%" y="517" width="0.0503%" height="15" fill="rgb(208,107,27)" fg:x="194684" fg:w="140"/><text x="70.1319%" y="527.50"></text></g><g><title>absl::hash_internal::MixingHashState::Mix (140 samples, 0.05%)</title><rect x="69.8819%" y="501" width="0.0503%" height="15" fill="rgb(205,136,37)" fg:x="194684" fg:w="140"/><text x="70.1319%" y="511.50"></text></g><g><title>page_fault (42 samples, 0.02%)</title><rect x="69.9365%" y="549" width="0.0151%" height="15" fill="rgb(250,205,27)" fg:x="194836" fg:w="42"/><text x="70.1865%" y="559.50"></text></g><g><title>do_page_fault (42 samples, 0.02%)</title><rect x="69.9365%" y="533" width="0.0151%" height="15" fill="rgb(210,80,43)" fg:x="194836" fg:w="42"/><text x="70.1865%" y="543.50"></text></g><g><title>__do_page_fault (42 samples, 0.02%)</title><rect x="69.9365%" y="517" width="0.0151%" height="15" fill="rgb(247,160,36)" fg:x="194836" fg:w="42"/><text x="70.1865%" y="527.50"></text></g><g><title>do_user_addr_fault (37 samples, 0.01%)</title><rect x="69.9383%" y="501" width="0.0133%" height="15" fill="rgb(234,13,49)" fg:x="194841" fg:w="37"/><text x="70.1883%" y="511.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (30 samples, 0.01%)</title><rect x="69.9515%" y="549" width="0.0108%" height="15" fill="rgb(234,122,0)" fg:x="194878" fg:w="30"/><text x="70.2015%" y="559.50"></text></g><g><title>distBuildLocalMapCounter (14,132 samples, 5.07%)</title><rect x="64.8903%" y="565" width="5.0727%" height="15" fill="rgb(207,146,38)" fg:x="180778" fg:w="14132"/><text x="65.1403%" y="575.50">distBu..</text></g><g><title>absl::container_internal::GroupSse2Impl::GroupSse2Impl (216 samples, 0.08%)</title><rect x="70.4889%" y="501" width="0.0775%" height="15" fill="rgb(207,177,25)" fg:x="196375" fg:w="216"/><text x="70.7389%" y="511.50"></text></g><g><title>_mm_loadu_si128 (216 samples, 0.08%)</title><rect x="70.4889%" y="485" width="0.0775%" height="15" fill="rgb(211,178,42)" fg:x="196375" fg:w="216"/><text x="70.7389%" y="495.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::Match (37 samples, 0.01%)</title><rect x="70.5664%" y="501" width="0.0133%" height="15" fill="rgb(230,69,54)" fg:x="196591" fg:w="37"/><text x="70.8164%" y="511.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::find&lt;long&gt; (1,311 samples, 0.47%)</title><rect x="70.1195%" y="533" width="0.4706%" height="15" fill="rgb(214,135,41)" fg:x="195346" fg:w="1311"/><text x="70.3695%" y="543.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::find&lt;long&gt; (1,311 samples, 0.47%)</title><rect x="70.1195%" y="517" width="0.4706%" height="15" fill="rgb(237,67,25)" fg:x="195346" fg:w="1311"/><text x="70.3695%" y="527.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::find&lt;long&gt; (1,354 samples, 0.49%)</title><rect x="70.1152%" y="549" width="0.4860%" height="15" fill="rgb(222,189,50)" fg:x="195334" fg:w="1354"/><text x="70.3652%" y="559.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::const_iterator::operator++ (148 samples, 0.05%)</title><rect x="70.6027%" y="549" width="0.0531%" height="15" fill="rgb(245,148,34)" fg:x="196692" fg:w="148"/><text x="70.8527%" y="559.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::iterator::operator++ (148 samples, 0.05%)</title><rect x="70.6027%" y="533" width="0.0531%" height="15" fill="rgb(222,29,6)" fg:x="196692" fg:w="148"/><text x="70.8527%" y="543.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, double&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, double&gt; &gt; &gt;::iterator::skip_empty_or_deleted (146 samples, 0.05%)</title><rect x="70.6034%" y="517" width="0.0524%" height="15" fill="rgb(221,189,43)" fg:x="196694" fg:w="146"/><text x="70.8534%" y="527.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::CountLeadingEmptyOrDeleted (30 samples, 0.01%)</title><rect x="70.6450%" y="501" width="0.0108%" height="15" fill="rgb(207,36,27)" fg:x="196810" fg:w="30"/><text x="70.8950%" y="511.50"></text></g><g><title>distGetMaxIndex (1,935 samples, 0.69%)</title><rect x="69.9630%" y="565" width="0.6946%" height="15" fill="rgb(217,90,24)" fg:x="194910" fg:w="1935"/><text x="70.2130%" y="575.50"></text></g><g><title>distExecuteLouvainIteration (16,270 samples, 5.84%)</title><rect x="64.8300%" y="581" width="5.8401%" height="15" fill="rgb(224,66,35)" fg:x="180610" fg:w="16270"/><text x="65.0800%" y="591.50">distExe..</text></g><g><title>GOMP_parallel (16,285 samples, 5.85%)</title><rect x="64.8250%" y="613" width="5.8455%" height="15" fill="rgb(221,13,50)" fg:x="180596" fg:w="16285"/><text x="65.0750%" y="623.50">GOMP_pa..</text></g><g><title>distLouvainMethod (16,285 samples, 5.85%)</title><rect x="64.8250%" y="597" width="5.8455%" height="15" fill="rgb(236,68,49)" fg:x="180596" fg:w="16285"/><text x="65.0750%" y="607.50">distLou..</text></g><g><title>tcp_poll (37 samples, 0.01%)</title><rect x="70.7161%" y="325" width="0.0133%" height="15" fill="rgb(229,146,28)" fg:x="197008" fg:w="37"/><text x="70.9661%" y="335.50"></text></g><g><title>sock_poll (55 samples, 0.02%)</title><rect x="70.7114%" y="341" width="0.0197%" height="15" fill="rgb(225,31,38)" fg:x="196995" fg:w="55"/><text x="70.9614%" y="351.50"></text></g><g><title>do_sys_poll (106 samples, 0.04%)</title><rect x="70.6935%" y="357" width="0.0380%" height="15" fill="rgb(250,208,3)" fg:x="196945" fg:w="106"/><text x="70.9435%" y="367.50"></text></g><g><title>__x64_sys_poll (117 samples, 0.04%)</title><rect x="70.6913%" y="373" width="0.0420%" height="15" fill="rgb(246,54,23)" fg:x="196939" fg:w="117"/><text x="70.9413%" y="383.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (153 samples, 0.05%)</title><rect x="70.6795%" y="405" width="0.0549%" height="15" fill="rgb(243,76,11)" fg:x="196906" fg:w="153"/><text x="70.9295%" y="415.50"></text></g><g><title>do_syscall_64 (152 samples, 0.05%)</title><rect x="70.6799%" y="389" width="0.0546%" height="15" fill="rgb(245,21,50)" fg:x="196907" fg:w="152"/><text x="70.9299%" y="399.50"></text></g><g><title>__GI___poll (176 samples, 0.06%)</title><rect x="70.6752%" y="421" width="0.0632%" height="15" fill="rgb(228,9,43)" fg:x="196894" fg:w="176"/><text x="70.9252%" y="431.50"></text></g><g><title>distCalcConstantForSecondTerm (187 samples, 0.07%)</title><rect x="70.6720%" y="613" width="0.0671%" height="15" fill="rgb(208,100,47)" fg:x="196885" fg:w="187"/><text x="70.9220%" y="623.50"></text></g><g><title>MPI_Allreduce (187 samples, 0.07%)</title><rect x="70.6720%" y="597" width="0.0671%" height="15" fill="rgb(232,26,8)" fg:x="196885" fg:w="187"/><text x="70.9220%" y="607.50"></text></g><g><title>ompi_coll_tuned_allreduce_intra_dec_fixed (187 samples, 0.07%)</title><rect x="70.6720%" y="581" width="0.0671%" height="15" fill="rgb(216,166,38)" fg:x="196885" fg:w="187"/><text x="70.9220%" y="591.50"></text></g><g><title>ompi_coll_base_allreduce_intra_ring_segmented (187 samples, 0.07%)</title><rect x="70.6720%" y="565" width="0.0671%" height="15" fill="rgb(251,202,51)" fg:x="196885" fg:w="187"/><text x="70.9220%" y="575.50"></text></g><g><title>ompi_coll_base_allreduce_intra_ring (187 samples, 0.07%)</title><rect x="70.6720%" y="549" width="0.0671%" height="15" fill="rgb(254,216,34)" fg:x="196885" fg:w="187"/><text x="70.9220%" y="559.50"></text></g><g><title>ompi_coll_base_allreduce_intra_recursivedoubling (187 samples, 0.07%)</title><rect x="70.6720%" y="533" width="0.0671%" height="15" fill="rgb(251,32,27)" fg:x="196885" fg:w="187"/><text x="70.9220%" y="543.50"></text></g><g><title>mca_pml_ob1_recv (187 samples, 0.07%)</title><rect x="70.6720%" y="517" width="0.0671%" height="15" fill="rgb(208,127,28)" fg:x="196885" fg:w="187"/><text x="70.9220%" y="527.50"></text></g><g><title>ompi_sync_wait_mt (187 samples, 0.07%)</title><rect x="70.6720%" y="501" width="0.0671%" height="15" fill="rgb(224,137,22)" fg:x="196885" fg:w="187"/><text x="70.9220%" y="511.50"></text></g><g><title>opal_progress (187 samples, 0.07%)</title><rect x="70.6720%" y="485" width="0.0671%" height="15" fill="rgb(254,70,32)" fg:x="196885" fg:w="187"/><text x="70.9220%" y="495.50"></text></g><g><title>opal_progress_events (186 samples, 0.07%)</title><rect x="70.6723%" y="469" width="0.0668%" height="15" fill="rgb(229,75,37)" fg:x="196886" fg:w="186"/><text x="70.9223%" y="479.50"></text></g><g><title>event_base_loop (185 samples, 0.07%)</title><rect x="70.6727%" y="453" width="0.0664%" height="15" fill="rgb(252,64,23)" fg:x="196887" fg:w="185"/><text x="70.9227%" y="463.50"></text></g><g><title>event_strlcpy_ (180 samples, 0.06%)</title><rect x="70.6745%" y="437" width="0.0646%" height="15" fill="rgb(232,162,48)" fg:x="196892" fg:w="180"/><text x="70.9245%" y="447.50"></text></g><g><title>__fdget (48 samples, 0.02%)</title><rect x="70.8040%" y="341" width="0.0172%" height="15" fill="rgb(246,160,12)" fg:x="197253" fg:w="48"/><text x="71.0540%" y="351.50"></text></g><g><title>__fget_light (47 samples, 0.02%)</title><rect x="70.8044%" y="325" width="0.0169%" height="15" fill="rgb(247,166,0)" fg:x="197254" fg:w="47"/><text x="71.0544%" y="335.50"></text></g><g><title>tcp_poll (107 samples, 0.04%)</title><rect x="70.8464%" y="325" width="0.0384%" height="15" fill="rgb(249,219,21)" fg:x="197371" fg:w="107"/><text x="71.0964%" y="335.50"></text></g><g><title>sock_poll (152 samples, 0.05%)</title><rect x="70.8331%" y="341" width="0.0546%" height="15" fill="rgb(205,209,3)" fg:x="197334" fg:w="152"/><text x="71.0831%" y="351.50"></text></g><g><title>do_sys_poll (308 samples, 0.11%)</title><rect x="70.7814%" y="357" width="0.1106%" height="15" fill="rgb(243,44,1)" fg:x="197190" fg:w="308"/><text x="71.0314%" y="367.50"></text></g><g><title>__x64_sys_poll (343 samples, 0.12%)</title><rect x="70.7750%" y="373" width="0.1231%" height="15" fill="rgb(206,159,16)" fg:x="197172" fg:w="343"/><text x="71.0250%" y="383.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (397 samples, 0.14%)</title><rect x="70.7559%" y="405" width="0.1425%" height="15" fill="rgb(244,77,30)" fg:x="197119" fg:w="397"/><text x="71.0059%" y="415.50"></text></g><g><title>do_syscall_64 (395 samples, 0.14%)</title><rect x="70.7567%" y="389" width="0.1418%" height="15" fill="rgb(218,69,12)" fg:x="197121" fg:w="395"/><text x="71.0067%" y="399.50"></text></g><g><title>__GI___poll (443 samples, 0.16%)</title><rect x="70.7448%" y="421" width="0.1590%" height="15" fill="rgb(212,87,7)" fg:x="197088" fg:w="443"/><text x="70.9948%" y="431.50"></text></g><g><title>event_base_loop (460 samples, 0.17%)</title><rect x="70.7409%" y="453" width="0.1651%" height="15" fill="rgb(245,114,25)" fg:x="197077" fg:w="460"/><text x="70.9909%" y="463.50"></text></g><g><title>event_strlcpy_ (450 samples, 0.16%)</title><rect x="70.7445%" y="437" width="0.1615%" height="15" fill="rgb(210,61,42)" fg:x="197087" fg:w="450"/><text x="70.9945%" y="447.50"></text></g><g><title>MPI_Allreduce (465 samples, 0.17%)</title><rect x="70.7402%" y="597" width="0.1669%" height="15" fill="rgb(211,52,33)" fg:x="197075" fg:w="465"/><text x="70.9902%" y="607.50"></text></g><g><title>ompi_coll_tuned_allreduce_intra_dec_fixed (465 samples, 0.17%)</title><rect x="70.7402%" y="581" width="0.1669%" height="15" fill="rgb(234,58,33)" fg:x="197075" fg:w="465"/><text x="70.9902%" y="591.50"></text></g><g><title>ompi_coll_base_allreduce_intra_ring_segmented (465 samples, 0.17%)</title><rect x="70.7402%" y="565" width="0.1669%" height="15" fill="rgb(220,115,36)" fg:x="197075" fg:w="465"/><text x="70.9902%" y="575.50"></text></g><g><title>ompi_coll_base_allreduce_intra_ring (465 samples, 0.17%)</title><rect x="70.7402%" y="549" width="0.1669%" height="15" fill="rgb(243,153,54)" fg:x="197075" fg:w="465"/><text x="70.9902%" y="559.50"></text></g><g><title>ompi_coll_base_allreduce_intra_recursivedoubling (465 samples, 0.17%)</title><rect x="70.7402%" y="533" width="0.1669%" height="15" fill="rgb(251,47,18)" fg:x="197075" fg:w="465"/><text x="70.9902%" y="543.50"></text></g><g><title>mca_pml_ob1_recv (465 samples, 0.17%)</title><rect x="70.7402%" y="517" width="0.1669%" height="15" fill="rgb(242,102,42)" fg:x="197075" fg:w="465"/><text x="70.9902%" y="527.50"></text></g><g><title>ompi_sync_wait_mt (465 samples, 0.17%)</title><rect x="70.7402%" y="501" width="0.1669%" height="15" fill="rgb(234,31,38)" fg:x="197075" fg:w="465"/><text x="70.9902%" y="511.50"></text></g><g><title>opal_progress (465 samples, 0.17%)</title><rect x="70.7402%" y="485" width="0.1669%" height="15" fill="rgb(221,117,51)" fg:x="197075" fg:w="465"/><text x="70.9902%" y="495.50"></text></g><g><title>opal_progress_events (463 samples, 0.17%)</title><rect x="70.7409%" y="469" width="0.1662%" height="15" fill="rgb(212,20,18)" fg:x="197077" fg:w="463"/><text x="70.9909%" y="479.50"></text></g><g><title>distComputeModularity (470 samples, 0.17%)</title><rect x="70.7391%" y="613" width="0.1687%" height="15" fill="rgb(245,133,36)" fg:x="197072" fg:w="470"/><text x="70.9891%" y="623.50"></text></g><g><title>Graph::get_owner (60 samples, 0.02%)</title><rect x="70.9182%" y="565" width="0.0215%" height="15" fill="rgb(212,6,19)" fg:x="197571" fg:w="60"/><text x="71.1682%" y="575.50"></text></g><g><title>std::upper_bound&lt;__gnu_cxx::__normal_iterator&lt;long const*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long&gt; (52 samples, 0.02%)</title><rect x="70.9211%" y="549" width="0.0187%" height="15" fill="rgb(218,1,36)" fg:x="197579" fg:w="52"/><text x="71.1711%" y="559.50"></text></g><g><title>std::__upper_bound&lt;__gnu_cxx::__normal_iterator&lt;long const*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Val_less_iter&gt; (52 samples, 0.02%)</title><rect x="70.9211%" y="533" width="0.0187%" height="15" fill="rgb(246,84,54)" fg:x="197579" fg:w="52"/><text x="71.1711%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (38 samples, 0.01%)</title><rect x="70.9907%" y="485" width="0.0136%" height="15" fill="rgb(242,110,6)" fg:x="197773" fg:w="38"/><text x="71.2407%" y="495.50"></text></g><g><title>dequeue_entity (83 samples, 0.03%)</title><rect x="71.0887%" y="325" width="0.0298%" height="15" fill="rgb(214,47,5)" fg:x="198046" fg:w="83"/><text x="71.3387%" y="335.50"></text></g><g><title>dequeue_task_fair (100 samples, 0.04%)</title><rect x="71.0840%" y="341" width="0.0359%" height="15" fill="rgb(218,159,25)" fg:x="198033" fg:w="100"/><text x="71.3340%" y="351.50"></text></g><g><title>deactivate_task (163 samples, 0.06%)</title><rect x="71.0837%" y="357" width="0.0585%" height="15" fill="rgb(215,211,28)" fg:x="198032" fg:w="163"/><text x="71.3337%" y="367.50"></text></g><g><title>psi_task_change (62 samples, 0.02%)</title><rect x="71.1199%" y="341" width="0.0223%" height="15" fill="rgb(238,59,32)" fg:x="198133" fg:w="62"/><text x="71.3699%" y="351.50"></text></g><g><title>finish_task_switch (45 samples, 0.02%)</title><rect x="71.1422%" y="357" width="0.0162%" height="15" fill="rgb(226,82,3)" fg:x="198195" fg:w="45"/><text x="71.3922%" y="367.50"></text></g><g><title>__schedule (252 samples, 0.09%)</title><rect x="71.0772%" y="373" width="0.0905%" height="15" fill="rgb(240,164,32)" fg:x="198014" fg:w="252"/><text x="71.3272%" y="383.50"></text></g><g><title>futex_wait_queue_me (276 samples, 0.10%)</title><rect x="71.0729%" y="405" width="0.0991%" height="15" fill="rgb(232,46,7)" fg:x="198002" fg:w="276"/><text x="71.3229%" y="415.50"></text></g><g><title>schedule (264 samples, 0.09%)</title><rect x="71.0772%" y="389" width="0.0948%" height="15" fill="rgb(229,129,53)" fg:x="198014" fg:w="264"/><text x="71.3272%" y="399.50"></text></g><g><title>_raw_spin_lock (35 samples, 0.01%)</title><rect x="71.1817%" y="389" width="0.0126%" height="15" fill="rgb(234,188,29)" fg:x="198305" fg:w="35"/><text x="71.4317%" y="399.50"></text></g><g><title>native_queued_spin_lock_slowpath (35 samples, 0.01%)</title><rect x="71.1817%" y="373" width="0.0126%" height="15" fill="rgb(246,141,4)" fg:x="198305" fg:w="35"/><text x="71.4317%" y="383.50"></text></g><g><title>futex_wait_setup (97 samples, 0.03%)</title><rect x="71.1720%" y="405" width="0.0348%" height="15" fill="rgb(229,23,39)" fg:x="198278" fg:w="97"/><text x="71.4220%" y="415.50"></text></g><g><title>futex_wait (417 samples, 0.15%)</title><rect x="71.0650%" y="421" width="0.1497%" height="15" fill="rgb(206,12,3)" fg:x="197980" fg:w="417"/><text x="71.3150%" y="431.50"></text></g><g><title>do_futex (421 samples, 0.15%)</title><rect x="71.0639%" y="437" width="0.1511%" height="15" fill="rgb(252,226,20)" fg:x="197977" fg:w="421"/><text x="71.3139%" y="447.50"></text></g><g><title>__x64_sys_futex (430 samples, 0.15%)</title><rect x="71.0618%" y="453" width="0.1543%" height="15" fill="rgb(216,123,35)" fg:x="197971" fg:w="430"/><text x="71.3118%" y="463.50"></text></g><g><title>do_syscall_64 (578 samples, 0.21%)</title><rect x="71.0104%" y="469" width="0.2075%" height="15" fill="rgb(212,68,40)" fg:x="197828" fg:w="578"/><text x="71.2604%" y="479.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (596 samples, 0.21%)</title><rect x="71.0043%" y="485" width="0.2139%" height="15" fill="rgb(254,125,32)" fg:x="197811" fg:w="596"/><text x="71.2543%" y="495.50"></text></g><g><title>__GI___pthread_mutex_lock (808 samples, 0.29%)</title><rect x="70.9451%" y="517" width="0.2900%" height="15" fill="rgb(253,97,22)" fg:x="197646" fg:w="808"/><text x="71.1951%" y="527.50"></text></g><g><title>__lll_lock_wait (724 samples, 0.26%)</title><rect x="70.9753%" y="501" width="0.2599%" height="15" fill="rgb(241,101,14)" fg:x="197730" fg:w="724"/><text x="71.2253%" y="511.50"></text></g><g><title>syscall_return_via_sysret (47 samples, 0.02%)</title><rect x="71.2183%" y="485" width="0.0169%" height="15" fill="rgb(238,103,29)" fg:x="198407" fg:w="47"/><text x="71.4683%" y="495.50"></text></g><g><title>std::lock_guard&lt;std::mutex&gt;::lock_guard (840 samples, 0.30%)</title><rect x="70.9422%" y="565" width="0.3015%" height="15" fill="rgb(233,195,47)" fg:x="197638" fg:w="840"/><text x="71.1922%" y="575.50"></text></g><g><title>std::mutex::lock (840 samples, 0.30%)</title><rect x="70.9422%" y="549" width="0.3015%" height="15" fill="rgb(246,218,30)" fg:x="197638" fg:w="840"/><text x="71.1922%" y="559.50"></text></g><g><title>exchangeVertexReqs (840 samples, 0.30%)</title><rect x="70.9422%" y="533" width="0.3015%" height="15" fill="rgb(219,145,47)" fg:x="197638" fg:w="840"/><text x="71.1922%" y="543.50"></text></g><g><title>entry_SYSCALL_64 (29 samples, 0.01%)</title><rect x="71.2937%" y="485" width="0.0104%" height="15" fill="rgb(243,12,26)" fg:x="198617" fg:w="29"/><text x="71.5437%" y="495.50"></text></g><g><title>_raw_spin_lock (32 samples, 0.01%)</title><rect x="71.3855%" y="405" width="0.0115%" height="15" fill="rgb(214,87,16)" fg:x="198873" fg:w="32"/><text x="71.6355%" y="415.50"></text></g><g><title>native_queued_spin_lock_slowpath (32 samples, 0.01%)</title><rect x="71.3855%" y="389" width="0.0115%" height="15" fill="rgb(208,99,42)" fg:x="198873" fg:w="32"/><text x="71.6355%" y="399.50"></text></g><g><title>update_cfs_group (36 samples, 0.01%)</title><rect x="71.5370%" y="309" width="0.0129%" height="15" fill="rgb(253,99,2)" fg:x="199295" fg:w="36"/><text x="71.7870%" y="319.50"></text></g><g><title>reweight_entity (28 samples, 0.01%)</title><rect x="71.5399%" y="293" width="0.0101%" height="15" fill="rgb(220,168,23)" fg:x="199303" fg:w="28"/><text x="71.7899%" y="303.50"></text></g><g><title>enqueue_entity (132 samples, 0.05%)</title><rect x="71.5277%" y="325" width="0.0474%" height="15" fill="rgb(242,38,24)" fg:x="199269" fg:w="132"/><text x="71.7777%" y="335.50"></text></g><g><title>update_load_avg (64 samples, 0.02%)</title><rect x="71.5521%" y="309" width="0.0230%" height="15" fill="rgb(225,182,9)" fg:x="199337" fg:w="64"/><text x="71.8021%" y="319.50"></text></g><g><title>enqueue_task_fair (157 samples, 0.06%)</title><rect x="71.5198%" y="341" width="0.0564%" height="15" fill="rgb(243,178,37)" fg:x="199247" fg:w="157"/><text x="71.7698%" y="351.50"></text></g><g><title>psi_task_change (58 samples, 0.02%)</title><rect x="71.5762%" y="341" width="0.0208%" height="15" fill="rgb(232,139,19)" fg:x="199404" fg:w="58"/><text x="71.8262%" y="351.50"></text></g><g><title>activate_task (221 samples, 0.08%)</title><rect x="71.5180%" y="357" width="0.0793%" height="15" fill="rgb(225,201,24)" fg:x="199242" fg:w="221"/><text x="71.7680%" y="367.50"></text></g><g><title>check_preempt_curr (42 samples, 0.02%)</title><rect x="71.5988%" y="341" width="0.0151%" height="15" fill="rgb(221,47,46)" fg:x="199467" fg:w="42"/><text x="71.8488%" y="351.50"></text></g><g><title>resched_curr (40 samples, 0.01%)</title><rect x="71.5995%" y="325" width="0.0144%" height="15" fill="rgb(249,23,13)" fg:x="199469" fg:w="40"/><text x="71.8495%" y="335.50"></text></g><g><title>ttwu_do_activate (274 samples, 0.10%)</title><rect x="71.5173%" y="373" width="0.0984%" height="15" fill="rgb(219,9,5)" fg:x="199240" fg:w="274"/><text x="71.7673%" y="383.50"></text></g><g><title>ttwu_do_wakeup (51 samples, 0.02%)</title><rect x="71.5973%" y="357" width="0.0183%" height="15" fill="rgb(254,171,16)" fg:x="199463" fg:w="51"/><text x="71.8473%" y="367.50"></text></g><g><title>try_to_wake_up (588 samples, 0.21%)</title><rect x="71.4143%" y="389" width="0.2111%" height="15" fill="rgb(230,171,20)" fg:x="198953" fg:w="588"/><text x="71.6643%" y="399.50"></text></g><g><title>futex_wake (703 samples, 0.25%)</title><rect x="71.3733%" y="421" width="0.2523%" height="15" fill="rgb(210,71,41)" fg:x="198839" fg:w="703"/><text x="71.6233%" y="431.50"></text></g><g><title>wake_up_q (600 samples, 0.22%)</title><rect x="71.4103%" y="405" width="0.2154%" height="15" fill="rgb(206,173,20)" fg:x="198942" fg:w="600"/><text x="71.6603%" y="415.50"></text></g><g><title>do_futex (739 samples, 0.27%)</title><rect x="71.3637%" y="437" width="0.2653%" height="15" fill="rgb(233,88,34)" fg:x="198812" fg:w="739"/><text x="71.6137%" y="447.50"></text></g><g><title>__x64_sys_futex (747 samples, 0.27%)</title><rect x="71.3611%" y="453" width="0.2681%" height="15" fill="rgb(223,209,46)" fg:x="198805" fg:w="747"/><text x="71.6111%" y="463.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (912 samples, 0.33%)</title><rect x="71.3041%" y="485" width="0.3274%" height="15" fill="rgb(250,43,18)" fg:x="198646" fg:w="912"/><text x="71.5541%" y="495.50"></text></g><g><title>do_syscall_64 (895 samples, 0.32%)</title><rect x="71.3102%" y="469" width="0.3213%" height="15" fill="rgb(208,13,10)" fg:x="198663" fg:w="895"/><text x="71.5602%" y="479.50"></text></g><g><title>__GI___pthread_mutex_unlock (1,126 samples, 0.40%)</title><rect x="71.2448%" y="517" width="0.4042%" height="15" fill="rgb(212,200,36)" fg:x="198481" fg:w="1126"/><text x="71.4948%" y="527.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (1,125 samples, 0.40%)</title><rect x="71.2452%" y="501" width="0.4038%" height="15" fill="rgb(225,90,30)" fg:x="198482" fg:w="1125"/><text x="71.4952%" y="511.50"></text></g><g><title>syscall_return_via_sysret (48 samples, 0.02%)</title><rect x="71.6318%" y="485" width="0.0172%" height="15" fill="rgb(236,182,39)" fg:x="199559" fg:w="48"/><text x="71.8818%" y="495.50"></text></g><g><title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (1,133 samples, 0.41%)</title><rect x="71.2438%" y="565" width="0.4067%" height="15" fill="rgb(212,144,35)" fg:x="198478" fg:w="1133"/><text x="71.4938%" y="575.50"></text></g><g><title>std::mutex::unlock (1,133 samples, 0.41%)</title><rect x="71.2438%" y="549" width="0.4067%" height="15" fill="rgb(228,63,44)" fg:x="198478" fg:w="1133"/><text x="71.4938%" y="559.50"></text></g><g><title>exchangeVertexReqs (1,133 samples, 0.41%)</title><rect x="71.2438%" y="533" width="0.4067%" height="15" fill="rgb(228,109,6)" fg:x="198478" fg:w="1133"/><text x="71.4938%" y="543.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (45 samples, 0.02%)</title><rect x="71.9067%" y="485" width="0.0162%" height="15" fill="rgb(238,117,24)" fg:x="200325" fg:w="45"/><text x="72.1567%" y="495.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;long, long, std::__detail::_Identity, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (45 samples, 0.02%)</title><rect x="71.9067%" y="469" width="0.0162%" height="15" fill="rgb(242,26,26)" fg:x="200325" fg:w="45"/><text x="72.1567%" y="479.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_node (750 samples, 0.27%)</title><rect x="71.6555%" y="517" width="0.2692%" height="15" fill="rgb(221,92,48)" fg:x="199625" fg:w="750"/><text x="71.9055%" y="527.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (750 samples, 0.27%)</title><rect x="71.6555%" y="501" width="0.2692%" height="15" fill="rgb(209,209,32)" fg:x="199625" fg:w="750"/><text x="71.9055%" y="511.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique_node (33 samples, 0.01%)</title><rect x="71.9247%" y="517" width="0.0118%" height="15" fill="rgb(221,70,22)" fg:x="200375" fg:w="33"/><text x="72.1747%" y="527.50"></text></g><g><title>std::unordered_set&lt;long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;long&gt; &gt;::insert (835 samples, 0.30%)</title><rect x="71.6505%" y="565" width="0.2997%" height="15" fill="rgb(248,145,5)" fg:x="199611" fg:w="835"/><text x="71.9005%" y="575.50"></text></g><g><title>std::__detail::_Insert_base&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::insert (835 samples, 0.30%)</title><rect x="71.6505%" y="549" width="0.2997%" height="15" fill="rgb(226,116,26)" fg:x="199611" fg:w="835"/><text x="71.9005%" y="559.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;long const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt; &gt; (835 samples, 0.30%)</title><rect x="71.6505%" y="533" width="0.2997%" height="15" fill="rgb(244,5,17)" fg:x="199611" fg:w="835"/><text x="71.9005%" y="543.50"></text></g><g><title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::operator (38 samples, 0.01%)</title><rect x="71.9365%" y="517" width="0.0136%" height="15" fill="rgb(252,159,33)" fg:x="200408" fg:w="38"/><text x="72.1865%" y="527.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::_M_allocate_node&lt;long const&amp;&gt; (38 samples, 0.01%)</title><rect x="71.9365%" y="501" width="0.0136%" height="15" fill="rgb(206,71,0)" fg:x="200408" fg:w="38"/><text x="72.1865%" y="511.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::allocate (38 samples, 0.01%)</title><rect x="71.9365%" y="485" width="0.0136%" height="15" fill="rgb(233,118,54)" fg:x="200408" fg:w="38"/><text x="72.1865%" y="495.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt;::allocate (38 samples, 0.01%)</title><rect x="71.9365%" y="469" width="0.0136%" height="15" fill="rgb(234,83,48)" fg:x="200408" fg:w="38"/><text x="72.1865%" y="479.50"></text></g><g><title>operator new (36 samples, 0.01%)</title><rect x="71.9373%" y="453" width="0.0129%" height="15" fill="rgb(228,3,54)" fg:x="200410" fg:w="36"/><text x="72.1873%" y="463.50"></text></g><g><title>__GI___libc_malloc (35 samples, 0.01%)</title><rect x="71.9376%" y="437" width="0.0126%" height="15" fill="rgb(226,155,13)" fg:x="200411" fg:w="35"/><text x="72.1876%" y="447.50"></text></g><g><title>GOMP_parallel (2,900 samples, 1.04%)</title><rect x="70.9132%" y="597" width="1.0410%" height="15" fill="rgb(241,28,37)" fg:x="197557" fg:w="2900"/><text x="71.1632%" y="607.50"></text></g><g><title>exchangeVertexReqs (2,900 samples, 1.04%)</title><rect x="70.9132%" y="581" width="1.0410%" height="15" fill="rgb(233,93,10)" fg:x="197557" fg:w="2900"/><text x="71.1632%" y="591.50"></text></g><g><title>entry_SYSCALL_64 (100 samples, 0.04%)</title><rect x="72.0008%" y="421" width="0.0359%" height="15" fill="rgb(225,113,19)" fg:x="200587" fg:w="100"/><text x="72.2508%" y="431.50"></text></g><g><title>__fdget (35 samples, 0.01%)</title><rect x="72.1526%" y="373" width="0.0126%" height="15" fill="rgb(241,2,18)" fg:x="201010" fg:w="35"/><text x="72.4026%" y="383.50"></text></g><g><title>__fdget (223 samples, 0.08%)</title><rect x="72.2535%" y="357" width="0.0800%" height="15" fill="rgb(228,207,21)" fg:x="201291" fg:w="223"/><text x="72.5035%" y="367.50"></text></g><g><title>__fget_light (211 samples, 0.08%)</title><rect x="72.2578%" y="341" width="0.0757%" height="15" fill="rgb(213,211,35)" fg:x="201303" fg:w="211"/><text x="72.5078%" y="351.50"></text></g><g><title>__x86_indirect_thunk_rax (31 samples, 0.01%)</title><rect x="72.3382%" y="357" width="0.0111%" height="15" fill="rgb(209,83,10)" fg:x="201527" fg:w="31"/><text x="72.5882%" y="367.50"></text></g><g><title>fput_many (48 samples, 0.02%)</title><rect x="72.3630%" y="357" width="0.0172%" height="15" fill="rgb(209,164,1)" fg:x="201596" fg:w="48"/><text x="72.6130%" y="367.50"></text></g><g><title>tcp_poll (389 samples, 0.14%)</title><rect x="72.4366%" y="341" width="0.1396%" height="15" fill="rgb(213,184,43)" fg:x="201801" fg:w="389"/><text x="72.6866%" y="351.50"></text></g><g><title>sock_poll (582 samples, 0.21%)</title><rect x="72.3838%" y="357" width="0.2089%" height="15" fill="rgb(231,61,34)" fg:x="201654" fg:w="582"/><text x="72.6338%" y="367.50"></text></g><g><title>tcp_stream_memory_free (46 samples, 0.02%)</title><rect x="72.5762%" y="341" width="0.0165%" height="15" fill="rgb(235,75,3)" fg:x="202190" fg:w="46"/><text x="72.8262%" y="351.50"></text></g><g><title>do_sys_poll (1,200 samples, 0.43%)</title><rect x="72.1706%" y="373" width="0.4307%" height="15" fill="rgb(220,106,47)" fg:x="201060" fg:w="1200"/><text x="72.4206%" y="383.50"></text></g><g><title>__x64_sys_poll (1,311 samples, 0.47%)</title><rect x="72.1480%" y="389" width="0.4706%" height="15" fill="rgb(210,196,33)" fg:x="200997" fg:w="1311"/><text x="72.3980%" y="399.50"></text></g><g><title>do_syscall_64 (1,602 samples, 0.58%)</title><rect x="72.0460%" y="405" width="0.5750%" height="15" fill="rgb(229,154,42)" fg:x="200713" fg:w="1602"/><text x="72.2960%" y="415.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1,631 samples, 0.59%)</title><rect x="72.0367%" y="421" width="0.5854%" height="15" fill="rgb(228,114,26)" fg:x="200687" fg:w="1631"/><text x="72.2867%" y="431.50"></text></g><g><title>__GI___poll (1,882 samples, 0.68%)</title><rect x="71.9850%" y="437" width="0.6755%" height="15" fill="rgb(208,144,1)" fg:x="200543" fg:w="1882"/><text x="72.2350%" y="447.50"></text></g><g><title>syscall_return_via_sysret (106 samples, 0.04%)</title><rect x="72.6225%" y="421" width="0.0380%" height="15" fill="rgb(239,112,37)" fg:x="202319" fg:w="106"/><text x="72.8725%" y="431.50"></text></g><g><title>event_strlcpy_ (1,924 samples, 0.69%)</title><rect x="71.9764%" y="453" width="0.6906%" height="15" fill="rgb(210,96,50)" fg:x="200519" fg:w="1924"/><text x="72.2264%" y="463.50"></text></g><g><title>event_base_loop (1,975 samples, 0.71%)</title><rect x="71.9584%" y="469" width="0.7089%" height="15" fill="rgb(222,178,2)" fg:x="200469" fg:w="1975"/><text x="72.2084%" y="479.50"></text></g><g><title>MPI_Alltoall (1,993 samples, 0.72%)</title><rect x="71.9541%" y="597" width="0.7154%" height="15" fill="rgb(226,74,18)" fg:x="200457" fg:w="1993"/><text x="72.2041%" y="607.50"></text></g><g><title>ompi_coll_tuned_alltoall_intra_dec_fixed (1,993 samples, 0.72%)</title><rect x="71.9541%" y="581" width="0.7154%" height="15" fill="rgb(225,67,54)" fg:x="200457" fg:w="1993"/><text x="72.2041%" y="591.50"></text></g><g><title>ompi_coll_base_alltoall_intra_bruck (1,993 samples, 0.72%)</title><rect x="71.9541%" y="565" width="0.7154%" height="15" fill="rgb(251,92,32)" fg:x="200457" fg:w="1993"/><text x="72.2041%" y="575.50"></text></g><g><title>ompi_coll_base_sendrecv_actual (1,993 samples, 0.72%)</title><rect x="71.9541%" y="549" width="0.7154%" height="15" fill="rgb(228,149,22)" fg:x="200457" fg:w="1993"/><text x="72.2041%" y="559.50"></text></g><g><title>ompi_request_default_wait (1,993 samples, 0.72%)</title><rect x="71.9541%" y="533" width="0.7154%" height="15" fill="rgb(243,54,13)" fg:x="200457" fg:w="1993"/><text x="72.2041%" y="543.50"></text></g><g><title>ompi_sync_wait_mt (1,993 samples, 0.72%)</title><rect x="71.9541%" y="517" width="0.7154%" height="15" fill="rgb(243,180,28)" fg:x="200457" fg:w="1993"/><text x="72.2041%" y="527.50"></text></g><g><title>opal_progress (1,992 samples, 0.72%)</title><rect x="71.9545%" y="501" width="0.7150%" height="15" fill="rgb(208,167,24)" fg:x="200458" fg:w="1992"/><text x="72.2045%" y="511.50"></text></g><g><title>opal_progress_events (1,989 samples, 0.71%)</title><rect x="71.9556%" y="485" width="0.7140%" height="15" fill="rgb(245,73,45)" fg:x="200461" fg:w="1989"/><text x="72.2056%" y="495.50"></text></g><g><title>tcp_poll (60 samples, 0.02%)</title><rect x="72.7359%" y="357" width="0.0215%" height="15" fill="rgb(237,203,48)" fg:x="202635" fg:w="60"/><text x="72.9859%" y="367.50"></text></g><g><title>sock_poll (87 samples, 0.03%)</title><rect x="72.7277%" y="373" width="0.0312%" height="15" fill="rgb(211,197,16)" fg:x="202612" fg:w="87"/><text x="72.9777%" y="383.50"></text></g><g><title>do_sys_poll (164 samples, 0.06%)</title><rect x="72.7015%" y="389" width="0.0589%" height="15" fill="rgb(243,99,51)" fg:x="202539" fg:w="164"/><text x="72.9515%" y="399.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (215 samples, 0.08%)</title><rect x="72.6842%" y="437" width="0.0772%" height="15" fill="rgb(215,123,29)" fg:x="202491" fg:w="215"/><text x="72.9342%" y="447.50"></text></g><g><title>do_syscall_64 (212 samples, 0.08%)</title><rect x="72.6853%" y="421" width="0.0761%" height="15" fill="rgb(239,186,37)" fg:x="202494" fg:w="212"/><text x="72.9353%" y="431.50"></text></g><g><title>__x64_sys_poll (179 samples, 0.06%)</title><rect x="72.6972%" y="405" width="0.0643%" height="15" fill="rgb(252,136,39)" fg:x="202527" fg:w="179"/><text x="72.9472%" y="415.50"></text></g><g><title>__GI___poll (235 samples, 0.08%)</title><rect x="72.6792%" y="453" width="0.0844%" height="15" fill="rgb(223,213,32)" fg:x="202477" fg:w="235"/><text x="72.9292%" y="463.50"></text></g><g><title>event_strlcpy_ (239 samples, 0.09%)</title><rect x="72.6781%" y="469" width="0.0858%" height="15" fill="rgb(233,115,5)" fg:x="202474" fg:w="239"/><text x="72.9281%" y="479.50"></text></g><g><title>PMPI_Alltoallv (264 samples, 0.09%)</title><rect x="72.6695%" y="597" width="0.0948%" height="15" fill="rgb(207,226,44)" fg:x="202450" fg:w="264"/><text x="72.9195%" y="607.50"></text></g><g><title>ompi_coll_tuned_alltoallv_intra_dec_fixed (264 samples, 0.09%)</title><rect x="72.6695%" y="581" width="0.0948%" height="15" fill="rgb(208,126,0)" fg:x="202450" fg:w="264"/><text x="72.9195%" y="591.50"></text></g><g><title>ompi_coll_base_alltoallv_intra_basic_linear (264 samples, 0.09%)</title><rect x="72.6695%" y="565" width="0.0948%" height="15" fill="rgb(244,66,21)" fg:x="202450" fg:w="264"/><text x="72.9195%" y="575.50"></text></g><g><title>ompi_request_default_wait_all (264 samples, 0.09%)</title><rect x="72.6695%" y="549" width="0.0948%" height="15" fill="rgb(222,97,12)" fg:x="202450" fg:w="264"/><text x="72.9195%" y="559.50"></text></g><g><title>ompi_sync_wait_mt (264 samples, 0.09%)</title><rect x="72.6695%" y="533" width="0.0948%" height="15" fill="rgb(219,213,19)" fg:x="202450" fg:w="264"/><text x="72.9195%" y="543.50"></text></g><g><title>opal_progress (263 samples, 0.09%)</title><rect x="72.6699%" y="517" width="0.0944%" height="15" fill="rgb(252,169,30)" fg:x="202451" fg:w="263"/><text x="72.9199%" y="527.50"></text></g><g><title>opal_progress_events (263 samples, 0.09%)</title><rect x="72.6699%" y="501" width="0.0944%" height="15" fill="rgb(206,32,51)" fg:x="202451" fg:w="263"/><text x="72.9199%" y="511.50"></text></g><g><title>event_base_loop (260 samples, 0.09%)</title><rect x="72.6710%" y="485" width="0.0933%" height="15" fill="rgb(250,172,42)" fg:x="202454" fg:w="260"/><text x="72.9210%" y="495.50"></text></g><g><title>std::copy&lt;std::__detail::_Node_iterator&lt;long, true, false&gt;, __gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt; &gt; (296 samples, 0.11%)</title><rect x="72.7643%" y="597" width="0.1062%" height="15" fill="rgb(209,34,43)" fg:x="202714" fg:w="296"/><text x="73.0143%" y="607.50"></text></g><g><title>std::__copy_move_a2&lt;false, std::__detail::_Node_iterator&lt;long, true, false&gt;, __gnu_cxx::__normal_iterator&lt;long*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt; &gt; (296 samples, 0.11%)</title><rect x="72.7643%" y="581" width="0.1062%" height="15" fill="rgb(223,11,35)" fg:x="202714" fg:w="296"/><text x="73.0143%" y="591.50"></text></g><g><title>std::__copy_move_a&lt;false, std::__detail::_Node_iterator&lt;long, true, false&gt;, long*&gt; (296 samples, 0.11%)</title><rect x="72.7643%" y="565" width="0.1062%" height="15" fill="rgb(251,219,26)" fg:x="202714" fg:w="296"/><text x="73.0143%" y="575.50"></text></g><g><title>std::__copy_move&lt;false, false, std::forward_iterator_tag&gt;::__copy_m&lt;std::__detail::_Node_iterator&lt;long, true, false&gt;, long*&gt; (296 samples, 0.11%)</title><rect x="72.7643%" y="549" width="0.1062%" height="15" fill="rgb(231,119,3)" fg:x="202714" fg:w="296"/><text x="73.0143%" y="559.50"></text></g><g><title>__GI___libc_free (34 samples, 0.01%)</title><rect x="72.9359%" y="389" width="0.0122%" height="15" fill="rgb(216,97,11)" fg:x="203192" fg:w="34"/><text x="73.1859%" y="399.50"></text></g><g><title>_int_free (83 samples, 0.03%)</title><rect x="72.9481%" y="389" width="0.0298%" height="15" fill="rgb(223,59,9)" fg:x="203226" fg:w="83"/><text x="73.1981%" y="399.50"></text></g><g><title>exchangeVertexReqs (5,753 samples, 2.07%)</title><rect x="70.9132%" y="613" width="2.0650%" height="15" fill="rgb(233,93,31)" fg:x="197557" fg:w="5753"/><text x="71.1632%" y="623.50">e..</text></g><g><title>std::vector&lt;std::unordered_set&lt;long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;long&gt; &gt;, std::allocator&lt;std::unordered_set&lt;long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;long&gt; &gt; &gt; &gt;::~vector (278 samples, 0.10%)</title><rect x="72.8784%" y="597" width="0.0998%" height="15" fill="rgb(239,81,33)" fg:x="203032" fg:w="278"/><text x="73.1284%" y="607.50"></text></g><g><title>std::_Destroy&lt;std::unordered_set&lt;long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;long&gt; &gt;*, std::unordered_set&lt;long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;long&gt; &gt; &gt; (278 samples, 0.10%)</title><rect x="72.8784%" y="581" width="0.0998%" height="15" fill="rgb(213,120,34)" fg:x="203032" fg:w="278"/><text x="73.1284%" y="591.50"></text></g><g><title>std::_Destroy&lt;std::unordered_set&lt;long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;long&gt; &gt;*&gt; (278 samples, 0.10%)</title><rect x="72.8784%" y="565" width="0.0998%" height="15" fill="rgb(243,49,53)" fg:x="203032" fg:w="278"/><text x="73.1284%" y="575.50"></text></g><g><title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::unordered_set&lt;long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;long&gt; &gt;*&gt; (278 samples, 0.10%)</title><rect x="72.8784%" y="549" width="0.0998%" height="15" fill="rgb(247,216,33)" fg:x="203032" fg:w="278"/><text x="73.1284%" y="559.50"></text></g><g><title>std::_Destroy&lt;std::unordered_set&lt;long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;long&gt; &gt; &gt; (278 samples, 0.10%)</title><rect x="72.8784%" y="533" width="0.0998%" height="15" fill="rgb(226,26,14)" fg:x="203032" fg:w="278"/><text x="73.1284%" y="543.50"></text></g><g><title>std::unordered_set&lt;long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;long&gt; &gt;::~unordered_set (278 samples, 0.10%)</title><rect x="72.8784%" y="517" width="0.0998%" height="15" fill="rgb(215,49,53)" fg:x="203032" fg:w="278"/><text x="73.1284%" y="527.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::~_Hashtable (278 samples, 0.10%)</title><rect x="72.8784%" y="501" width="0.0998%" height="15" fill="rgb(245,162,40)" fg:x="203032" fg:w="278"/><text x="73.1284%" y="511.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::clear (277 samples, 0.10%)</title><rect x="72.8788%" y="485" width="0.0994%" height="15" fill="rgb(229,68,17)" fg:x="203033" fg:w="277"/><text x="73.1288%" y="495.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::_M_deallocate_nodes (273 samples, 0.10%)</title><rect x="72.8802%" y="469" width="0.0980%" height="15" fill="rgb(213,182,10)" fg:x="203037" fg:w="273"/><text x="73.1302%" y="479.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::_M_deallocate_node (125 samples, 0.04%)</title><rect x="72.9333%" y="453" width="0.0449%" height="15" fill="rgb(245,125,30)" fg:x="203185" fg:w="125"/><text x="73.1833%" y="463.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::_M_deallocate_node_ptr (125 samples, 0.04%)</title><rect x="72.9333%" y="437" width="0.0449%" height="15" fill="rgb(232,202,2)" fg:x="203185" fg:w="125"/><text x="73.1833%" y="447.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::deallocate (125 samples, 0.04%)</title><rect x="72.9333%" y="421" width="0.0449%" height="15" fill="rgb(237,140,51)" fg:x="203185" fg:w="125"/><text x="73.1833%" y="431.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt;::deallocate (125 samples, 0.04%)</title><rect x="72.9333%" y="405" width="0.0449%" height="15" fill="rgb(236,157,25)" fg:x="203185" fg:w="125"/><text x="73.1833%" y="415.50"></text></g><g><title>fillRemoteCommunities (57 samples, 0.02%)</title><rect x="73.0705%" y="581" width="0.0205%" height="15" fill="rgb(219,209,0)" fg:x="203567" fg:w="57"/><text x="73.3205%" y="591.50"></text></g><g><title>GOMP_parallel (58 samples, 0.02%)</title><rect x="73.0705%" y="597" width="0.0208%" height="15" fill="rgb(240,116,54)" fg:x="203567" fg:w="58"/><text x="73.3205%" y="607.50"></text></g><g><title>std::advance&lt;__gnu_cxx::__normal_iterator&lt;long const*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long&gt; (158 samples, 0.06%)</title><rect x="73.2169%" y="549" width="0.0567%" height="15" fill="rgb(216,10,36)" fg:x="203975" fg:w="158"/><text x="73.4669%" y="559.50"></text></g><g><title>std::__advance&lt;__gnu_cxx::__normal_iterator&lt;long const*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long&gt; (158 samples, 0.06%)</title><rect x="73.2169%" y="533" width="0.0567%" height="15" fill="rgb(222,72,44)" fg:x="203975" fg:w="158"/><text x="73.4669%" y="543.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;long const*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;::operator+= (158 samples, 0.06%)</title><rect x="73.2169%" y="517" width="0.0567%" height="15" fill="rgb(232,159,9)" fg:x="203975" fg:w="158"/><text x="73.4669%" y="527.50"></text></g><g><title>Graph::get_owner (568 samples, 0.20%)</title><rect x="73.0913%" y="597" width="0.2039%" height="15" fill="rgb(210,39,32)" fg:x="203625" fg:w="568"/><text x="73.3413%" y="607.50"></text></g><g><title>std::upper_bound&lt;__gnu_cxx::__normal_iterator&lt;long const*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long&gt; (523 samples, 0.19%)</title><rect x="73.1074%" y="581" width="0.1877%" height="15" fill="rgb(216,194,45)" fg:x="203670" fg:w="523"/><text x="73.3574%" y="591.50"></text></g><g><title>std::__upper_bound&lt;__gnu_cxx::__normal_iterator&lt;long const*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Val_less_iter&gt; (523 samples, 0.19%)</title><rect x="73.1074%" y="565" width="0.1877%" height="15" fill="rgb(218,18,35)" fg:x="203670" fg:w="523"/><text x="73.3574%" y="575.50"></text></g><g><title>std::distance&lt;__gnu_cxx::__normal_iterator&lt;long const*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt; &gt; (60 samples, 0.02%)</title><rect x="73.2736%" y="549" width="0.0215%" height="15" fill="rgb(207,83,51)" fg:x="204133" fg:w="60"/><text x="73.5236%" y="559.50"></text></g><g><title>std::__distance&lt;__gnu_cxx::__normal_iterator&lt;long const*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt; &gt; (60 samples, 0.02%)</title><rect x="73.2736%" y="533" width="0.0215%" height="15" fill="rgb(225,63,43)" fg:x="204133" fg:w="60"/><text x="73.5236%" y="543.50"></text></g><g><title>__gnu_cxx::operator-&lt;long const*, std::vector&lt;long, std::allocator&lt;long&gt; &gt; &gt; (60 samples, 0.02%)</title><rect x="73.2736%" y="517" width="0.0215%" height="15" fill="rgb(207,57,36)" fg:x="204133" fg:w="60"/><text x="73.5236%" y="527.50"></text></g><g><title>__GI___pthread_mutex_lock (31 samples, 0.01%)</title><rect x="73.3433%" y="453" width="0.0111%" height="15" fill="rgb(216,99,33)" fg:x="204327" fg:w="31"/><text x="73.5933%" y="463.50"></text></g><g><title>bufferevent_base_set (58 samples, 0.02%)</title><rect x="73.3565%" y="453" width="0.0208%" height="15" fill="rgb(225,42,16)" fg:x="204364" fg:w="58"/><text x="73.6065%" y="463.50"></text></g><g><title>evutil_gettime_monotonic_ (37 samples, 0.01%)</title><rect x="73.3641%" y="437" width="0.0133%" height="15" fill="rgb(220,201,45)" fg:x="204385" fg:w="37"/><text x="73.6141%" y="447.50"></text></g><g><title>[libc-2.31.so] (31 samples, 0.01%)</title><rect x="73.3942%" y="437" width="0.0111%" height="15" fill="rgb(225,33,4)" fg:x="204469" fg:w="31"/><text x="73.6442%" y="447.50"></text></g><g><title>__libc_disable_asynccancel (54 samples, 0.02%)</title><rect x="73.4431%" y="421" width="0.0194%" height="15" fill="rgb(224,33,50)" fg:x="204605" fg:w="54"/><text x="73.6931%" y="431.50"></text></g><g><title>entry_SYSCALL_64 (322 samples, 0.12%)</title><rect x="73.4693%" y="421" width="0.1156%" height="15" fill="rgb(246,198,51)" fg:x="204678" fg:w="322"/><text x="73.7193%" y="431.50"></text></g><g><title>__fdget (221 samples, 0.08%)</title><rect x="74.0152%" y="373" width="0.0793%" height="15" fill="rgb(205,22,4)" fg:x="206199" fg:w="221"/><text x="74.2652%" y="383.50"></text></g><g><title>__x86_indirect_thunk_rax (146 samples, 0.05%)</title><rect x="74.0945%" y="373" width="0.0524%" height="15" fill="rgb(206,3,8)" fg:x="206420" fg:w="146"/><text x="74.3445%" y="383.50"></text></g><g><title>__check_object_size (35 samples, 0.01%)</title><rect x="74.5404%" y="357" width="0.0126%" height="15" fill="rgb(251,23,15)" fg:x="207662" fg:w="35"/><text x="74.7904%" y="367.50"></text></g><g><title>__fdget (1,271 samples, 0.46%)</title><rect x="74.5529%" y="357" width="0.4562%" height="15" fill="rgb(252,88,28)" fg:x="207697" fg:w="1271"/><text x="74.8029%" y="367.50"></text></g><g><title>__fget_light (1,206 samples, 0.43%)</title><rect x="74.5763%" y="341" width="0.4329%" height="15" fill="rgb(212,127,14)" fg:x="207762" fg:w="1206"/><text x="74.8263%" y="351.50"></text></g><g><title>__fget_light (98 samples, 0.04%)</title><rect x="75.0092%" y="357" width="0.0352%" height="15" fill="rgb(247,145,37)" fg:x="208968" fg:w="98"/><text x="75.2592%" y="367.50"></text></g><g><title>__x86_indirect_thunk_rax (185 samples, 0.07%)</title><rect x="75.0443%" y="357" width="0.0664%" height="15" fill="rgb(209,117,53)" fg:x="209066" fg:w="185"/><text x="75.2943%" y="367.50"></text></g><g><title>eventfd_poll (28 samples, 0.01%)</title><rect x="75.1201%" y="357" width="0.0101%" height="15" fill="rgb(212,90,42)" fg:x="209277" fg:w="28"/><text x="75.3701%" y="367.50"></text></g><g><title>fput (62 samples, 0.02%)</title><rect x="75.1301%" y="357" width="0.0223%" height="15" fill="rgb(218,164,37)" fg:x="209305" fg:w="62"/><text x="75.3801%" y="367.50"></text></g><g><title>fput_many (221 samples, 0.08%)</title><rect x="75.1524%" y="357" width="0.0793%" height="15" fill="rgb(246,65,34)" fg:x="209367" fg:w="221"/><text x="75.4024%" y="367.50"></text></g><g><title>__x86_indirect_thunk_rax (153 samples, 0.05%)</title><rect x="75.5171%" y="341" width="0.0549%" height="15" fill="rgb(231,100,33)" fg:x="210383" fg:w="153"/><text x="75.7671%" y="351.50"></text></g><g><title>tcp_poll (2,093 samples, 0.75%)</title><rect x="75.5720%" y="341" width="0.7513%" height="15" fill="rgb(228,126,14)" fg:x="210536" fg:w="2093"/><text x="75.8220%" y="351.50"></text></g><g><title>sock_poll (3,287 samples, 1.18%)</title><rect x="75.2407%" y="357" width="1.1799%" height="15" fill="rgb(215,173,21)" fg:x="209613" fg:w="3287"/><text x="75.4907%" y="367.50"></text></g><g><title>tcp_stream_memory_free (271 samples, 0.10%)</title><rect x="76.3233%" y="341" width="0.0973%" height="15" fill="rgb(210,6,40)" fg:x="212629" fg:w="271"/><text x="76.5733%" y="351.50"></text></g><g><title>do_sys_poll (6,526 samples, 2.34%)</title><rect x="74.1495%" y="373" width="2.3425%" height="15" fill="rgb(212,48,18)" fg:x="206573" fg:w="6526"/><text x="74.3995%" y="383.50">d..</text></g><g><title>tcp_poll (199 samples, 0.07%)</title><rect x="76.4205%" y="357" width="0.0714%" height="15" fill="rgb(230,214,11)" fg:x="212900" fg:w="199"/><text x="76.6705%" y="367.50"></text></g><g><title>fput (106 samples, 0.04%)</title><rect x="76.4966%" y="373" width="0.0380%" height="15" fill="rgb(254,105,39)" fg:x="213112" fg:w="106"/><text x="76.7466%" y="383.50"></text></g><g><title>__x64_sys_poll (7,213 samples, 2.59%)</title><rect x="73.9983%" y="389" width="2.5891%" height="15" fill="rgb(245,158,5)" fg:x="206152" fg:w="7213"/><text x="74.2483%" y="399.50">__..</text></g><g><title>sock_poll (116 samples, 0.04%)</title><rect x="76.5458%" y="373" width="0.0416%" height="15" fill="rgb(249,208,11)" fg:x="213249" fg:w="116"/><text x="76.7958%" y="383.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (8,383 samples, 3.01%)</title><rect x="73.5848%" y="421" width="3.0091%" height="15" fill="rgb(210,39,28)" fg:x="205000" fg:w="8383"/><text x="73.8348%" y="431.50">ent..</text></g><g><title>do_syscall_64 (8,284 samples, 2.97%)</title><rect x="73.6204%" y="405" width="2.9735%" height="15" fill="rgb(211,56,53)" fg:x="205099" fg:w="8284"/><text x="73.8704%" y="415.50">do_..</text></g><g><title>__GI___poll (9,193 samples, 3.30%)</title><rect x="73.4133%" y="437" width="3.2998%" height="15" fill="rgb(226,201,30)" fg:x="204522" fg:w="9193"/><text x="73.6633%" y="447.50">__G..</text></g><g><title>syscall_return_via_sysret (332 samples, 0.12%)</title><rect x="76.5939%" y="421" width="0.1192%" height="15" fill="rgb(239,101,34)" fg:x="213383" fg:w="332"/><text x="76.8439%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (32 samples, 0.01%)</title><rect x="76.7131%" y="437" width="0.0115%" height="15" fill="rgb(226,209,5)" fg:x="213715" fg:w="32"/><text x="76.9631%" y="447.50"></text></g><g><title>event_strlcpy_ (9,357 samples, 3.36%)</title><rect x="73.3774%" y="453" width="3.3587%" height="15" fill="rgb(250,105,47)" fg:x="204422" fg:w="9357"/><text x="73.6274%" y="463.50">eve..</text></g><g><title>event_base_loop (9,533 samples, 3.42%)</title><rect x="73.3149%" y="469" width="3.4219%" height="15" fill="rgb(230,72,3)" fg:x="204248" fg:w="9533"/><text x="73.5649%" y="479.50">eve..</text></g><g><title>MPI_Alltoall (9,605 samples, 3.45%)</title><rect x="73.2952%" y="597" width="3.4477%" height="15" fill="rgb(232,218,39)" fg:x="204193" fg:w="9605"/><text x="73.5452%" y="607.50">MPI..</text></g><g><title>ompi_coll_tuned_alltoall_intra_dec_fixed (9,605 samples, 3.45%)</title><rect x="73.2952%" y="581" width="3.4477%" height="15" fill="rgb(248,166,6)" fg:x="204193" fg:w="9605"/><text x="73.5452%" y="591.50">omp..</text></g><g><title>ompi_coll_base_alltoall_intra_bruck (9,605 samples, 3.45%)</title><rect x="73.2952%" y="565" width="3.4477%" height="15" fill="rgb(247,89,20)" fg:x="204193" fg:w="9605"/><text x="73.5452%" y="575.50">omp..</text></g><g><title>ompi_coll_base_sendrecv_actual (9,605 samples, 3.45%)</title><rect x="73.2952%" y="549" width="3.4477%" height="15" fill="rgb(248,130,54)" fg:x="204193" fg:w="9605"/><text x="73.5452%" y="559.50">omp..</text></g><g><title>ompi_request_default_wait (9,604 samples, 3.45%)</title><rect x="73.2955%" y="533" width="3.4474%" height="15" fill="rgb(234,196,4)" fg:x="204194" fg:w="9604"/><text x="73.5455%" y="543.50">omp..</text></g><g><title>ompi_sync_wait_mt (9,604 samples, 3.45%)</title><rect x="73.2955%" y="517" width="3.4474%" height="15" fill="rgb(250,143,31)" fg:x="204194" fg:w="9604"/><text x="73.5455%" y="527.50">omp..</text></g><g><title>opal_progress (9,601 samples, 3.45%)</title><rect x="73.2966%" y="501" width="3.4463%" height="15" fill="rgb(211,110,34)" fg:x="204197" fg:w="9601"/><text x="73.5466%" y="511.50">opa..</text></g><g><title>opal_progress_events (9,578 samples, 3.44%)</title><rect x="73.3049%" y="485" width="3.4380%" height="15" fill="rgb(215,124,48)" fg:x="204220" fg:w="9578"/><text x="73.5549%" y="495.50">opa..</text></g><g><title>__kfree_skb (39 samples, 0.01%)</title><rect x="76.8053%" y="229" width="0.0140%" height="15" fill="rgb(216,46,13)" fg:x="213972" fg:w="39"/><text x="77.0553%" y="239.50"></text></g><g><title>skb_release_all (36 samples, 0.01%)</title><rect x="76.8064%" y="213" width="0.0129%" height="15" fill="rgb(205,184,25)" fg:x="213975" fg:w="36"/><text x="77.0564%" y="223.50"></text></g><g><title>__check_object_size (85 samples, 0.03%)</title><rect x="76.8577%" y="181" width="0.0305%" height="15" fill="rgb(228,1,10)" fg:x="214118" fg:w="85"/><text x="77.1077%" y="191.50"></text></g><g><title>copy_user_enhanced_fast_string (207 samples, 0.07%)</title><rect x="76.8976%" y="165" width="0.0743%" height="15" fill="rgb(213,116,27)" fg:x="214229" fg:w="207"/><text x="77.1476%" y="175.50"></text></g><g><title>_copy_to_iter (239 samples, 0.09%)</title><rect x="76.8893%" y="181" width="0.0858%" height="15" fill="rgb(241,95,50)" fg:x="214206" fg:w="239"/><text x="77.1393%" y="191.50"></text></g><g><title>copyout (48 samples, 0.02%)</title><rect x="76.9762%" y="181" width="0.0172%" height="15" fill="rgb(238,48,32)" fg:x="214448" fg:w="48"/><text x="77.2262%" y="191.50"></text></g><g><title>__skb_datagram_iter (448 samples, 0.16%)</title><rect x="76.8337%" y="213" width="0.1608%" height="15" fill="rgb(235,113,49)" fg:x="214051" fg:w="448"/><text x="77.0837%" y="223.50"></text></g><g><title>simple_copy_to_iter (408 samples, 0.15%)</title><rect x="76.8481%" y="197" width="0.1465%" height="15" fill="rgb(205,127,43)" fg:x="214091" fg:w="408"/><text x="77.0981%" y="207.50"></text></g><g><title>skb_copy_datagram_iter (457 samples, 0.16%)</title><rect x="76.8330%" y="229" width="0.1640%" height="15" fill="rgb(250,162,2)" fg:x="214049" fg:w="457"/><text x="77.0830%" y="239.50"></text></g><g><title>__dev_queue_xmit (35 samples, 0.01%)</title><rect x="77.0125%" y="37" width="0.0126%" height="15" fill="rgb(220,13,41)" fg:x="214549" fg:w="35"/><text x="77.2625%" y="47.50"></text></g><g><title>ip_finish_output (41 samples, 0.01%)</title><rect x="77.0110%" y="101" width="0.0147%" height="15" fill="rgb(249,221,25)" fg:x="214545" fg:w="41"/><text x="77.2610%" y="111.50"></text></g><g><title>__ip_finish_output (39 samples, 0.01%)</title><rect x="77.0117%" y="85" width="0.0140%" height="15" fill="rgb(215,208,19)" fg:x="214547" fg:w="39"/><text x="77.2617%" y="95.50"></text></g><g><title>ip_finish_output2 (39 samples, 0.01%)</title><rect x="77.0117%" y="69" width="0.0140%" height="15" fill="rgb(236,175,2)" fg:x="214547" fg:w="39"/><text x="77.2617%" y="79.50"></text></g><g><title>dev_queue_xmit (37 samples, 0.01%)</title><rect x="77.0125%" y="53" width="0.0133%" height="15" fill="rgb(241,52,2)" fg:x="214549" fg:w="37"/><text x="77.2625%" y="63.50"></text></g><g><title>ip_output (43 samples, 0.02%)</title><rect x="77.0107%" y="117" width="0.0154%" height="15" fill="rgb(248,140,14)" fg:x="214544" fg:w="43"/><text x="77.2607%" y="127.50"></text></g><g><title>ip_local_out (64 samples, 0.02%)</title><rect x="77.0035%" y="133" width="0.0230%" height="15" fill="rgb(253,22,42)" fg:x="214524" fg:w="64"/><text x="77.2535%" y="143.50"></text></g><g><title>ip_queue_xmit (67 samples, 0.02%)</title><rect x="77.0028%" y="165" width="0.0240%" height="15" fill="rgb(234,61,47)" fg:x="214522" fg:w="67"/><text x="77.2528%" y="175.50"></text></g><g><title>__ip_queue_xmit (67 samples, 0.02%)</title><rect x="77.0028%" y="149" width="0.0240%" height="15" fill="rgb(208,226,15)" fg:x="214522" fg:w="67"/><text x="77.2528%" y="159.50"></text></g><g><title>__tcp_transmit_skb (74 samples, 0.03%)</title><rect x="77.0006%" y="181" width="0.0266%" height="15" fill="rgb(217,221,4)" fg:x="214516" fg:w="74"/><text x="77.2506%" y="191.50"></text></g><g><title>tcp_cleanup_rbuf (86 samples, 0.03%)</title><rect x="76.9970%" y="229" width="0.0309%" height="15" fill="rgb(212,174,34)" fg:x="214506" fg:w="86"/><text x="77.2470%" y="239.50"></text></g><g><title>tcp_send_ack (85 samples, 0.03%)</title><rect x="76.9974%" y="213" width="0.0305%" height="15" fill="rgb(253,83,4)" fg:x="214507" fg:w="85"/><text x="77.2474%" y="223.50"></text></g><g><title>__tcp_send_ack.part.0 (84 samples, 0.03%)</title><rect x="76.9977%" y="197" width="0.0302%" height="15" fill="rgb(250,195,49)" fg:x="214508" fg:w="84"/><text x="77.2477%" y="207.50"></text></g><g><title>inet_recvmsg (656 samples, 0.24%)</title><rect x="76.7982%" y="261" width="0.2355%" height="15" fill="rgb(241,192,25)" fg:x="213952" fg:w="656"/><text x="77.0482%" y="271.50"></text></g><g><title>tcp_recvmsg (655 samples, 0.24%)</title><rect x="76.7985%" y="245" width="0.2351%" height="15" fill="rgb(208,124,10)" fg:x="213953" fg:w="655"/><text x="77.0485%" y="255.50"></text></g><g><title>do_iter_readv_writev (662 samples, 0.24%)</title><rect x="76.7974%" y="309" width="0.2376%" height="15" fill="rgb(222,33,0)" fg:x="213950" fg:w="662"/><text x="77.0474%" y="319.50"></text></g><g><title>sock_read_iter (661 samples, 0.24%)</title><rect x="76.7978%" y="293" width="0.2373%" height="15" fill="rgb(234,209,28)" fg:x="213951" fg:w="661"/><text x="77.0478%" y="303.50"></text></g><g><title>sock_recvmsg (661 samples, 0.24%)</title><rect x="76.7978%" y="277" width="0.2373%" height="15" fill="rgb(224,11,23)" fg:x="213951" fg:w="661"/><text x="77.0478%" y="287.50"></text></g><g><title>do_iter_read (670 samples, 0.24%)</title><rect x="76.7967%" y="325" width="0.2405%" height="15" fill="rgb(232,99,1)" fg:x="213948" fg:w="670"/><text x="77.0467%" y="335.50"></text></g><g><title>__x64_sys_readv (677 samples, 0.24%)</title><rect x="76.7953%" y="373" width="0.2430%" height="15" fill="rgb(237,95,45)" fg:x="213944" fg:w="677"/><text x="77.0453%" y="383.50"></text></g><g><title>do_readv (676 samples, 0.24%)</title><rect x="76.7956%" y="357" width="0.2427%" height="15" fill="rgb(208,109,11)" fg:x="213945" fg:w="676"/><text x="77.0456%" y="367.50"></text></g><g><title>vfs_readv (673 samples, 0.24%)</title><rect x="76.7967%" y="341" width="0.2416%" height="15" fill="rgb(216,190,48)" fg:x="213948" fg:w="673"/><text x="77.0467%" y="351.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (697 samples, 0.25%)</title><rect x="76.7888%" y="405" width="0.2502%" height="15" fill="rgb(251,171,36)" fg:x="213926" fg:w="697"/><text x="77.0388%" y="415.50"></text></g><g><title>do_syscall_64 (695 samples, 0.25%)</title><rect x="76.7895%" y="389" width="0.2495%" height="15" fill="rgb(230,62,22)" fg:x="213928" fg:w="695"/><text x="77.0395%" y="399.50"></text></g><g><title>mca_btl_tcp_frag_recv (719 samples, 0.26%)</title><rect x="76.7852%" y="437" width="0.2581%" height="15" fill="rgb(225,114,35)" fg:x="213916" fg:w="719"/><text x="77.0352%" y="447.50"></text></g><g><title>__GI___readv (716 samples, 0.26%)</title><rect x="76.7863%" y="421" width="0.2570%" height="15" fill="rgb(215,118,42)" fg:x="213919" fg:w="716"/><text x="77.0363%" y="431.50"></text></g><g><title>mca_btl_tcp_endpoint_recv_handler (729 samples, 0.26%)</title><rect x="76.7834%" y="453" width="0.2617%" height="15" fill="rgb(243,119,21)" fg:x="213911" fg:w="729"/><text x="77.0334%" y="463.50"></text></g><g><title>copy_user_enhanced_fast_string (76 samples, 0.03%)</title><rect x="77.0509%" y="197" width="0.0273%" height="15" fill="rgb(252,177,53)" fg:x="214656" fg:w="76"/><text x="77.3009%" y="207.50"></text></g><g><title>_copy_from_iter_full (78 samples, 0.03%)</title><rect x="77.0509%" y="213" width="0.0280%" height="15" fill="rgb(237,209,29)" fg:x="214656" fg:w="78"/><text x="77.3009%" y="223.50"></text></g><g><title>clear_page_erms (83 samples, 0.03%)</title><rect x="77.0799%" y="133" width="0.0298%" height="15" fill="rgb(212,65,23)" fg:x="214737" fg:w="83"/><text x="77.3299%" y="143.50"></text></g><g><title>sk_page_frag_refill (88 samples, 0.03%)</title><rect x="77.0789%" y="213" width="0.0316%" height="15" fill="rgb(230,222,46)" fg:x="214734" fg:w="88"/><text x="77.3289%" y="223.50"></text></g><g><title>skb_page_frag_refill (88 samples, 0.03%)</title><rect x="77.0789%" y="197" width="0.0316%" height="15" fill="rgb(215,135,32)" fg:x="214734" fg:w="88"/><text x="77.3289%" y="207.50"></text></g><g><title>alloc_pages_current (88 samples, 0.03%)</title><rect x="77.0789%" y="181" width="0.0316%" height="15" fill="rgb(246,101,22)" fg:x="214734" fg:w="88"/><text x="77.3289%" y="191.50"></text></g><g><title>__alloc_pages_nodemask (88 samples, 0.03%)</title><rect x="77.0789%" y="165" width="0.0316%" height="15" fill="rgb(206,107,13)" fg:x="214734" fg:w="88"/><text x="77.3289%" y="175.50"></text></g><g><title>get_page_from_freelist (87 samples, 0.03%)</title><rect x="77.0792%" y="149" width="0.0312%" height="15" fill="rgb(250,100,44)" fg:x="214735" fg:w="87"/><text x="77.3292%" y="159.50"></text></g><g><title>do_iter_readv_writev (185 samples, 0.07%)</title><rect x="77.0462%" y="309" width="0.0664%" height="15" fill="rgb(231,147,38)" fg:x="214643" fg:w="185"/><text x="77.2962%" y="319.50"></text></g><g><title>sock_write_iter (185 samples, 0.07%)</title><rect x="77.0462%" y="293" width="0.0664%" height="15" fill="rgb(229,8,40)" fg:x="214643" fg:w="185"/><text x="77.2962%" y="303.50"></text></g><g><title>sock_sendmsg (185 samples, 0.07%)</title><rect x="77.0462%" y="277" width="0.0664%" height="15" fill="rgb(221,135,30)" fg:x="214643" fg:w="185"/><text x="77.2962%" y="287.50"></text></g><g><title>inet_sendmsg (185 samples, 0.07%)</title><rect x="77.0462%" y="261" width="0.0664%" height="15" fill="rgb(249,193,18)" fg:x="214643" fg:w="185"/><text x="77.2962%" y="271.50"></text></g><g><title>tcp_sendmsg (185 samples, 0.07%)</title><rect x="77.0462%" y="245" width="0.0664%" height="15" fill="rgb(209,133,39)" fg:x="214643" fg:w="185"/><text x="77.2962%" y="255.50"></text></g><g><title>tcp_sendmsg_locked (183 samples, 0.07%)</title><rect x="77.0469%" y="229" width="0.0657%" height="15" fill="rgb(232,100,14)" fg:x="214645" fg:w="183"/><text x="77.2969%" y="239.50"></text></g><g><title>do_iter_write (187 samples, 0.07%)</title><rect x="77.0458%" y="325" width="0.0671%" height="15" fill="rgb(224,185,1)" fg:x="214642" fg:w="187"/><text x="77.2958%" y="335.50"></text></g><g><title>mca_btl_tcp_endpoint_send_handler (190 samples, 0.07%)</title><rect x="77.0451%" y="453" width="0.0682%" height="15" fill="rgb(223,139,8)" fg:x="214640" fg:w="190"/><text x="77.2951%" y="463.50"></text></g><g><title>mca_btl_tcp_frag_send (188 samples, 0.07%)</title><rect x="77.0458%" y="437" width="0.0675%" height="15" fill="rgb(232,213,38)" fg:x="214642" fg:w="188"/><text x="77.2958%" y="447.50"></text></g><g><title>__writev (188 samples, 0.07%)</title><rect x="77.0458%" y="421" width="0.0675%" height="15" fill="rgb(207,94,22)" fg:x="214642" fg:w="188"/><text x="77.2958%" y="431.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (188 samples, 0.07%)</title><rect x="77.0458%" y="405" width="0.0675%" height="15" fill="rgb(219,183,54)" fg:x="214642" fg:w="188"/><text x="77.2958%" y="415.50"></text></g><g><title>do_syscall_64 (188 samples, 0.07%)</title><rect x="77.0458%" y="389" width="0.0675%" height="15" fill="rgb(216,185,54)" fg:x="214642" fg:w="188"/><text x="77.2958%" y="399.50"></text></g><g><title>__x64_sys_writev (188 samples, 0.07%)</title><rect x="77.0458%" y="373" width="0.0675%" height="15" fill="rgb(254,217,39)" fg:x="214642" fg:w="188"/><text x="77.2958%" y="383.50"></text></g><g><title>do_writev (188 samples, 0.07%)</title><rect x="77.0458%" y="357" width="0.0675%" height="15" fill="rgb(240,178,23)" fg:x="214642" fg:w="188"/><text x="77.2958%" y="367.50"></text></g><g><title>vfs_writev (188 samples, 0.07%)</title><rect x="77.0458%" y="341" width="0.0675%" height="15" fill="rgb(218,11,47)" fg:x="214642" fg:w="188"/><text x="77.2958%" y="351.50"></text></g><g><title>event_reinit (923 samples, 0.33%)</title><rect x="76.7824%" y="469" width="0.3313%" height="15" fill="rgb(218,51,51)" fg:x="213908" fg:w="923"/><text x="77.0324%" y="479.50"></text></g><g><title>entry_SYSCALL_64 (144 samples, 0.05%)</title><rect x="77.1463%" y="437" width="0.0517%" height="15" fill="rgb(238,126,27)" fg:x="214922" fg:w="144"/><text x="77.3963%" y="447.50"></text></g><g><title>__fdget (95 samples, 0.03%)</title><rect x="77.3606%" y="389" width="0.0341%" height="15" fill="rgb(249,202,22)" fg:x="215519" fg:w="95"/><text x="77.6106%" y="399.50"></text></g><g><title>__x86_indirect_thunk_rax (55 samples, 0.02%)</title><rect x="77.3947%" y="389" width="0.0197%" height="15" fill="rgb(254,195,49)" fg:x="215614" fg:w="55"/><text x="77.6447%" y="399.50"></text></g><g><title>__fget_light (444 samples, 0.16%)</title><rect x="77.6022%" y="357" width="0.1594%" height="15" fill="rgb(208,123,14)" fg:x="216192" fg:w="444"/><text x="77.8522%" y="367.50"></text></g><g><title>__fdget (462 samples, 0.17%)</title><rect x="77.5965%" y="373" width="0.1658%" height="15" fill="rgb(224,200,8)" fg:x="216176" fg:w="462"/><text x="77.8465%" y="383.50"></text></g><g><title>__fget_light (37 samples, 0.01%)</title><rect x="77.7623%" y="373" width="0.0133%" height="15" fill="rgb(217,61,36)" fg:x="216638" fg:w="37"/><text x="78.0123%" y="383.50"></text></g><g><title>__x86_indirect_thunk_rax (75 samples, 0.03%)</title><rect x="77.7756%" y="373" width="0.0269%" height="15" fill="rgb(206,35,45)" fg:x="216675" fg:w="75"/><text x="78.0256%" y="383.50"></text></g><g><title>fput_many (77 samples, 0.03%)</title><rect x="77.8183%" y="373" width="0.0276%" height="15" fill="rgb(217,65,33)" fg:x="216794" fg:w="77"/><text x="78.0683%" y="383.50"></text></g><g><title>__x86_indirect_thunk_rax (52 samples, 0.02%)</title><rect x="77.9479%" y="357" width="0.0187%" height="15" fill="rgb(222,158,48)" fg:x="217155" fg:w="52"/><text x="78.1979%" y="367.50"></text></g><g><title>tcp_poll (904 samples, 0.32%)</title><rect x="77.9669%" y="357" width="0.3245%" height="15" fill="rgb(254,2,54)" fg:x="217208" fg:w="904"/><text x="78.2169%" y="367.50"></text></g><g><title>sock_poll (1,348 samples, 0.48%)</title><rect x="77.8520%" y="373" width="0.4839%" height="15" fill="rgb(250,143,38)" fg:x="216888" fg:w="1348"/><text x="78.1020%" y="383.50"></text></g><g><title>tcp_stream_memory_free (124 samples, 0.04%)</title><rect x="78.2914%" y="357" width="0.0445%" height="15" fill="rgb(248,25,0)" fg:x="218112" fg:w="124"/><text x="78.5414%" y="367.50"></text></g><g><title>do_sys_poll (2,642 samples, 0.95%)</title><rect x="77.4145%" y="389" width="0.9483%" height="15" fill="rgb(206,152,27)" fg:x="215669" fg:w="2642"/><text x="77.6645%" y="399.50"></text></g><g><title>tcp_poll (75 samples, 0.03%)</title><rect x="78.3359%" y="373" width="0.0269%" height="15" fill="rgb(240,77,30)" fg:x="218236" fg:w="75"/><text x="78.5859%" y="383.50"></text></g><g><title>fput (48 samples, 0.02%)</title><rect x="78.3635%" y="389" width="0.0172%" height="15" fill="rgb(231,5,3)" fg:x="218313" fg:w="48"/><text x="78.6135%" y="399.50"></text></g><g><title>__x64_sys_poll (2,924 samples, 1.05%)</title><rect x="77.3545%" y="405" width="1.0496%" height="15" fill="rgb(207,226,32)" fg:x="215502" fg:w="2924"/><text x="77.6045%" y="415.50"></text></g><g><title>sock_poll (48 samples, 0.02%)</title><rect x="78.3869%" y="389" width="0.0172%" height="15" fill="rgb(222,207,47)" fg:x="218378" fg:w="48"/><text x="78.6369%" y="399.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3,368 samples, 1.21%)</title><rect x="77.1980%" y="437" width="1.2089%" height="15" fill="rgb(229,115,45)" fg:x="215066" fg:w="3368"/><text x="77.4480%" y="447.50"></text></g><g><title>do_syscall_64 (3,337 samples, 1.20%)</title><rect x="77.2092%" y="421" width="1.1978%" height="15" fill="rgb(224,191,6)" fg:x="215097" fg:w="3337"/><text x="77.4592%" y="431.50"></text></g><g><title>__GI___poll (3,694 samples, 1.33%)</title><rect x="77.1252%" y="453" width="1.3260%" height="15" fill="rgb(230,227,24)" fg:x="214863" fg:w="3694"/><text x="77.3752%" y="463.50"></text></g><g><title>syscall_return_via_sysret (115 samples, 0.04%)</title><rect x="78.4098%" y="437" width="0.0413%" height="15" fill="rgb(228,80,19)" fg:x="218442" fg:w="115"/><text x="78.6598%" y="447.50"></text></g><g><title>event_strlcpy_ (3,759 samples, 1.35%)</title><rect x="77.1137%" y="469" width="1.3493%" height="15" fill="rgb(247,229,0)" fg:x="214831" fg:w="3759"/><text x="77.3637%" y="479.50"></text></g><g><title>event_base_loop (4,766 samples, 1.71%)</title><rect x="76.7533%" y="485" width="1.7108%" height="15" fill="rgb(237,194,15)" fg:x="213827" fg:w="4766"/><text x="77.0033%" y="495.50"></text></g><g><title>PMPI_Alltoallv (4,796 samples, 1.72%)</title><rect x="76.7429%" y="597" width="1.7215%" height="15" fill="rgb(219,203,20)" fg:x="213798" fg:w="4796"/><text x="76.9929%" y="607.50"></text></g><g><title>ompi_coll_tuned_alltoallv_intra_dec_fixed (4,796 samples, 1.72%)</title><rect x="76.7429%" y="581" width="1.7215%" height="15" fill="rgb(234,128,8)" fg:x="213798" fg:w="4796"/><text x="76.9929%" y="591.50"></text></g><g><title>ompi_coll_base_alltoallv_intra_basic_linear (4,796 samples, 1.72%)</title><rect x="76.7429%" y="565" width="1.7215%" height="15" fill="rgb(248,202,8)" fg:x="213798" fg:w="4796"/><text x="76.9929%" y="575.50"></text></g><g><title>ompi_request_default_wait_all (4,790 samples, 1.72%)</title><rect x="76.7450%" y="549" width="1.7194%" height="15" fill="rgb(206,104,37)" fg:x="213804" fg:w="4790"/><text x="76.9950%" y="559.50"></text></g><g><title>ompi_sync_wait_mt (4,790 samples, 1.72%)</title><rect x="76.7450%" y="533" width="1.7194%" height="15" fill="rgb(223,8,27)" fg:x="213804" fg:w="4790"/><text x="76.9950%" y="543.50"></text></g><g><title>opal_progress (4,788 samples, 1.72%)</title><rect x="76.7458%" y="517" width="1.7187%" height="15" fill="rgb(216,217,28)" fg:x="213806" fg:w="4788"/><text x="76.9958%" y="527.50"></text></g><g><title>opal_progress_events (4,777 samples, 1.71%)</title><rect x="76.7497%" y="501" width="1.7147%" height="15" fill="rgb(249,199,1)" fg:x="213817" fg:w="4777"/><text x="76.9997%" y="511.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::emplace_at&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;long&amp;&amp;&gt;, std::tuple&lt;Comm&amp;&amp;&gt; &gt; (336 samples, 0.12%)</title><rect x="78.4709%" y="485" width="0.1206%" height="15" fill="rgb(240,85,17)" fg:x="218612" fg:w="336"/><text x="78.7209%" y="495.50"></text></g><g><title>absl::container_internal::common_policy_traits&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, void&gt;::construct&lt;std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;long&amp;&amp;&gt;, std::tuple&lt;Comm&amp;&amp;&gt; &gt; (327 samples, 0.12%)</title><rect x="78.4741%" y="469" width="0.1174%" height="15" fill="rgb(206,108,45)" fg:x="218621" fg:w="327"/><text x="78.7241%" y="479.50"></text></g><g><title>absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;::construct&lt;std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;long&amp;&amp;&gt;, std::tuple&lt;Comm&amp;&amp;&gt; &gt; (327 samples, 0.12%)</title><rect x="78.4741%" y="453" width="0.1174%" height="15" fill="rgb(245,210,41)" fg:x="218621" fg:w="327"/><text x="78.7241%" y="463.50"></text></g><g><title>absl::container_internal::map_slot_policy&lt;long, Comm&gt;::construct&lt;std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;long&amp;&amp;&gt;, std::tuple&lt;Comm&amp;&amp;&gt; &gt; (327 samples, 0.12%)</title><rect x="78.4741%" y="437" width="0.1174%" height="15" fill="rgb(206,13,37)" fg:x="218621" fg:w="327"/><text x="78.7241%" y="447.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::construct&lt;std::pair&lt;long, Comm&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;long&amp;&amp;&gt;, std::tuple&lt;Comm&amp;&amp;&gt; &gt; (327 samples, 0.12%)</title><rect x="78.4741%" y="421" width="0.1174%" height="15" fill="rgb(250,61,18)" fg:x="218621" fg:w="327"/><text x="78.7241%" y="431.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::pair&lt;long const, Comm&gt; &gt;::construct&lt;std::pair&lt;long, Comm&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;long&amp;&amp;&gt;, std::tuple&lt;Comm&amp;&amp;&gt; &gt; (327 samples, 0.12%)</title><rect x="78.4741%" y="405" width="0.1174%" height="15" fill="rgb(235,172,48)" fg:x="218621" fg:w="327"/><text x="78.7241%" y="415.50"></text></g><g><title>std::pair&lt;long, Comm&gt;::pair&lt;long&amp;&amp;, Comm&amp;&amp;&gt; (327 samples, 0.12%)</title><rect x="78.4741%" y="389" width="0.1174%" height="15" fill="rgb(249,201,17)" fg:x="218621" fg:w="327"/><text x="78.7241%" y="399.50"></text></g><g><title>std::pair&lt;long, Comm&gt;::pair&lt;long&amp;&amp;, 0ul, Comm&amp;&amp;, 0ul&gt; (327 samples, 0.12%)</title><rect x="78.4741%" y="373" width="0.1174%" height="15" fill="rgb(219,208,6)" fg:x="218621" fg:w="327"/><text x="78.7241%" y="383.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::GroupSse2Impl (558 samples, 0.20%)</title><rect x="78.6435%" y="469" width="0.2003%" height="15" fill="rgb(248,31,23)" fg:x="219093" fg:w="558"/><text x="78.8935%" y="479.50"></text></g><g><title>_mm_loadu_si128 (558 samples, 0.20%)</title><rect x="78.6435%" y="453" width="0.2003%" height="15" fill="rgb(245,15,42)" fg:x="219093" fg:w="558"/><text x="78.8935%" y="463.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::Match (34 samples, 0.01%)</title><rect x="78.8463%" y="469" width="0.0122%" height="15" fill="rgb(222,217,39)" fg:x="219658" fg:w="34"/><text x="79.0963%" y="479.50"></text></g><g><title>absl::container_internal::probe (28 samples, 0.01%)</title><rect x="78.8585%" y="469" width="0.0101%" height="15" fill="rgb(210,219,27)" fg:x="219692" fg:w="28"/><text x="79.1085%" y="479.50"></text></g><g><title>absl::container_internal::IsEmpty (28 samples, 0.01%)</title><rect x="78.8952%" y="453" width="0.0101%" height="15" fill="rgb(252,166,36)" fg:x="219794" fg:w="28"/><text x="79.1452%" y="463.50"></text></g><g><title>absl::container_internal::SetCtrl (288 samples, 0.10%)</title><rect x="78.9052%" y="453" width="0.1034%" height="15" fill="rgb(245,132,34)" fg:x="219822" fg:w="288"/><text x="79.1552%" y="463.50"></text></g><g><title>absl::container_internal::SetCtrl (288 samples, 0.10%)</title><rect x="78.9052%" y="437" width="0.1034%" height="15" fill="rgb(236,54,3)" fg:x="219822" fg:w="288"/><text x="79.1552%" y="447.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::MaskEmptyOrDeleted (34 samples, 0.01%)</title><rect x="79.0136%" y="437" width="0.0122%" height="15" fill="rgb(241,173,43)" fg:x="220124" fg:w="34"/><text x="79.2636%" y="447.50"></text></g><g><title>absl::container_internal::_mm_cmpgt_epi8_fixed (28 samples, 0.01%)</title><rect x="79.0158%" y="421" width="0.0101%" height="15" fill="rgb(215,190,9)" fg:x="220130" fg:w="28"/><text x="79.2658%" y="431.50"></text></g><g><title>_mm_cmpgt_epi8 (28 samples, 0.01%)</title><rect x="79.0158%" y="405" width="0.0101%" height="15" fill="rgb(242,101,16)" fg:x="220130" fg:w="28"/><text x="79.2658%" y="415.50"></text></g><g><title>absl::container_internal::find_first_non_full&lt;void&gt; (77 samples, 0.03%)</title><rect x="79.0086%" y="453" width="0.0276%" height="15" fill="rgb(223,190,21)" fg:x="220110" fg:w="77"/><text x="79.2586%" y="463.50"></text></g><g><title>absl::container_internal::SetCtrl (58 samples, 0.02%)</title><rect x="79.0588%" y="421" width="0.0208%" height="15" fill="rgb(215,228,25)" fg:x="220250" fg:w="58"/><text x="79.3088%" y="431.50"></text></g><g><title>absl::container_internal::SetCtrl (58 samples, 0.02%)</title><rect x="79.0588%" y="405" width="0.0208%" height="15" fill="rgb(225,36,22)" fg:x="220250" fg:w="58"/><text x="79.3088%" y="415.50"></text></g><g><title>clear_page_erms (119 samples, 0.04%)</title><rect x="79.1199%" y="165" width="0.0427%" height="15" fill="rgb(251,106,46)" fg:x="220420" fg:w="119"/><text x="79.3699%" y="175.50"></text></g><g><title>__alloc_pages_nodemask (139 samples, 0.05%)</title><rect x="79.1159%" y="197" width="0.0499%" height="15" fill="rgb(208,90,1)" fg:x="220409" fg:w="139"/><text x="79.3659%" y="207.50"></text></g><g><title>get_page_from_freelist (134 samples, 0.05%)</title><rect x="79.1177%" y="181" width="0.0481%" height="15" fill="rgb(243,10,4)" fg:x="220414" fg:w="134"/><text x="79.3677%" y="191.50"></text></g><g><title>alloc_pages_vma (140 samples, 0.05%)</title><rect x="79.1159%" y="213" width="0.0503%" height="15" fill="rgb(212,137,27)" fg:x="220409" fg:w="140"/><text x="79.3659%" y="223.50"></text></g><g><title>mem_cgroup_throttle_swaprate (34 samples, 0.01%)</title><rect x="79.1762%" y="197" width="0.0122%" height="15" fill="rgb(231,220,49)" fg:x="220577" fg:w="34"/><text x="79.4262%" y="207.50"></text></g><g><title>mem_cgroup_try_charge (53 samples, 0.02%)</title><rect x="79.1884%" y="197" width="0.0190%" height="15" fill="rgb(237,96,20)" fg:x="220611" fg:w="53"/><text x="79.4384%" y="207.50"></text></g><g><title>mem_cgroup_try_charge_delay (94 samples, 0.03%)</title><rect x="79.1741%" y="213" width="0.0337%" height="15" fill="rgb(239,229,30)" fg:x="220571" fg:w="94"/><text x="79.4241%" y="223.50"></text></g><g><title>do_anonymous_page (272 samples, 0.10%)</title><rect x="79.1116%" y="229" width="0.0976%" height="15" fill="rgb(219,65,33)" fg:x="220397" fg:w="272"/><text x="79.3616%" y="239.50"></text></g><g><title>handle_mm_fault (288 samples, 0.10%)</title><rect x="79.1066%" y="261" width="0.1034%" height="15" fill="rgb(243,134,7)" fg:x="220383" fg:w="288"/><text x="79.3566%" y="271.50"></text></g><g><title>__handle_mm_fault (285 samples, 0.10%)</title><rect x="79.1076%" y="245" width="0.1023%" height="15" fill="rgb(216,177,54)" fg:x="220386" fg:w="285"/><text x="79.3576%" y="255.50"></text></g><g><title>do_user_addr_fault (295 samples, 0.11%)</title><rect x="79.1044%" y="277" width="0.1059%" height="15" fill="rgb(211,160,20)" fg:x="220377" fg:w="295"/><text x="79.3544%" y="287.50"></text></g><g><title>__do_page_fault (299 samples, 0.11%)</title><rect x="79.1033%" y="293" width="0.1073%" height="15" fill="rgb(239,85,39)" fg:x="220374" fg:w="299"/><text x="79.3533%" y="303.50"></text></g><g><title>page_fault (305 samples, 0.11%)</title><rect x="79.1015%" y="325" width="0.1095%" height="15" fill="rgb(232,125,22)" fg:x="220369" fg:w="305"/><text x="79.3515%" y="335.50"></text></g><g><title>do_page_fault (301 samples, 0.11%)</title><rect x="79.1030%" y="309" width="0.1080%" height="15" fill="rgb(244,57,34)" fg:x="220373" fg:w="301"/><text x="79.3530%" y="319.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (73 samples, 0.03%)</title><rect x="79.2110%" y="325" width="0.0262%" height="15" fill="rgb(214,203,32)" fg:x="220674" fg:w="73"/><text x="79.4610%" y="335.50"></text></g><g><title>prepare_exit_to_usermode (45 samples, 0.02%)</title><rect x="79.2211%" y="309" width="0.0162%" height="15" fill="rgb(207,58,43)" fg:x="220702" fg:w="45"/><text x="79.4711%" y="319.50"></text></g><g><title>absl::container_internal::common_policy_traits&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, void&gt;::transfer&lt;std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt; (442 samples, 0.16%)</title><rect x="79.0797%" y="421" width="0.1587%" height="15" fill="rgb(215,193,15)" fg:x="220308" fg:w="442"/><text x="79.3297%" y="431.50"></text></g><g><title>absl::container_internal::common_policy_traits&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, void&gt;::transfer_impl&lt;std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt; &gt; (442 samples, 0.16%)</title><rect x="79.0797%" y="405" width="0.1587%" height="15" fill="rgb(232,15,44)" fg:x="220308" fg:w="442"/><text x="79.3297%" y="415.50"></text></g><g><title>absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;::transfer&lt;std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt; (442 samples, 0.16%)</title><rect x="79.0797%" y="389" width="0.1587%" height="15" fill="rgb(212,3,48)" fg:x="220308" fg:w="442"/><text x="79.3297%" y="399.50"></text></g><g><title>absl::container_internal::map_slot_policy&lt;long, Comm&gt;::transfer&lt;std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt; (442 samples, 0.16%)</title><rect x="79.0797%" y="373" width="0.1587%" height="15" fill="rgb(218,128,7)" fg:x="220308" fg:w="442"/><text x="79.3297%" y="383.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::construct&lt;std::pair&lt;long, Comm&gt;, std::pair&lt;long, Comm&gt; &gt; (442 samples, 0.16%)</title><rect x="79.0797%" y="357" width="0.1587%" height="15" fill="rgb(226,216,39)" fg:x="220308" fg:w="442"/><text x="79.3297%" y="367.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::pair&lt;long const, Comm&gt; &gt;::construct&lt;std::pair&lt;long, Comm&gt;, std::pair&lt;long, Comm&gt; &gt; (442 samples, 0.16%)</title><rect x="79.0797%" y="341" width="0.1587%" height="15" fill="rgb(243,47,51)" fg:x="220308" fg:w="442"/><text x="79.3297%" y="351.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::MaskEmptyOrDeleted (85 samples, 0.03%)</title><rect x="79.2397%" y="405" width="0.0305%" height="15" fill="rgb(241,183,40)" fg:x="220754" fg:w="85"/><text x="79.4897%" y="415.50"></text></g><g><title>absl::container_internal::_mm_cmpgt_epi8_fixed (68 samples, 0.02%)</title><rect x="79.2458%" y="389" width="0.0244%" height="15" fill="rgb(231,217,32)" fg:x="220771" fg:w="68"/><text x="79.4958%" y="399.50"></text></g><g><title>_mm_cmpgt_epi8 (68 samples, 0.02%)</title><rect x="79.2458%" y="373" width="0.0244%" height="15" fill="rgb(229,61,38)" fg:x="220771" fg:w="68"/><text x="79.4958%" y="383.50"></text></g><g><title>absl::container_internal::find_first_non_full&lt;void&gt; (131 samples, 0.05%)</title><rect x="79.2383%" y="421" width="0.0470%" height="15" fill="rgb(225,210,5)" fg:x="220750" fg:w="131"/><text x="79.4883%" y="431.50"></text></g><g><title>absl::container_internal::hash_policy_traits&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, void&gt;::apply&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::HashElement, std::pair&lt;long const, Comm&gt;&amp;, absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt; &gt; (42 samples, 0.02%)</title><rect x="79.2853%" y="421" width="0.0151%" height="15" fill="rgb(231,79,45)" fg:x="220881" fg:w="42"/><text x="79.5353%" y="431.50"></text></g><g><title>absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;::apply&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::HashElement, std::pair&lt;long const, Comm&gt;&amp;&gt; (42 samples, 0.02%)</title><rect x="79.2853%" y="405" width="0.0151%" height="15" fill="rgb(224,100,7)" fg:x="220881" fg:w="42"/><text x="79.5353%" y="415.50"></text></g><g><title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::HashElement, std::pair&lt;long const, Comm&gt;&amp;&gt; (42 samples, 0.02%)</title><rect x="79.2853%" y="389" width="0.0151%" height="15" fill="rgb(241,198,18)" fg:x="220881" fg:w="42"/><text x="79.5353%" y="399.50"></text></g><g><title>absl::container_internal::memory_internal::DecomposePairImpl&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::HashElement, long const&amp;, std::tuple&lt;Comm const&amp;&gt; &gt; (42 samples, 0.02%)</title><rect x="79.2853%" y="373" width="0.0151%" height="15" fill="rgb(252,97,53)" fg:x="220881" fg:w="42"/><text x="79.5353%" y="383.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::HashElement::operator (42 samples, 0.02%)</title><rect x="79.2853%" y="357" width="0.0151%" height="15" fill="rgb(220,88,7)" fg:x="220881" fg:w="42"/><text x="79.5353%" y="367.50"></text></g><g><title>absl::hash_internal::HashImpl&lt;long&gt;::operator (42 samples, 0.02%)</title><rect x="79.2853%" y="341" width="0.0151%" height="15" fill="rgb(213,176,14)" fg:x="220881" fg:w="42"/><text x="79.5353%" y="351.50"></text></g><g><title>absl::hash_internal::MixingHashState::hash&lt;long, 0&gt; (42 samples, 0.02%)</title><rect x="79.2853%" y="325" width="0.0151%" height="15" fill="rgb(246,73,7)" fg:x="220881" fg:w="42"/><text x="79.5353%" y="335.50"></text></g><g><title>absl::hash_internal::MixingHashState::Mix (42 samples, 0.02%)</title><rect x="79.2853%" y="309" width="0.0151%" height="15" fill="rgb(245,64,36)" fg:x="220881" fg:w="42"/><text x="79.5353%" y="319.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::prepare_insert (1,201 samples, 0.43%)</title><rect x="78.8772%" y="469" width="0.4311%" height="15" fill="rgb(245,80,10)" fg:x="219744" fg:w="1201"/><text x="79.1272%" y="479.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::rehash_and_grow_if_necessary (758 samples, 0.27%)</title><rect x="79.0362%" y="453" width="0.2721%" height="15" fill="rgb(232,107,50)" fg:x="220187" fg:w="758"/><text x="79.2862%" y="463.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::resize (758 samples, 0.27%)</title><rect x="79.0362%" y="437" width="0.2721%" height="15" fill="rgb(253,3,0)" fg:x="220187" fg:w="758"/><text x="79.2862%" y="447.50"></text></g><g><title>absl::hash_internal::HashImpl&lt;long&gt;::operator (32 samples, 0.01%)</title><rect x="79.3083%" y="469" width="0.0115%" height="15" fill="rgb(212,99,53)" fg:x="220945" fg:w="32"/><text x="79.5583%" y="479.50"></text></g><g><title>absl::hash_internal::MixingHashState::hash&lt;long, 0&gt; (32 samples, 0.01%)</title><rect x="79.3083%" y="453" width="0.0115%" height="15" fill="rgb(249,111,54)" fg:x="220945" fg:w="32"/><text x="79.5583%" y="463.50"></text></g><g><title>absl::hash_internal::MixingHashState::Mix (32 samples, 0.01%)</title><rect x="79.3083%" y="437" width="0.0115%" height="15" fill="rgb(249,55,30)" fg:x="220945" fg:w="32"/><text x="79.5583%" y="447.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::insert (2,367 samples, 0.85%)</title><rect x="78.4709%" y="597" width="0.8496%" height="15" fill="rgb(237,47,42)" fg:x="218612" fg:w="2367"/><text x="78.7209%" y="607.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::emplace&lt;std::pair&lt;long, Comm&gt;, 0&gt; (2,367 samples, 0.85%)</title><rect x="78.4709%" y="581" width="0.8496%" height="15" fill="rgb(211,20,18)" fg:x="218612" fg:w="2367"/><text x="78.7209%" y="591.50"></text></g><g><title>absl::container_internal::hash_policy_traits&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, void&gt;::apply&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::EmplaceDecomposable, std::pair&lt;long, Comm&gt;, absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt; &gt; (2,367 samples, 0.85%)</title><rect x="78.4709%" y="565" width="0.8496%" height="15" fill="rgb(231,203,46)" fg:x="218612" fg:w="2367"/><text x="78.7209%" y="575.50"></text></g><g><title>absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;::apply&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::EmplaceDecomposable, std::pair&lt;long, Comm&gt; &gt; (2,367 samples, 0.85%)</title><rect x="78.4709%" y="549" width="0.8496%" height="15" fill="rgb(237,142,3)" fg:x="218612" fg:w="2367"/><text x="78.7209%" y="559.50"></text></g><g><title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::EmplaceDecomposable, std::pair&lt;long, Comm&gt; &gt; (2,367 samples, 0.85%)</title><rect x="78.4709%" y="533" width="0.8496%" height="15" fill="rgb(241,107,1)" fg:x="218612" fg:w="2367"/><text x="78.7209%" y="543.50"></text></g><g><title>absl::container_internal::memory_internal::DecomposePairImpl&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::EmplaceDecomposable, long&amp;&amp;, std::tuple&lt;Comm&amp;&amp;&gt; &gt; (2,367 samples, 0.85%)</title><rect x="78.4709%" y="517" width="0.8496%" height="15" fill="rgb(229,83,13)" fg:x="218612" fg:w="2367"/><text x="78.7209%" y="527.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::EmplaceDecomposable::operator (2,367 samples, 0.85%)</title><rect x="78.4709%" y="501" width="0.8496%" height="15" fill="rgb(241,91,40)" fg:x="218612" fg:w="2367"/><text x="78.7209%" y="511.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, Comm&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, Comm&gt; &gt; &gt;::find_or_prepare_insert&lt;long&gt; (2,031 samples, 0.73%)</title><rect x="78.5915%" y="485" width="0.7290%" height="15" fill="rgb(225,3,45)" fg:x="218948" fg:w="2031"/><text x="78.8415%" y="495.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::clear (74 samples, 0.03%)</title><rect x="79.3205%" y="597" width="0.0266%" height="15" fill="rgb(244,223,14)" fg:x="220979" fg:w="74"/><text x="79.5705%" y="607.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::destroy_slots (74 samples, 0.03%)</title><rect x="79.3205%" y="581" width="0.0266%" height="15" fill="rgb(224,124,37)" fg:x="220979" fg:w="74"/><text x="79.5705%" y="591.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::destroy_slots (74 samples, 0.03%)</title><rect x="79.3205%" y="565" width="0.0266%" height="15" fill="rgb(251,171,30)" fg:x="220979" fg:w="74"/><text x="79.5705%" y="575.50"></text></g><g><title>absl::container_internal::Deallocate&lt;8ul, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt; (74 samples, 0.03%)</title><rect x="79.3205%" y="549" width="0.0266%" height="15" fill="rgb(236,46,54)" fg:x="220979" fg:w="74"/><text x="79.5705%" y="559.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;absl::container_internal::AlignedType&lt;8ul&gt; &gt; &gt;::deallocate (74 samples, 0.03%)</title><rect x="79.3205%" y="533" width="0.0266%" height="15" fill="rgb(245,213,5)" fg:x="220979" fg:w="74"/><text x="79.5705%" y="543.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;absl::container_internal::AlignedType&lt;8ul&gt; &gt;::deallocate (74 samples, 0.03%)</title><rect x="79.3205%" y="517" width="0.0266%" height="15" fill="rgb(230,144,27)" fg:x="220979" fg:w="74"/><text x="79.5705%" y="527.50"></text></g><g><title>__GI_munmap (74 samples, 0.03%)</title><rect x="79.3205%" y="501" width="0.0266%" height="15" fill="rgb(220,86,6)" fg:x="220979" fg:w="74"/><text x="79.5705%" y="511.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (74 samples, 0.03%)</title><rect x="79.3205%" y="485" width="0.0266%" height="15" fill="rgb(240,20,13)" fg:x="220979" fg:w="74"/><text x="79.5705%" y="495.50"></text></g><g><title>do_syscall_64 (74 samples, 0.03%)</title><rect x="79.3205%" y="469" width="0.0266%" height="15" fill="rgb(217,89,34)" fg:x="220979" fg:w="74"/><text x="79.5705%" y="479.50"></text></g><g><title>__x64_sys_munmap (74 samples, 0.03%)</title><rect x="79.3205%" y="453" width="0.0266%" height="15" fill="rgb(229,13,5)" fg:x="220979" fg:w="74"/><text x="79.5705%" y="463.50"></text></g><g><title>__vm_munmap (74 samples, 0.03%)</title><rect x="79.3205%" y="437" width="0.0266%" height="15" fill="rgb(244,67,35)" fg:x="220979" fg:w="74"/><text x="79.5705%" y="447.50"></text></g><g><title>__do_munmap (74 samples, 0.03%)</title><rect x="79.3205%" y="421" width="0.0266%" height="15" fill="rgb(221,40,2)" fg:x="220979" fg:w="74"/><text x="79.5705%" y="431.50"></text></g><g><title>unmap_region (74 samples, 0.03%)</title><rect x="79.3205%" y="405" width="0.0266%" height="15" fill="rgb(237,157,21)" fg:x="220979" fg:w="74"/><text x="79.5705%" y="415.50"></text></g><g><title>unmap_vmas (74 samples, 0.03%)</title><rect x="79.3205%" y="389" width="0.0266%" height="15" fill="rgb(222,94,11)" fg:x="220979" fg:w="74"/><text x="79.5705%" y="399.50"></text></g><g><title>unmap_single_vma (74 samples, 0.03%)</title><rect x="79.3205%" y="373" width="0.0266%" height="15" fill="rgb(249,113,6)" fg:x="220979" fg:w="74"/><text x="79.5705%" y="383.50"></text></g><g><title>unmap_page_range (74 samples, 0.03%)</title><rect x="79.3205%" y="357" width="0.0266%" height="15" fill="rgb(238,137,36)" fg:x="220979" fg:w="74"/><text x="79.5705%" y="367.50"></text></g><g><title>zap_pte_range.isra.0 (73 samples, 0.03%)</title><rect x="79.3209%" y="341" width="0.0262%" height="15" fill="rgb(210,102,26)" fg:x="220980" fg:w="73"/><text x="79.5709%" y="351.50"></text></g><g><title>tlb_flush_mmu (50 samples, 0.02%)</title><rect x="79.3291%" y="325" width="0.0179%" height="15" fill="rgb(218,30,30)" fg:x="221003" fg:w="50"/><text x="79.5791%" y="335.50"></text></g><g><title>free_pages_and_swap_cache (50 samples, 0.02%)</title><rect x="79.3291%" y="309" width="0.0179%" height="15" fill="rgb(214,67,26)" fg:x="221003" fg:w="50"/><text x="79.5791%" y="319.50"></text></g><g><title>release_pages (46 samples, 0.02%)</title><rect x="79.3306%" y="293" width="0.0165%" height="15" fill="rgb(251,9,53)" fg:x="221007" fg:w="46"/><text x="79.5806%" y="303.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::emplace_at&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;long&amp;&amp;&gt;, std::tuple&lt;long&amp;&amp;&gt; &gt; (764 samples, 0.27%)</title><rect x="79.3471%" y="485" width="0.2742%" height="15" fill="rgb(228,204,25)" fg:x="221053" fg:w="764"/><text x="79.5971%" y="495.50"></text></g><g><title>absl::container_internal::common_policy_traits&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, void&gt;::construct&lt;std::allocator&lt;std::pair&lt;long const, long&gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;long&amp;&amp;&gt;, std::tuple&lt;long&amp;&amp;&gt; &gt; (764 samples, 0.27%)</title><rect x="79.3471%" y="469" width="0.2742%" height="15" fill="rgb(207,153,8)" fg:x="221053" fg:w="764"/><text x="79.5971%" y="479.50"></text></g><g><title>absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;::construct&lt;std::allocator&lt;std::pair&lt;long const, long&gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;long&amp;&amp;&gt;, std::tuple&lt;long&amp;&amp;&gt; &gt; (764 samples, 0.27%)</title><rect x="79.3471%" y="453" width="0.2742%" height="15" fill="rgb(242,9,16)" fg:x="221053" fg:w="764"/><text x="79.5971%" y="463.50"></text></g><g><title>absl::container_internal::map_slot_policy&lt;long, long&gt;::construct&lt;std::allocator&lt;std::pair&lt;long const, long&gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;long&amp;&amp;&gt;, std::tuple&lt;long&amp;&amp;&gt; &gt; (764 samples, 0.27%)</title><rect x="79.3471%" y="437" width="0.2742%" height="15" fill="rgb(217,211,10)" fg:x="221053" fg:w="764"/><text x="79.5971%" y="447.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::construct&lt;std::pair&lt;long, long&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;long&amp;&amp;&gt;, std::tuple&lt;long&amp;&amp;&gt; &gt; (764 samples, 0.27%)</title><rect x="79.3471%" y="421" width="0.2742%" height="15" fill="rgb(219,228,52)" fg:x="221053" fg:w="764"/><text x="79.5971%" y="431.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::pair&lt;long const, long&gt; &gt;::construct&lt;std::pair&lt;long, long&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;long&amp;&amp;&gt;, std::tuple&lt;long&amp;&amp;&gt; &gt; (764 samples, 0.27%)</title><rect x="79.3471%" y="405" width="0.2742%" height="15" fill="rgb(231,92,29)" fg:x="221053" fg:w="764"/><text x="79.5971%" y="415.50"></text></g><g><title>std::pair&lt;long, long&gt;::pair&lt;long&amp;&amp;, long&amp;&amp;&gt; (764 samples, 0.27%)</title><rect x="79.3471%" y="389" width="0.2742%" height="15" fill="rgb(232,8,23)" fg:x="221053" fg:w="764"/><text x="79.5971%" y="399.50"></text></g><g><title>std::pair&lt;long, long&gt;::pair&lt;long&amp;&amp;, 0ul, long&amp;&amp;, 0ul&gt; (764 samples, 0.27%)</title><rect x="79.3471%" y="373" width="0.2742%" height="15" fill="rgb(216,211,34)" fg:x="221053" fg:w="764"/><text x="79.5971%" y="383.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::GroupSse2Impl (3,096 samples, 1.11%)</title><rect x="79.8981%" y="469" width="1.1113%" height="15" fill="rgb(236,151,0)" fg:x="222588" fg:w="3096"/><text x="80.1481%" y="479.50"></text></g><g><title>_mm_loadu_si128 (3,096 samples, 1.11%)</title><rect x="79.8981%" y="453" width="1.1113%" height="15" fill="rgb(209,168,3)" fg:x="222588" fg:w="3096"/><text x="80.1481%" y="463.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::MaskEmpty (28 samples, 0.01%)</title><rect x="81.0094%" y="469" width="0.0101%" height="15" fill="rgb(208,129,28)" fg:x="225684" fg:w="28"/><text x="81.2594%" y="479.50"></text></g><g><title>_mm_cmpeq_epi8 (61 samples, 0.02%)</title><rect x="81.0194%" y="453" width="0.0219%" height="15" fill="rgb(229,78,22)" fg:x="225712" fg:w="61"/><text x="81.2694%" y="463.50"></text></g><g><title>_mm_movemask_epi8 (66 samples, 0.02%)</title><rect x="81.0413%" y="453" width="0.0237%" height="15" fill="rgb(228,187,13)" fg:x="225773" fg:w="66"/><text x="81.2913%" y="463.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::Match (187 samples, 0.07%)</title><rect x="81.0194%" y="469" width="0.0671%" height="15" fill="rgb(240,119,24)" fg:x="225712" fg:w="187"/><text x="81.2694%" y="479.50"></text></g><g><title>_mm_set1_epi8 (60 samples, 0.02%)</title><rect x="81.0650%" y="453" width="0.0215%" height="15" fill="rgb(209,194,42)" fg:x="225839" fg:w="60"/><text x="81.3150%" y="463.50"></text></g><g><title>_mm_set_epi8 (60 samples, 0.02%)</title><rect x="81.0650%" y="437" width="0.0215%" height="15" fill="rgb(247,200,46)" fg:x="225839" fg:w="60"/><text x="81.3150%" y="447.50"></text></g><g><title>absl::container_internal::H2 (34 samples, 0.01%)</title><rect x="81.0865%" y="469" width="0.0122%" height="15" fill="rgb(218,76,16)" fg:x="225899" fg:w="34"/><text x="81.3365%" y="479.50"></text></g><g><title>absl::container_internal::H1 (54 samples, 0.02%)</title><rect x="81.1009%" y="453" width="0.0194%" height="15" fill="rgb(225,21,48)" fg:x="225939" fg:w="54"/><text x="81.3509%" y="463.50"></text></g><g><title>absl::container_internal::probe (60 samples, 0.02%)</title><rect x="81.1009%" y="469" width="0.0215%" height="15" fill="rgb(239,223,50)" fg:x="225939" fg:w="60"/><text x="81.3509%" y="479.50"></text></g><g><title>absl::container_internal::probe_seq&lt;16ul&gt;::next (28 samples, 0.01%)</title><rect x="81.1224%" y="469" width="0.0101%" height="15" fill="rgb(244,45,21)" fg:x="225999" fg:w="28"/><text x="81.3724%" y="479.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::prefetch_heap_block (56 samples, 0.02%)</title><rect x="81.1346%" y="469" width="0.0201%" height="15" fill="rgb(232,33,43)" fg:x="226033" fg:w="56"/><text x="81.3846%" y="479.50"></text></g><g><title>absl::base_internal::PrefetchT2 (56 samples, 0.02%)</title><rect x="81.1346%" y="453" width="0.0201%" height="15" fill="rgb(209,8,3)" fg:x="226033" fg:w="56"/><text x="81.3846%" y="463.50"></text></g><g><title>absl::container_internal::IsEmpty (182 samples, 0.07%)</title><rect x="81.2384%" y="453" width="0.0653%" height="15" fill="rgb(214,25,53)" fg:x="226322" fg:w="182"/><text x="81.4884%" y="463.50"></text></g><g><title>absl::container_internal::SetCtrl (65 samples, 0.02%)</title><rect x="81.3037%" y="453" width="0.0233%" height="15" fill="rgb(254,186,54)" fg:x="226504" fg:w="65"/><text x="81.5537%" y="463.50"></text></g><g><title>absl::container_internal::SetCtrl (65 samples, 0.02%)</title><rect x="81.3037%" y="437" width="0.0233%" height="15" fill="rgb(208,174,49)" fg:x="226504" fg:w="65"/><text x="81.5537%" y="447.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::MaskEmptyOrDeleted (49 samples, 0.02%)</title><rect x="81.3532%" y="437" width="0.0176%" height="15" fill="rgb(233,191,51)" fg:x="226642" fg:w="49"/><text x="81.6032%" y="447.50"></text></g><g><title>absl::container_internal::_mm_cmpgt_epi8_fixed (31 samples, 0.01%)</title><rect x="81.3597%" y="421" width="0.0111%" height="15" fill="rgb(222,134,10)" fg:x="226660" fg:w="31"/><text x="81.6097%" y="431.50"></text></g><g><title>_mm_cmpgt_epi8 (31 samples, 0.01%)</title><rect x="81.3597%" y="405" width="0.0111%" height="15" fill="rgb(230,226,20)" fg:x="226660" fg:w="31"/><text x="81.6097%" y="415.50"></text></g><g><title>absl::container_internal::H1 (63 samples, 0.02%)</title><rect x="81.3737%" y="421" width="0.0226%" height="15" fill="rgb(251,111,25)" fg:x="226699" fg:w="63"/><text x="81.6237%" y="431.50"></text></g><g><title>absl::container_internal::probe (132 samples, 0.05%)</title><rect x="81.3737%" y="437" width="0.0474%" height="15" fill="rgb(224,40,46)" fg:x="226699" fg:w="132"/><text x="81.6237%" y="447.50"></text></g><g><title>absl::container_internal::probe_seq&lt;16ul&gt;::probe_seq (69 samples, 0.02%)</title><rect x="81.3963%" y="421" width="0.0248%" height="15" fill="rgb(236,108,47)" fg:x="226762" fg:w="69"/><text x="81.6463%" y="431.50"></text></g><g><title>absl::container_internal::find_first_non_full&lt;void&gt; (360 samples, 0.13%)</title><rect x="81.3270%" y="453" width="0.1292%" height="15" fill="rgb(234,93,0)" fg:x="226569" fg:w="360"/><text x="81.5770%" y="463.50"></text></g><g><title>absl::container_internal::probe_seq&lt;16ul&gt;::offset (94 samples, 0.03%)</title><rect x="81.4225%" y="437" width="0.0337%" height="15" fill="rgb(224,213,32)" fg:x="226835" fg:w="94"/><text x="81.6725%" y="447.50"></text></g><g><title>absl::container_internal::SetCtrl (296 samples, 0.11%)</title><rect x="81.5665%" y="421" width="0.1062%" height="15" fill="rgb(251,11,48)" fg:x="227236" fg:w="296"/><text x="81.8165%" y="431.50"></text></g><g><title>absl::container_internal::SetCtrl (296 samples, 0.11%)</title><rect x="81.5665%" y="405" width="0.1062%" height="15" fill="rgb(236,173,5)" fg:x="227236" fg:w="296"/><text x="81.8165%" y="415.50"></text></g><g><title>error_entry (62 samples, 0.02%)</title><rect x="81.7079%" y="325" width="0.0223%" height="15" fill="rgb(230,95,12)" fg:x="227630" fg:w="62"/><text x="81.9579%" y="335.50"></text></g><g><title>clear_page_erms (316 samples, 0.11%)</title><rect x="81.7829%" y="165" width="0.1134%" height="15" fill="rgb(232,209,1)" fg:x="227839" fg:w="316"/><text x="82.0329%" y="175.50"></text></g><g><title>__alloc_pages_nodemask (385 samples, 0.14%)</title><rect x="81.7747%" y="197" width="0.1382%" height="15" fill="rgb(232,6,1)" fg:x="227816" fg:w="385"/><text x="82.0247%" y="207.50"></text></g><g><title>get_page_from_freelist (372 samples, 0.13%)</title><rect x="81.7793%" y="181" width="0.1335%" height="15" fill="rgb(210,224,50)" fg:x="227829" fg:w="372"/><text x="82.0293%" y="191.50"></text></g><g><title>rmqueue (34 samples, 0.01%)</title><rect x="81.9006%" y="165" width="0.0122%" height="15" fill="rgb(228,127,35)" fg:x="228167" fg:w="34"/><text x="82.1506%" y="175.50"></text></g><g><title>alloc_pages_vma (388 samples, 0.14%)</title><rect x="81.7739%" y="213" width="0.1393%" height="15" fill="rgb(245,102,45)" fg:x="227814" fg:w="388"/><text x="82.0239%" y="223.50"></text></g><g><title>__pagevec_lru_add_fn (36 samples, 0.01%)</title><rect x="81.9150%" y="165" width="0.0129%" height="15" fill="rgb(214,1,49)" fg:x="228207" fg:w="36"/><text x="82.1650%" y="175.50"></text></g><g><title>lru_cache_add_active_or_unevictable (46 samples, 0.02%)</title><rect x="81.9132%" y="213" width="0.0165%" height="15" fill="rgb(226,163,40)" fg:x="228202" fg:w="46"/><text x="82.1632%" y="223.50"></text></g><g><title>__lru_cache_add (45 samples, 0.02%)</title><rect x="81.9136%" y="197" width="0.0162%" height="15" fill="rgb(239,212,28)" fg:x="228203" fg:w="45"/><text x="82.1636%" y="207.50"></text></g><g><title>pagevec_lru_move_fn (43 samples, 0.02%)</title><rect x="81.9143%" y="181" width="0.0154%" height="15" fill="rgb(220,20,13)" fg:x="228205" fg:w="43"/><text x="82.1643%" y="191.50"></text></g><g><title>mem_cgroup_throttle_swaprate (83 samples, 0.03%)</title><rect x="81.9337%" y="197" width="0.0298%" height="15" fill="rgb(210,164,35)" fg:x="228259" fg:w="83"/><text x="82.1837%" y="207.50"></text></g><g><title>mem_cgroup_try_charge_delay (209 samples, 0.08%)</title><rect x="81.9326%" y="213" width="0.0750%" height="15" fill="rgb(248,109,41)" fg:x="228256" fg:w="209"/><text x="82.1826%" y="223.50"></text></g><g><title>mem_cgroup_try_charge (123 samples, 0.04%)</title><rect x="81.9635%" y="197" width="0.0442%" height="15" fill="rgb(238,23,50)" fg:x="228342" fg:w="123"/><text x="82.2135%" y="207.50"></text></g><g><title>try_charge (60 samples, 0.02%)</title><rect x="81.9861%" y="181" width="0.0215%" height="15" fill="rgb(211,48,49)" fg:x="228405" fg:w="60"/><text x="82.2361%" y="191.50"></text></g><g><title>do_anonymous_page (693 samples, 0.25%)</title><rect x="81.7632%" y="229" width="0.2488%" height="15" fill="rgb(223,36,21)" fg:x="227784" fg:w="693"/><text x="82.0132%" y="239.50"></text></g><g><title>__handle_mm_fault (743 samples, 0.27%)</title><rect x="81.7520%" y="245" width="0.2667%" height="15" fill="rgb(207,123,46)" fg:x="227753" fg:w="743"/><text x="82.0020%" y="255.50"></text></g><g><title>handle_mm_fault (759 samples, 0.27%)</title><rect x="81.7467%" y="261" width="0.2724%" height="15" fill="rgb(240,218,32)" fg:x="227738" fg:w="759"/><text x="81.9967%" y="271.50"></text></g><g><title>do_user_addr_fault (789 samples, 0.28%)</title><rect x="81.7366%" y="277" width="0.2832%" height="15" fill="rgb(252,5,43)" fg:x="227710" fg:w="789"/><text x="81.9866%" y="287.50"></text></g><g><title>__do_page_fault (805 samples, 0.29%)</title><rect x="81.7334%" y="293" width="0.2890%" height="15" fill="rgb(252,84,19)" fg:x="227701" fg:w="805"/><text x="81.9834%" y="303.50"></text></g><g><title>page_fault (815 samples, 0.29%)</title><rect x="81.7301%" y="325" width="0.2925%" height="15" fill="rgb(243,152,39)" fg:x="227692" fg:w="815"/><text x="81.9801%" y="335.50"></text></g><g><title>do_page_fault (814 samples, 0.29%)</title><rect x="81.7305%" y="309" width="0.2922%" height="15" fill="rgb(234,160,15)" fg:x="227693" fg:w="814"/><text x="81.9805%" y="319.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (189 samples, 0.07%)</title><rect x="82.0230%" y="325" width="0.0678%" height="15" fill="rgb(237,34,20)" fg:x="228508" fg:w="189"/><text x="82.2730%" y="335.50"></text></g><g><title>prepare_exit_to_usermode (140 samples, 0.05%)</title><rect x="82.0406%" y="309" width="0.0503%" height="15" fill="rgb(229,97,13)" fg:x="228557" fg:w="140"/><text x="82.2906%" y="319.50"></text></g><g><title>absl::container_internal::common_policy_traits&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, void&gt;::transfer&lt;std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt; (1,177 samples, 0.42%)</title><rect x="81.6727%" y="421" width="0.4225%" height="15" fill="rgb(234,71,50)" fg:x="227532" fg:w="1177"/><text x="81.9227%" y="431.50"></text></g><g><title>absl::container_internal::common_policy_traits&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, void&gt;::transfer_impl&lt;std::allocator&lt;std::pair&lt;long const, long&gt; &gt;, absl::container_internal::FlatHashMapPolicy&lt;long, long&gt; &gt; (1,177 samples, 0.42%)</title><rect x="81.6727%" y="405" width="0.4225%" height="15" fill="rgb(253,155,4)" fg:x="227532" fg:w="1177"/><text x="81.9227%" y="415.50"></text></g><g><title>absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;::transfer&lt;std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt; (1,177 samples, 0.42%)</title><rect x="81.6727%" y="389" width="0.4225%" height="15" fill="rgb(222,185,37)" fg:x="227532" fg:w="1177"/><text x="81.9227%" y="399.50"></text></g><g><title>absl::container_internal::map_slot_policy&lt;long, long&gt;::transfer&lt;std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt; (1,177 samples, 0.42%)</title><rect x="81.6727%" y="373" width="0.4225%" height="15" fill="rgb(251,177,13)" fg:x="227532" fg:w="1177"/><text x="81.9227%" y="383.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::construct&lt;std::pair&lt;long, long&gt;, std::pair&lt;long, long&gt; &gt; (1,177 samples, 0.42%)</title><rect x="81.6727%" y="357" width="0.4225%" height="15" fill="rgb(250,179,40)" fg:x="227532" fg:w="1177"/><text x="81.9227%" y="367.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::pair&lt;long const, long&gt; &gt;::construct&lt;std::pair&lt;long, long&gt;, std::pair&lt;long, long&gt; &gt; (1,177 samples, 0.42%)</title><rect x="81.6727%" y="341" width="0.4225%" height="15" fill="rgb(242,44,2)" fg:x="227532" fg:w="1177"/><text x="81.9227%" y="351.50"></text></g><g><title>_mm_movemask_epi8 (52 samples, 0.02%)</title><rect x="82.1074%" y="389" width="0.0187%" height="15" fill="rgb(216,177,13)" fg:x="228743" fg:w="52"/><text x="82.3574%" y="399.50"></text></g><g><title>absl::container_internal::GroupSse2Impl::MaskEmptyOrDeleted (663 samples, 0.24%)</title><rect x="82.1074%" y="405" width="0.2380%" height="15" fill="rgb(216,106,43)" fg:x="228743" fg:w="663"/><text x="82.3574%" y="415.50"></text></g><g><title>absl::container_internal::_mm_cmpgt_epi8_fixed (611 samples, 0.22%)</title><rect x="82.1261%" y="389" width="0.2193%" height="15" fill="rgb(216,183,2)" fg:x="228795" fg:w="611"/><text x="82.3761%" y="399.50"></text></g><g><title>_mm_cmpgt_epi8 (611 samples, 0.22%)</title><rect x="82.1261%" y="373" width="0.2193%" height="15" fill="rgb(249,75,3)" fg:x="228795" fg:w="611"/><text x="82.3761%" y="383.50"></text></g><g><title>absl::container_internal::NonIterableBitMask&lt;unsigned int, 16, 0&gt;::LowestBitSet (92 samples, 0.03%)</title><rect x="82.3454%" y="405" width="0.0330%" height="15" fill="rgb(219,67,39)" fg:x="229406" fg:w="92"/><text x="82.5954%" y="415.50"></text></g><g><title>absl::container_internal::TrailingZeros&lt;unsigned int&gt; (92 samples, 0.03%)</title><rect x="82.3454%" y="389" width="0.0330%" height="15" fill="rgb(253,228,2)" fg:x="229406" fg:w="92"/><text x="82.5954%" y="399.50"></text></g><g><title>absl::countr_zero&lt;unsigned int&gt; (92 samples, 0.03%)</title><rect x="82.3454%" y="373" width="0.0330%" height="15" fill="rgb(235,138,27)" fg:x="229406" fg:w="92"/><text x="82.5954%" y="383.50"></text></g><g><title>absl::numeric_internal::CountTrailingZeroes&lt;unsigned int&gt; (92 samples, 0.03%)</title><rect x="82.3454%" y="357" width="0.0330%" height="15" fill="rgb(236,97,51)" fg:x="229406" fg:w="92"/><text x="82.5954%" y="367.50"></text></g><g><title>absl::numeric_internal::CountTrailingZeroesNonzero32 (92 samples, 0.03%)</title><rect x="82.3454%" y="341" width="0.0330%" height="15" fill="rgb(240,80,30)" fg:x="229406" fg:w="92"/><text x="82.5954%" y="351.50"></text></g><g><title>absl::container_internal::H1 (91 samples, 0.03%)</title><rect x="82.3784%" y="389" width="0.0327%" height="15" fill="rgb(230,178,19)" fg:x="229498" fg:w="91"/><text x="82.6284%" y="399.50"></text></g><g><title>absl::container_internal::probe (99 samples, 0.04%)</title><rect x="82.3784%" y="405" width="0.0355%" height="15" fill="rgb(210,190,27)" fg:x="229498" fg:w="99"/><text x="82.6284%" y="415.50"></text></g><g><title>absl::container_internal::find_first_non_full&lt;void&gt; (980 samples, 0.35%)</title><rect x="82.0952%" y="421" width="0.3518%" height="15" fill="rgb(222,107,31)" fg:x="228709" fg:w="980"/><text x="82.3452%" y="431.50"></text></g><g><title>absl::container_internal::probe_seq&lt;16ul&gt;::offset (92 samples, 0.03%)</title><rect x="82.4139%" y="405" width="0.0330%" height="15" fill="rgb(216,127,34)" fg:x="229597" fg:w="92"/><text x="82.6639%" y="415.50"></text></g><g><title>absl::container_internal::hash_policy_traits&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, void&gt;::apply&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::HashElement, std::pair&lt;long const, long&gt;&amp;, absl::container_internal::FlatHashMapPolicy&lt;long, long&gt; &gt; (206 samples, 0.07%)</title><rect x="82.4470%" y="421" width="0.0739%" height="15" fill="rgb(234,116,52)" fg:x="229689" fg:w="206"/><text x="82.6970%" y="431.50"></text></g><g><title>absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;::apply&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::HashElement, std::pair&lt;long const, long&gt;&amp;&gt; (206 samples, 0.07%)</title><rect x="82.4470%" y="405" width="0.0739%" height="15" fill="rgb(222,124,15)" fg:x="229689" fg:w="206"/><text x="82.6970%" y="415.50"></text></g><g><title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::HashElement, std::pair&lt;long const, long&gt;&amp;&gt; (206 samples, 0.07%)</title><rect x="82.4470%" y="389" width="0.0739%" height="15" fill="rgb(231,179,28)" fg:x="229689" fg:w="206"/><text x="82.6970%" y="399.50"></text></g><g><title>absl::container_internal::memory_internal::DecomposePairImpl&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::HashElement, long const&amp;, std::tuple&lt;long const&amp;&gt; &gt; (206 samples, 0.07%)</title><rect x="82.4470%" y="373" width="0.0739%" height="15" fill="rgb(226,93,45)" fg:x="229689" fg:w="206"/><text x="82.6970%" y="383.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::HashElement::operator (206 samples, 0.07%)</title><rect x="82.4470%" y="357" width="0.0739%" height="15" fill="rgb(215,8,51)" fg:x="229689" fg:w="206"/><text x="82.6970%" y="367.50"></text></g><g><title>absl::hash_internal::HashImpl&lt;long&gt;::operator (206 samples, 0.07%)</title><rect x="82.4470%" y="341" width="0.0739%" height="15" fill="rgb(223,106,5)" fg:x="229689" fg:w="206"/><text x="82.6970%" y="351.50"></text></g><g><title>absl::hash_internal::MixingHashState::hash&lt;long, 0&gt; (206 samples, 0.07%)</title><rect x="82.4470%" y="325" width="0.0739%" height="15" fill="rgb(250,191,5)" fg:x="229689" fg:w="206"/><text x="82.6970%" y="335.50"></text></g><g><title>absl::hash_internal::MixingHashState::Mix (206 samples, 0.07%)</title><rect x="82.4470%" y="309" width="0.0739%" height="15" fill="rgb(242,132,44)" fg:x="229689" fg:w="206"/><text x="82.6970%" y="319.50"></text></g><g><title>__alloc_pages_nodemask (31 samples, 0.01%)</title><rect x="82.5313%" y="229" width="0.0111%" height="15" fill="rgb(251,152,29)" fg:x="229924" fg:w="31"/><text x="82.7813%" y="239.50"></text></g><g><title>get_page_from_freelist (30 samples, 0.01%)</title><rect x="82.5317%" y="213" width="0.0108%" height="15" fill="rgb(218,179,5)" fg:x="229925" fg:w="30"/><text x="82.7817%" y="223.50"></text></g><g><title>alloc_pages_vma (32 samples, 0.01%)</title><rect x="82.5313%" y="245" width="0.0115%" height="15" fill="rgb(227,67,19)" fg:x="229924" fg:w="32"/><text x="82.7813%" y="255.50"></text></g><g><title>do_anonymous_page (50 samples, 0.02%)</title><rect x="82.5302%" y="261" width="0.0179%" height="15" fill="rgb(233,119,31)" fg:x="229921" fg:w="50"/><text x="82.7802%" y="271.50"></text></g><g><title>do_user_addr_fault (55 samples, 0.02%)</title><rect x="82.5288%" y="309" width="0.0197%" height="15" fill="rgb(241,120,22)" fg:x="229917" fg:w="55"/><text x="82.7788%" y="319.50"></text></g><g><title>handle_mm_fault (55 samples, 0.02%)</title><rect x="82.5288%" y="293" width="0.0197%" height="15" fill="rgb(224,102,30)" fg:x="229917" fg:w="55"/><text x="82.7788%" y="303.50"></text></g><g><title>__handle_mm_fault (53 samples, 0.02%)</title><rect x="82.5295%" y="277" width="0.0190%" height="15" fill="rgb(210,164,37)" fg:x="229919" fg:w="53"/><text x="82.7795%" y="287.50"></text></g><g><title>page_fault (56 samples, 0.02%)</title><rect x="82.5288%" y="357" width="0.0201%" height="15" fill="rgb(226,191,16)" fg:x="229917" fg:w="56"/><text x="82.7788%" y="367.50"></text></g><g><title>do_page_fault (56 samples, 0.02%)</title><rect x="82.5288%" y="341" width="0.0201%" height="15" fill="rgb(214,40,45)" fg:x="229917" fg:w="56"/><text x="82.7788%" y="351.50"></text></g><g><title>__do_page_fault (56 samples, 0.02%)</title><rect x="82.5288%" y="325" width="0.0201%" height="15" fill="rgb(244,29,26)" fg:x="229917" fg:w="56"/><text x="82.7788%" y="335.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::prepare_insert (3,901 samples, 1.40%)</title><rect x="81.1547%" y="469" width="1.4003%" height="15" fill="rgb(216,16,5)" fg:x="226089" fg:w="3901"/><text x="81.4047%" y="479.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::rehash_and_grow_if_necessary (3,061 samples, 1.10%)</title><rect x="81.4563%" y="453" width="1.0987%" height="15" fill="rgb(249,76,35)" fg:x="226929" fg:w="3061"/><text x="81.7063%" y="463.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::resize (3,061 samples, 1.10%)</title><rect x="81.4563%" y="437" width="1.0987%" height="15" fill="rgb(207,11,44)" fg:x="226929" fg:w="3061"/><text x="81.7063%" y="447.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::initialize_slots (95 samples, 0.03%)</title><rect x="82.5209%" y="421" width="0.0341%" height="15" fill="rgb(228,190,49)" fg:x="229895" fg:w="95"/><text x="82.7709%" y="431.50"></text></g><g><title>absl::container_internal::ResetCtrl (95 samples, 0.03%)</title><rect x="82.5209%" y="405" width="0.0341%" height="15" fill="rgb(214,173,12)" fg:x="229895" fg:w="95"/><text x="82.7709%" y="415.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::prepare_insert (95 samples, 0.03%)</title><rect x="82.5209%" y="389" width="0.0341%" height="15" fill="rgb(218,26,35)" fg:x="229895" fg:w="95"/><text x="82.7709%" y="399.50"></text></g><g><title>[libc-2.31.so] (95 samples, 0.03%)</title><rect x="82.5209%" y="373" width="0.0341%" height="15" fill="rgb(220,200,19)" fg:x="229895" fg:w="95"/><text x="82.7709%" y="383.50"></text></g><g><title>absl::hash_internal::HashImpl&lt;long&gt;::operator (137 samples, 0.05%)</title><rect x="82.5550%" y="469" width="0.0492%" height="15" fill="rgb(239,95,49)" fg:x="229990" fg:w="137"/><text x="82.8050%" y="479.50"></text></g><g><title>absl::hash_internal::MixingHashState::hash&lt;long, 0&gt; (137 samples, 0.05%)</title><rect x="82.5550%" y="453" width="0.0492%" height="15" fill="rgb(235,85,53)" fg:x="229990" fg:w="137"/><text x="82.8050%" y="463.50"></text></g><g><title>absl::hash_internal::MixingHashState::Mix (137 samples, 0.05%)</title><rect x="82.5550%" y="437" width="0.0492%" height="15" fill="rgb(233,133,31)" fg:x="229990" fg:w="137"/><text x="82.8050%" y="447.50"></text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::insert (9,078 samples, 3.26%)</title><rect x="79.3471%" y="597" width="3.2586%" height="15" fill="rgb(218,25,20)" fg:x="221053" fg:w="9078"/><text x="79.5971%" y="607.50">abs..</text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::emplace&lt;std::pair&lt;long, long&gt;, 0&gt; (9,078 samples, 3.26%)</title><rect x="79.3471%" y="581" width="3.2586%" height="15" fill="rgb(252,210,38)" fg:x="221053" fg:w="9078"/><text x="79.5971%" y="591.50">abs..</text></g><g><title>absl::container_internal::hash_policy_traits&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, void&gt;::apply&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::EmplaceDecomposable, std::pair&lt;long, long&gt;, absl::container_internal::FlatHashMapPolicy&lt;long, long&gt; &gt; (9,078 samples, 3.26%)</title><rect x="79.3471%" y="565" width="3.2586%" height="15" fill="rgb(242,134,21)" fg:x="221053" fg:w="9078"/><text x="79.5971%" y="575.50">abs..</text></g><g><title>absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;::apply&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::EmplaceDecomposable, std::pair&lt;long, long&gt; &gt; (9,078 samples, 3.26%)</title><rect x="79.3471%" y="549" width="3.2586%" height="15" fill="rgb(213,28,48)" fg:x="221053" fg:w="9078"/><text x="79.5971%" y="559.50">abs..</text></g><g><title>absl::container_internal::DecomposePair&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::EmplaceDecomposable, std::pair&lt;long, long&gt; &gt; (9,078 samples, 3.26%)</title><rect x="79.3471%" y="533" width="3.2586%" height="15" fill="rgb(250,196,2)" fg:x="221053" fg:w="9078"/><text x="79.5971%" y="543.50">abs..</text></g><g><title>absl::container_internal::memory_internal::DecomposePairImpl&lt;absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::EmplaceDecomposable, long&amp;&amp;, std::tuple&lt;long&amp;&amp;&gt; &gt; (9,078 samples, 3.26%)</title><rect x="79.3471%" y="517" width="3.2586%" height="15" fill="rgb(227,5,17)" fg:x="221053" fg:w="9078"/><text x="79.5971%" y="527.50">abs..</text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::EmplaceDecomposable::operator (9,078 samples, 3.26%)</title><rect x="79.3471%" y="501" width="3.2586%" height="15" fill="rgb(221,226,24)" fg:x="221053" fg:w="9078"/><text x="79.5971%" y="511.50">abs..</text></g><g><title>absl::container_internal::raw_hash_set&lt;absl::container_internal::FlatHashMapPolicy&lt;long, long&gt;, absl::hash_internal::Hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;std::pair&lt;long const, long&gt; &gt; &gt;::find_or_prepare_insert&lt;long&gt; (8,314 samples, 2.98%)</title><rect x="79.6213%" y="485" width="2.9843%" height="15" fill="rgb(211,5,48)" fg:x="221817" fg:w="8314"/><text x="79.8713%" y="495.50">abs..</text></g><g><title>std::copy&lt;std::__detail::_Node_iterator&lt;long, true, false&gt;, long*&gt; (885 samples, 0.32%)</title><rect x="82.6096%" y="597" width="0.3177%" height="15" fill="rgb(219,150,6)" fg:x="230142" fg:w="885"/><text x="82.8596%" y="607.50"></text></g><g><title>std::__copy_move_a2&lt;false, std::__detail::_Node_iterator&lt;long, true, false&gt;, long*&gt; (885 samples, 0.32%)</title><rect x="82.6096%" y="581" width="0.3177%" height="15" fill="rgb(251,46,16)" fg:x="230142" fg:w="885"/><text x="82.8596%" y="591.50"></text></g><g><title>std::__copy_move_a&lt;false, std::__detail::_Node_iterator&lt;long, true, false&gt;, long*&gt; (885 samples, 0.32%)</title><rect x="82.6096%" y="565" width="0.3177%" height="15" fill="rgb(220,204,40)" fg:x="230142" fg:w="885"/><text x="82.8596%" y="575.50"></text></g><g><title>std::__copy_move&lt;false, false, std::forward_iterator_tag&gt;::__copy_m&lt;std::__detail::_Node_iterator&lt;long, true, false&gt;, long*&gt; (885 samples, 0.32%)</title><rect x="82.6096%" y="549" width="0.3177%" height="15" fill="rgb(211,85,2)" fg:x="230142" fg:w="885"/><text x="82.8596%" y="559.50"></text></g><g><title>page_fault (31 samples, 0.01%)</title><rect x="82.9919%" y="581" width="0.0111%" height="15" fill="rgb(229,17,7)" fg:x="231207" fg:w="31"/><text x="83.2419%" y="591.50"></text></g><g><title>do_page_fault (31 samples, 0.01%)</title><rect x="82.9919%" y="565" width="0.0111%" height="15" fill="rgb(239,72,28)" fg:x="231207" fg:w="31"/><text x="83.2419%" y="575.50"></text></g><g><title>__do_page_fault (31 samples, 0.01%)</title><rect x="82.9919%" y="549" width="0.0111%" height="15" fill="rgb(230,47,54)" fg:x="231207" fg:w="31"/><text x="83.2419%" y="559.50"></text></g><g><title>std::pair&lt;long, long&gt;::pair&lt;long, long, true&gt; (231 samples, 0.08%)</title><rect x="82.9272%" y="597" width="0.0829%" height="15" fill="rgb(214,50,8)" fg:x="231027" fg:w="231"/><text x="83.1772%" y="607.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (270 samples, 0.10%)</title><rect x="83.0898%" y="549" width="0.0969%" height="15" fill="rgb(216,198,43)" fg:x="231480" fg:w="270"/><text x="83.3398%" y="559.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;long, long, std::__detail::_Identity, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (270 samples, 0.10%)</title><rect x="83.0898%" y="533" width="0.0969%" height="15" fill="rgb(234,20,35)" fg:x="231480" fg:w="270"/><text x="83.3398%" y="543.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (270 samples, 0.10%)</title><rect x="83.0898%" y="517" width="0.0969%" height="15" fill="rgb(254,45,19)" fg:x="231480" fg:w="270"/><text x="83.3398%" y="527.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (1,295 samples, 0.46%)</title><rect x="85.4797%" y="517" width="0.4648%" height="15" fill="rgb(219,14,44)" fg:x="238138" fg:w="1295"/><text x="85.7297%" y="527.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;long, long, std::__detail::_Identity, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1,295 samples, 0.46%)</title><rect x="85.4797%" y="501" width="0.4648%" height="15" fill="rgb(217,220,26)" fg:x="238138" fg:w="1295"/><text x="85.7297%" y="511.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (249 samples, 0.09%)</title><rect x="85.8552%" y="485" width="0.0894%" height="15" fill="rgb(213,158,28)" fg:x="239184" fg:w="249"/><text x="86.1052%" y="495.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_node (7,692 samples, 2.76%)</title><rect x="83.1868%" y="549" width="2.7610%" height="15" fill="rgb(252,51,52)" fg:x="231750" fg:w="7692"/><text x="83.4368%" y="559.50">st..</text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (7,692 samples, 2.76%)</title><rect x="83.1868%" y="533" width="2.7610%" height="15" fill="rgb(246,89,16)" fg:x="231750" fg:w="7692"/><text x="83.4368%" y="543.50">st..</text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_bucket_begin (45 samples, 0.02%)</title><rect x="85.9532%" y="533" width="0.0162%" height="15" fill="rgb(216,158,49)" fg:x="239457" fg:w="45"/><text x="86.2032%" y="543.50"></text></g><g><title>page_fault (29 samples, 0.01%)</title><rect x="86.4062%" y="453" width="0.0104%" height="15" fill="rgb(236,107,19)" fg:x="240719" fg:w="29"/><text x="86.6562%" y="463.50"></text></g><g><title>do_page_fault (29 samples, 0.01%)</title><rect x="86.4062%" y="437" width="0.0104%" height="15" fill="rgb(228,185,30)" fg:x="240719" fg:w="29"/><text x="86.6562%" y="447.50"></text></g><g><title>__do_page_fault (29 samples, 0.01%)</title><rect x="86.4062%" y="421" width="0.0104%" height="15" fill="rgb(246,134,8)" fg:x="240719" fg:w="29"/><text x="86.6562%" y="431.50"></text></g><g><title>do_user_addr_fault (28 samples, 0.01%)</title><rect x="86.4065%" y="405" width="0.0101%" height="15" fill="rgb(214,143,50)" fg:x="240720" fg:w="28"/><text x="86.6565%" y="415.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_allocate_buckets (67 samples, 0.02%)</title><rect x="86.3947%" y="501" width="0.0240%" height="15" fill="rgb(228,75,8)" fg:x="240687" fg:w="67"/><text x="86.6447%" y="511.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::_M_allocate_buckets (67 samples, 0.02%)</title><rect x="86.3947%" y="485" width="0.0240%" height="15" fill="rgb(207,175,4)" fg:x="240687" fg:w="67"/><text x="86.6447%" y="495.50"></text></g><g><title>[libc-2.31.so] (67 samples, 0.02%)</title><rect x="86.3947%" y="469" width="0.0240%" height="15" fill="rgb(205,108,24)" fg:x="240687" fg:w="67"/><text x="86.6447%" y="479.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash (1,430 samples, 0.51%)</title><rect x="85.9693%" y="533" width="0.5133%" height="15" fill="rgb(244,120,49)" fg:x="239502" fg:w="1430"/><text x="86.2193%" y="543.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash_aux (1,430 samples, 0.51%)</title><rect x="85.9693%" y="517" width="0.5133%" height="15" fill="rgb(223,47,38)" fg:x="239502" fg:w="1430"/><text x="86.2193%" y="527.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;long, long, std::__detail::_Identity, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (177 samples, 0.06%)</title><rect x="86.4191%" y="501" width="0.0635%" height="15" fill="rgb(229,179,11)" fg:x="240755" fg:w="177"/><text x="86.6691%" y="511.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (177 samples, 0.06%)</title><rect x="86.4191%" y="485" width="0.0635%" height="15" fill="rgb(231,122,1)" fg:x="240755" fg:w="177"/><text x="86.6691%" y="495.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique_node (1,504 samples, 0.54%)</title><rect x="85.9478%" y="549" width="0.5399%" height="15" fill="rgb(245,119,9)" fg:x="239442" fg:w="1504"/><text x="86.1978%" y="559.50"></text></g><g><title>do_user_addr_fault (31 samples, 0.01%)</title><rect x="86.9715%" y="389" width="0.0111%" height="15" fill="rgb(241,163,25)" fg:x="242294" fg:w="31"/><text x="87.2215%" y="399.50"></text></g><g><title>handle_mm_fault (28 samples, 0.01%)</title><rect x="86.9726%" y="373" width="0.0101%" height="15" fill="rgb(217,214,3)" fg:x="242297" fg:w="28"/><text x="87.2226%" y="383.50"></text></g><g><title>page_fault (32 samples, 0.01%)</title><rect x="86.9715%" y="437" width="0.0115%" height="15" fill="rgb(240,86,28)" fg:x="242294" fg:w="32"/><text x="87.2215%" y="447.50"></text></g><g><title>do_page_fault (32 samples, 0.01%)</title><rect x="86.9715%" y="421" width="0.0115%" height="15" fill="rgb(215,47,9)" fg:x="242294" fg:w="32"/><text x="87.2215%" y="431.50"></text></g><g><title>__do_page_fault (32 samples, 0.01%)</title><rect x="86.9715%" y="405" width="0.0115%" height="15" fill="rgb(252,25,45)" fg:x="242294" fg:w="32"/><text x="87.2215%" y="415.50"></text></g><g><title>_int_malloc (410 samples, 0.15%)</title><rect x="86.8423%" y="453" width="0.1472%" height="15" fill="rgb(251,164,9)" fg:x="241934" fg:w="410"/><text x="87.0923%" y="463.50"></text></g><g><title>std::unordered_set&lt;long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;long&gt; &gt;::insert (11,087 samples, 3.98%)</title><rect x="83.0102%" y="597" width="3.9797%" height="15" fill="rgb(233,194,0)" fg:x="231258" fg:w="11087"/><text x="83.2602%" y="607.50">std:..</text></g><g><title>std::__detail::_Insert_base&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::insert (11,087 samples, 3.98%)</title><rect x="83.0102%" y="581" width="3.9797%" height="15" fill="rgb(249,111,24)" fg:x="231258" fg:w="11087"/><text x="83.2602%" y="591.50">std:..</text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;long const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt; &gt; (11,038 samples, 3.96%)</title><rect x="83.0277%" y="565" width="3.9621%" height="15" fill="rgb(250,223,3)" fg:x="231307" fg:w="11038"/><text x="83.2777%" y="575.50">std:..</text></g><g><title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::operator (1,399 samples, 0.50%)</title><rect x="86.4877%" y="549" width="0.5022%" height="15" fill="rgb(236,178,37)" fg:x="240946" fg:w="1399"/><text x="86.7377%" y="559.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::_M_allocate_node&lt;long const&amp;&gt; (1,399 samples, 0.50%)</title><rect x="86.4877%" y="533" width="0.5022%" height="15" fill="rgb(241,158,50)" fg:x="240946" fg:w="1399"/><text x="86.7377%" y="543.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::allocate (1,387 samples, 0.50%)</title><rect x="86.4920%" y="517" width="0.4979%" height="15" fill="rgb(213,121,41)" fg:x="240958" fg:w="1387"/><text x="86.7420%" y="527.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt;::allocate (1,387 samples, 0.50%)</title><rect x="86.4920%" y="501" width="0.4979%" height="15" fill="rgb(240,92,3)" fg:x="240958" fg:w="1387"/><text x="86.7420%" y="511.50"></text></g><g><title>operator new (1,332 samples, 0.48%)</title><rect x="86.5117%" y="485" width="0.4781%" height="15" fill="rgb(205,123,3)" fg:x="241013" fg:w="1332"/><text x="86.7617%" y="495.50"></text></g><g><title>__GI___libc_malloc (1,302 samples, 0.47%)</title><rect x="86.5225%" y="469" width="0.4674%" height="15" fill="rgb(205,97,47)" fg:x="241043" fg:w="1302"/><text x="86.7725%" y="479.50"></text></g><g><title>clear_page_erms (47 samples, 0.02%)</title><rect x="87.0204%" y="325" width="0.0169%" height="15" fill="rgb(247,152,14)" fg:x="242430" fg:w="47"/><text x="87.2704%" y="335.50"></text></g><g><title>alloc_pages_vma (62 samples, 0.02%)</title><rect x="87.0175%" y="373" width="0.0223%" height="15" fill="rgb(248,195,53)" fg:x="242422" fg:w="62"/><text x="87.2675%" y="383.50"></text></g><g><title>__alloc_pages_nodemask (62 samples, 0.02%)</title><rect x="87.0175%" y="357" width="0.0223%" height="15" fill="rgb(226,201,16)" fg:x="242422" fg:w="62"/><text x="87.2675%" y="367.50"></text></g><g><title>get_page_from_freelist (60 samples, 0.02%)</title><rect x="87.0182%" y="341" width="0.0215%" height="15" fill="rgb(205,98,0)" fg:x="242424" fg:w="60"/><text x="87.2682%" y="351.50"></text></g><g><title>do_anonymous_page (116 samples, 0.04%)</title><rect x="87.0150%" y="389" width="0.0416%" height="15" fill="rgb(214,191,48)" fg:x="242415" fg:w="116"/><text x="87.2650%" y="399.50"></text></g><g><title>mem_cgroup_try_charge_delay (38 samples, 0.01%)</title><rect x="87.0430%" y="373" width="0.0136%" height="15" fill="rgb(237,112,39)" fg:x="242493" fg:w="38"/><text x="87.2930%" y="383.50"></text></g><g><title>handle_mm_fault (128 samples, 0.05%)</title><rect x="87.0110%" y="421" width="0.0459%" height="15" fill="rgb(247,203,27)" fg:x="242404" fg:w="128"/><text x="87.2610%" y="431.50"></text></g><g><title>__handle_mm_fault (125 samples, 0.04%)</title><rect x="87.0121%" y="405" width="0.0449%" height="15" fill="rgb(235,124,28)" fg:x="242407" fg:w="125"/><text x="87.2621%" y="415.50"></text></g><g><title>page_fault (131 samples, 0.05%)</title><rect x="87.0103%" y="485" width="0.0470%" height="15" fill="rgb(208,207,46)" fg:x="242402" fg:w="131"/><text x="87.2603%" y="495.50"></text></g><g><title>do_page_fault (131 samples, 0.05%)</title><rect x="87.0103%" y="469" width="0.0470%" height="15" fill="rgb(234,176,4)" fg:x="242402" fg:w="131"/><text x="87.2603%" y="479.50"></text></g><g><title>__do_page_fault (130 samples, 0.05%)</title><rect x="87.0107%" y="453" width="0.0467%" height="15" fill="rgb(230,133,28)" fg:x="242403" fg:w="130"/><text x="87.2607%" y="463.50"></text></g><g><title>do_user_addr_fault (130 samples, 0.05%)</title><rect x="87.0107%" y="437" width="0.0467%" height="15" fill="rgb(211,137,40)" fg:x="242403" fg:w="130"/><text x="87.2607%" y="447.50"></text></g><g><title>std::vector&lt;CommInfo, std::allocator&lt;CommInfo&gt; &gt;::resize (212 samples, 0.08%)</title><rect x="86.9898%" y="597" width="0.0761%" height="15" fill="rgb(254,35,13)" fg:x="242345" fg:w="212"/><text x="87.2398%" y="607.50"></text></g><g><title>std::vector&lt;CommInfo, std::allocator&lt;CommInfo&gt; &gt;::_M_default_append (212 samples, 0.08%)</title><rect x="86.9898%" y="581" width="0.0761%" height="15" fill="rgb(225,49,51)" fg:x="242345" fg:w="212"/><text x="87.2398%" y="591.50"></text></g><g><title>std::__uninitialized_default_n_a&lt;CommInfo*, unsigned long, CommInfo&gt; (212 samples, 0.08%)</title><rect x="86.9898%" y="565" width="0.0761%" height="15" fill="rgb(251,10,15)" fg:x="242345" fg:w="212"/><text x="87.2398%" y="575.50"></text></g><g><title>std::__uninitialized_default_n&lt;CommInfo*, unsigned long&gt; (212 samples, 0.08%)</title><rect x="86.9898%" y="549" width="0.0761%" height="15" fill="rgb(228,207,15)" fg:x="242345" fg:w="212"/><text x="87.2398%" y="559.50"></text></g><g><title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;CommInfo*, unsigned long&gt; (212 samples, 0.08%)</title><rect x="86.9898%" y="533" width="0.0761%" height="15" fill="rgb(241,99,19)" fg:x="242345" fg:w="212"/><text x="87.2398%" y="543.50"></text></g><g><title>std::fill_n&lt;CommInfo*, unsigned long, CommInfo&gt; (212 samples, 0.08%)</title><rect x="86.9898%" y="517" width="0.0761%" height="15" fill="rgb(207,104,49)" fg:x="242345" fg:w="212"/><text x="87.2398%" y="527.50"></text></g><g><title>std::__fill_n_a&lt;CommInfo*, unsigned long, CommInfo&gt; (212 samples, 0.08%)</title><rect x="86.9898%" y="501" width="0.0761%" height="15" fill="rgb(234,99,18)" fg:x="242345" fg:w="212"/><text x="87.2398%" y="511.50"></text></g><g><title>[libc-2.31.so] (31 samples, 0.01%)</title><rect x="87.0702%" y="549" width="0.0111%" height="15" fill="rgb(213,191,49)" fg:x="242569" fg:w="31"/><text x="87.3202%" y="559.50"></text></g><g><title>handle_mm_fault (35 samples, 0.01%)</title><rect x="87.0918%" y="421" width="0.0126%" height="15" fill="rgb(210,226,19)" fg:x="242629" fg:w="35"/><text x="87.3418%" y="431.50"></text></g><g><title>__handle_mm_fault (30 samples, 0.01%)</title><rect x="87.0936%" y="405" width="0.0108%" height="15" fill="rgb(229,97,18)" fg:x="242634" fg:w="30"/><text x="87.3436%" y="415.50"></text></g><g><title>page_fault (39 samples, 0.01%)</title><rect x="87.0907%" y="485" width="0.0140%" height="15" fill="rgb(211,167,15)" fg:x="242626" fg:w="39"/><text x="87.3407%" y="495.50"></text></g><g><title>do_page_fault (39 samples, 0.01%)</title><rect x="87.0907%" y="469" width="0.0140%" height="15" fill="rgb(210,169,34)" fg:x="242626" fg:w="39"/><text x="87.3407%" y="479.50"></text></g><g><title>__do_page_fault (39 samples, 0.01%)</title><rect x="87.0907%" y="453" width="0.0140%" height="15" fill="rgb(241,121,31)" fg:x="242626" fg:w="39"/><text x="87.3407%" y="463.50"></text></g><g><title>do_user_addr_fault (38 samples, 0.01%)</title><rect x="87.0911%" y="437" width="0.0136%" height="15" fill="rgb(232,40,11)" fg:x="242627" fg:w="38"/><text x="87.3411%" y="447.50"></text></g><g><title>[libc-2.31.so] (83 samples, 0.03%)</title><rect x="87.0814%" y="501" width="0.0298%" height="15" fill="rgb(205,86,26)" fg:x="242600" fg:w="83"/><text x="87.3314%" y="511.50"></text></g><g><title>std::vector&lt;long, std::allocator&lt;long&gt; &gt;::vector (137 samples, 0.05%)</title><rect x="87.0702%" y="597" width="0.0492%" height="15" fill="rgb(231,126,28)" fg:x="242569" fg:w="137"/><text x="87.3202%" y="607.50"></text></g><g><title>std::_Vector_base&lt;long, std::allocator&lt;long&gt; &gt;::_Vector_base (137 samples, 0.05%)</title><rect x="87.0702%" y="581" width="0.0492%" height="15" fill="rgb(219,221,18)" fg:x="242569" fg:w="137"/><text x="87.3202%" y="591.50"></text></g><g><title>std::_Vector_base&lt;long, std::allocator&lt;long&gt; &gt;::_M_create_storage (137 samples, 0.05%)</title><rect x="87.0702%" y="565" width="0.0492%" height="15" fill="rgb(211,40,0)" fg:x="242569" fg:w="137"/><text x="87.3202%" y="575.50"></text></g><g><title>std::_Vector_base&lt;long, std::allocator&lt;long&gt; &gt;::_M_allocate (106 samples, 0.04%)</title><rect x="87.0814%" y="549" width="0.0380%" height="15" fill="rgb(239,85,43)" fg:x="242600" fg:w="106"/><text x="87.3314%" y="559.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;long&gt; &gt;::allocate (106 samples, 0.04%)</title><rect x="87.0814%" y="533" width="0.0380%" height="15" fill="rgb(231,55,21)" fg:x="242600" fg:w="106"/><text x="87.3314%" y="543.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;long&gt;::allocate (106 samples, 0.04%)</title><rect x="87.0814%" y="517" width="0.0380%" height="15" fill="rgb(225,184,43)" fg:x="242600" fg:w="106"/><text x="87.3314%" y="527.50"></text></g><g><title>std::vector&lt;std::unordered_set&lt;long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;long&gt; &gt;, std::allocator&lt;std::unordered_set&lt;long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;long&gt; &gt; &gt; &gt;::operator[] (353 samples, 0.13%)</title><rect x="87.1209%" y="597" width="0.1267%" height="15" fill="rgb(251,158,41)" fg:x="242710" fg:w="353"/><text x="87.3709%" y="607.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_deallocate_buckets (1,183 samples, 0.42%)</title><rect x="87.2476%" y="485" width="0.4246%" height="15" fill="rgb(234,159,37)" fg:x="243063" fg:w="1183"/><text x="87.4976%" y="495.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_deallocate_buckets (1,183 samples, 0.42%)</title><rect x="87.2476%" y="469" width="0.4246%" height="15" fill="rgb(216,204,22)" fg:x="243063" fg:w="1183"/><text x="87.4976%" y="479.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::_M_deallocate_buckets (1,183 samples, 0.42%)</title><rect x="87.2476%" y="453" width="0.4246%" height="15" fill="rgb(214,17,3)" fg:x="243063" fg:w="1183"/><text x="87.4976%" y="463.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (1,183 samples, 0.42%)</title><rect x="87.2476%" y="437" width="0.4246%" height="15" fill="rgb(212,111,17)" fg:x="243063" fg:w="1183"/><text x="87.4976%" y="447.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (1,183 samples, 0.42%)</title><rect x="87.2476%" y="421" width="0.4246%" height="15" fill="rgb(221,157,24)" fg:x="243063" fg:w="1183"/><text x="87.4976%" y="431.50"></text></g><g><title>_int_free (1,183 samples, 0.42%)</title><rect x="87.2476%" y="405" width="0.4246%" height="15" fill="rgb(252,16,13)" fg:x="243063" fg:w="1183"/><text x="87.4976%" y="415.50"></text></g><g><title>malloc_consolidate (1,183 samples, 0.42%)</title><rect x="87.2476%" y="389" width="0.4246%" height="15" fill="rgb(221,62,2)" fg:x="243063" fg:w="1183"/><text x="87.4976%" y="399.50"></text></g><g><title>unlink_chunk.isra.0 (535 samples, 0.19%)</title><rect x="87.4802%" y="373" width="0.1920%" height="15" fill="rgb(247,87,22)" fg:x="243711" fg:w="535"/><text x="87.7302%" y="383.50"></text></g><g><title>[libc-2.31.so] (34 samples, 0.01%)</title><rect x="87.6722%" y="469" width="0.0122%" height="15" fill="rgb(215,73,9)" fg:x="244246" fg:w="34"/><text x="87.9222%" y="479.50"></text></g><g><title>__GI___libc_free (75 samples, 0.03%)</title><rect x="87.8585%" y="389" width="0.0269%" height="15" fill="rgb(207,175,33)" fg:x="244765" fg:w="75"/><text x="88.1085%" y="399.50"></text></g><g><title>_int_free (259 samples, 0.09%)</title><rect x="87.8854%" y="389" width="0.0930%" height="15" fill="rgb(243,129,54)" fg:x="244840" fg:w="259"/><text x="88.1354%" y="399.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::_M_deallocate_node (349 samples, 0.13%)</title><rect x="87.8556%" y="453" width="0.1253%" height="15" fill="rgb(227,119,45)" fg:x="244757" fg:w="349"/><text x="88.1056%" y="463.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::_M_deallocate_node_ptr (349 samples, 0.13%)</title><rect x="87.8556%" y="437" width="0.1253%" height="15" fill="rgb(205,109,36)" fg:x="244757" fg:w="349"/><text x="88.1056%" y="447.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::deallocate (349 samples, 0.13%)</title><rect x="87.8556%" y="421" width="0.1253%" height="15" fill="rgb(205,6,39)" fg:x="244757" fg:w="349"/><text x="88.1056%" y="431.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt;::deallocate (349 samples, 0.13%)</title><rect x="87.8556%" y="405" width="0.1253%" height="15" fill="rgb(221,32,16)" fg:x="244757" fg:w="349"/><text x="88.1056%" y="415.50"></text></g><g><title>std::vector&lt;std::unordered_set&lt;long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;long&gt; &gt;, std::allocator&lt;std::unordered_set&lt;long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;long&gt; &gt; &gt; &gt;::~vector (2,044 samples, 0.73%)</title><rect x="87.2476%" y="597" width="0.7337%" height="15" fill="rgb(228,144,50)" fg:x="243063" fg:w="2044"/><text x="87.4976%" y="607.50"></text></g><g><title>std::_Destroy&lt;std::unordered_set&lt;long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;long&gt; &gt;*, std::unordered_set&lt;long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;long&gt; &gt; &gt; (2,044 samples, 0.73%)</title><rect x="87.2476%" y="581" width="0.7337%" height="15" fill="rgb(229,201,53)" fg:x="243063" fg:w="2044"/><text x="87.4976%" y="591.50"></text></g><g><title>std::_Destroy&lt;std::unordered_set&lt;long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;long&gt; &gt;*&gt; (2,044 samples, 0.73%)</title><rect x="87.2476%" y="565" width="0.7337%" height="15" fill="rgb(249,153,27)" fg:x="243063" fg:w="2044"/><text x="87.4976%" y="575.50"></text></g><g><title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::unordered_set&lt;long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;long&gt; &gt;*&gt; (2,044 samples, 0.73%)</title><rect x="87.2476%" y="549" width="0.7337%" height="15" fill="rgb(227,106,25)" fg:x="243063" fg:w="2044"/><text x="87.4976%" y="559.50"></text></g><g><title>std::_Destroy&lt;std::unordered_set&lt;long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;long&gt; &gt; &gt; (2,044 samples, 0.73%)</title><rect x="87.2476%" y="533" width="0.7337%" height="15" fill="rgb(230,65,29)" fg:x="243063" fg:w="2044"/><text x="87.4976%" y="543.50"></text></g><g><title>std::unordered_set&lt;long, std::hash&lt;long&gt;, std::equal_to&lt;long&gt;, std::allocator&lt;long&gt; &gt;::~unordered_set (2,044 samples, 0.73%)</title><rect x="87.2476%" y="517" width="0.7337%" height="15" fill="rgb(221,57,46)" fg:x="243063" fg:w="2044"/><text x="87.4976%" y="527.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::~_Hashtable (2,044 samples, 0.73%)</title><rect x="87.2476%" y="501" width="0.7337%" height="15" fill="rgb(229,161,17)" fg:x="243063" fg:w="2044"/><text x="87.4976%" y="511.50"></text></g><g><title>std::_Hashtable&lt;long, long, std::allocator&lt;long&gt;, std::__detail::_Identity, std::equal_to&lt;long&gt;, std::hash&lt;long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::clear (861 samples, 0.31%)</title><rect x="87.6722%" y="485" width="0.3091%" height="15" fill="rgb(222,213,11)" fg:x="244246" fg:w="861"/><text x="87.9222%" y="495.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;long, false&gt; &gt; &gt;::_M_deallocate_nodes (827 samples, 0.30%)</title><rect x="87.6844%" y="469" width="0.2969%" height="15" fill="rgb(235,35,13)" fg:x="244280" fg:w="827"/><text x="87.9344%" y="479.50"></text></g><g><title>fillRemoteCommunities (41,803 samples, 15.01%)</title><rect x="72.9782%" y="613" width="15.0052%" height="15" fill="rgb(233,158,34)" fg:x="203310" fg:w="41803"/><text x="73.2282%" y="623.50">fillRemoteCommunities</text></g><g><title>GOMP_parallel (30 samples, 0.01%)</title><rect x="87.9899%" y="597" width="0.0108%" height="15" fill="rgb(215,151,48)" fg:x="245131" fg:w="30"/><text x="88.2399%" y="607.50"></text></g><g><title>updateRemoteCommunities (30 samples, 0.01%)</title><rect x="87.9899%" y="581" width="0.0108%" height="15" fill="rgb(229,84,14)" fg:x="245131" fg:w="30"/><text x="88.2399%" y="591.50"></text></g><g><title>[libevent_pthreads-2.1.so.7.0.0] (76 samples, 0.03%)</title><rect x="88.1503%" y="453" width="0.0273%" height="15" fill="rgb(229,68,14)" fg:x="245578" fg:w="76"/><text x="88.4003%" y="463.50"></text></g><g><title>__GI___pthread_mutex_lock (101 samples, 0.04%)</title><rect x="88.1776%" y="453" width="0.0363%" height="15" fill="rgb(243,106,26)" fg:x="245654" fg:w="101"/><text x="88.4276%" y="463.50"></text></g><g><title>__GI___pthread_mutex_unlock (42 samples, 0.02%)</title><rect x="88.2139%" y="453" width="0.0151%" height="15" fill="rgb(206,45,38)" fg:x="245755" fg:w="42"/><text x="88.4639%" y="463.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (32 samples, 0.01%)</title><rect x="88.2175%" y="437" width="0.0115%" height="15" fill="rgb(226,6,15)" fg:x="245765" fg:w="32"/><text x="88.4675%" y="447.50"></text></g><g><title>__clock_gettime_2 (103 samples, 0.04%)</title><rect x="88.2760%" y="421" width="0.0370%" height="15" fill="rgb(232,22,54)" fg:x="245928" fg:w="103"/><text x="88.5260%" y="431.50"></text></g><g><title>__vdso_clock_gettime (82 samples, 0.03%)</title><rect x="88.2835%" y="405" width="0.0294%" height="15" fill="rgb(229,222,32)" fg:x="245949" fg:w="82"/><text x="88.5335%" y="415.50"></text></g><g><title>bufferevent_base_set (235 samples, 0.08%)</title><rect x="88.2289%" y="453" width="0.0844%" height="15" fill="rgb(228,62,29)" fg:x="245797" fg:w="235"/><text x="88.4789%" y="463.50"></text></g><g><title>evutil_gettime_monotonic_ (164 samples, 0.06%)</title><rect x="88.2544%" y="437" width="0.0589%" height="15" fill="rgb(251,103,34)" fg:x="245868" fg:w="164"/><text x="88.5044%" y="447.50"></text></g><g><title>[libc-2.31.so] (96 samples, 0.03%)</title><rect x="88.3664%" y="437" width="0.0345%" height="15" fill="rgb(233,12,30)" fg:x="246180" fg:w="96"/><text x="88.6164%" y="447.50"></text></g><g><title>[libevent_pthreads-2.1.so.7.0.0] (66 samples, 0.02%)</title><rect x="88.4073%" y="437" width="0.0237%" height="15" fill="rgb(238,52,0)" fg:x="246294" fg:w="66"/><text x="88.6573%" y="447.50"></text></g><g><title>__libc_disable_asynccancel (145 samples, 0.05%)</title><rect x="88.5419%" y="421" width="0.0520%" height="15" fill="rgb(223,98,5)" fg:x="246669" fg:w="145"/><text x="88.7919%" y="431.50"></text></g><g><title>do_syscall_64 (32 samples, 0.01%)</title><rect x="88.6040%" y="421" width="0.0115%" height="15" fill="rgb(228,75,37)" fg:x="246842" fg:w="32"/><text x="88.8540%" y="431.50"></text></g><g><title>entry_SYSCALL_64 (1,149 samples, 0.41%)</title><rect x="88.6155%" y="421" width="0.4124%" height="15" fill="rgb(205,115,49)" fg:x="246874" fg:w="1149"/><text x="88.8655%" y="431.50"></text></g><g><title>__x64_sys_poll (39 samples, 0.01%)</title><rect x="89.1145%" y="405" width="0.0140%" height="15" fill="rgb(250,154,43)" fg:x="248264" fg:w="39"/><text x="89.3645%" y="415.50"></text></g><g><title>__fdget (790 samples, 0.28%)</title><rect x="90.4688%" y="373" width="0.2836%" height="15" fill="rgb(226,43,29)" fg:x="252037" fg:w="790"/><text x="90.7188%" y="383.50"></text></g><g><title>__x86_indirect_thunk_rax (419 samples, 0.15%)</title><rect x="90.7524%" y="373" width="0.1504%" height="15" fill="rgb(249,228,39)" fg:x="252827" fg:w="419"/><text x="91.0024%" y="383.50"></text></g><g><title>__check_object_size (95 samples, 0.03%)</title><rect x="92.2610%" y="357" width="0.0341%" height="15" fill="rgb(216,79,43)" fg:x="257030" fg:w="95"/><text x="92.5110%" y="367.50"></text></g><g><title>check_stack_object (42 samples, 0.02%)</title><rect x="92.2801%" y="341" width="0.0151%" height="15" fill="rgb(228,95,12)" fg:x="257083" fg:w="42"/><text x="92.5301%" y="351.50"></text></g><g><title>__fget_light (3,935 samples, 1.41%)</title><rect x="92.3888%" y="341" width="1.4125%" height="15" fill="rgb(249,221,15)" fg:x="257386" fg:w="3935"/><text x="92.6388%" y="351.50"></text></g><g><title>__fdget (4,197 samples, 1.51%)</title><rect x="92.2951%" y="357" width="1.5065%" height="15" fill="rgb(233,34,13)" fg:x="257125" fg:w="4197"/><text x="92.5451%" y="367.50"></text></g><g><title>__fget_light (307 samples, 0.11%)</title><rect x="93.8016%" y="357" width="0.1102%" height="15" fill="rgb(214,103,39)" fg:x="261322" fg:w="307"/><text x="94.0516%" y="367.50"></text></g><g><title>__x86_indirect_thunk_rax (614 samples, 0.22%)</title><rect x="93.9118%" y="357" width="0.2204%" height="15" fill="rgb(251,126,39)" fg:x="261629" fg:w="614"/><text x="94.1618%" y="367.50"></text></g><g><title>check_stack_object (46 samples, 0.02%)</title><rect x="94.1430%" y="357" width="0.0165%" height="15" fill="rgb(214,216,36)" fg:x="262273" fg:w="46"/><text x="94.3930%" y="367.50"></text></g><g><title>copy_user_enhanced_fast_string (29 samples, 0.01%)</title><rect x="94.1595%" y="357" width="0.0104%" height="15" fill="rgb(220,221,8)" fg:x="262319" fg:w="29"/><text x="94.4095%" y="367.50"></text></g><g><title>eventfd_poll (78 samples, 0.03%)</title><rect x="94.1699%" y="357" width="0.0280%" height="15" fill="rgb(240,216,3)" fg:x="262348" fg:w="78"/><text x="94.4199%" y="367.50"></text></g><g><title>fput (175 samples, 0.06%)</title><rect x="94.1979%" y="357" width="0.0628%" height="15" fill="rgb(232,218,17)" fg:x="262426" fg:w="175"/><text x="94.4479%" y="367.50"></text></g><g><title>fput_many (692 samples, 0.25%)</title><rect x="94.2607%" y="357" width="0.2484%" height="15" fill="rgb(229,163,45)" fg:x="262601" fg:w="692"/><text x="94.5107%" y="367.50"></text></g><g><title>poll_freewait (80 samples, 0.03%)</title><rect x="94.5091%" y="357" width="0.0287%" height="15" fill="rgb(231,110,42)" fg:x="263293" fg:w="80"/><text x="94.7591%" y="367.50"></text></g><g><title>__x86_indirect_thunk_rax (458 samples, 0.16%)</title><rect x="95.3871%" y="341" width="0.1644%" height="15" fill="rgb(208,170,48)" fg:x="265739" fg:w="458"/><text x="95.6371%" y="351.50"></text></g><g><title>tcp_poll (7,521 samples, 2.70%)</title><rect x="95.5519%" y="341" width="2.6997%" height="15" fill="rgb(239,116,25)" fg:x="266198" fg:w="7521"/><text x="95.8019%" y="351.50">tc..</text></g><g><title>sock_poll (11,162 samples, 4.01%)</title><rect x="94.5379%" y="357" width="4.0066%" height="15" fill="rgb(219,200,50)" fg:x="263373" fg:w="11162"/><text x="94.7879%" y="367.50">sock..</text></g><g><title>tcp_stream_memory_free (816 samples, 0.29%)</title><rect x="98.2516%" y="341" width="0.2929%" height="15" fill="rgb(245,200,0)" fg:x="273719" fg:w="816"/><text x="98.5016%" y="351.50"></text></g><g><title>do_sys_poll (21,877 samples, 7.85%)</title><rect x="90.9074%" y="373" width="7.8528%" height="15" fill="rgb(245,119,33)" fg:x="253259" fg:w="21877"/><text x="91.1574%" y="383.50">do_sys_poll</text></g><g><title>tcp_poll (601 samples, 0.22%)</title><rect x="98.5445%" y="357" width="0.2157%" height="15" fill="rgb(231,125,12)" fg:x="274535" fg:w="601"/><text x="98.7945%" y="367.50"></text></g><g><title>eventfd_poll (41 samples, 0.01%)</title><rect x="98.7602%" y="373" width="0.0147%" height="15" fill="rgb(216,96,41)" fg:x="275136" fg:w="41"/><text x="99.0102%" y="383.50"></text></g><g><title>fput (343 samples, 0.12%)</title><rect x="98.7749%" y="373" width="0.1231%" height="15" fill="rgb(248,43,45)" fg:x="275177" fg:w="343"/><text x="99.0249%" y="383.50"></text></g><g><title>poll_select_set_timeout (88 samples, 0.03%)</title><rect x="98.9016%" y="373" width="0.0316%" height="15" fill="rgb(217,222,7)" fg:x="275530" fg:w="88"/><text x="99.1516%" y="383.50"></text></g><g><title>__x64_sys_poll (24,153 samples, 8.67%)</title><rect x="90.4006%" y="389" width="8.6697%" height="15" fill="rgb(233,28,6)" fg:x="251847" fg:w="24153"/><text x="90.6506%" y="399.50">__x64_sys_po..</text></g><g><title>sock_poll (382 samples, 0.14%)</title><rect x="98.9332%" y="373" width="0.1371%" height="15" fill="rgb(231,218,15)" fg:x="275618" fg:w="382"/><text x="99.1832%" y="383.50"></text></g><g><title>do_syscall_64 (27,765 samples, 9.97%)</title><rect x="89.1288%" y="405" width="9.9663%" height="15" fill="rgb(226,171,48)" fg:x="248304" fg:w="27765"/><text x="89.3788%" y="415.50">do_syscall_64</text></g><g><title>fpregs_assert_state_consistent (36 samples, 0.01%)</title><rect x="99.0822%" y="389" width="0.0129%" height="15" fill="rgb(235,201,9)" fg:x="276033" fg:w="36"/><text x="99.3322%" y="399.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (28,059 samples, 10.07%)</title><rect x="89.0280%" y="421" width="10.0718%" height="15" fill="rgb(217,80,15)" fg:x="248023" fg:w="28059"/><text x="89.2780%" y="431.50">entry_SYSCALL_6..</text></g><g><title>__GI___poll (30,807 samples, 11.06%)</title><rect x="88.4310%" y="437" width="11.0582%" height="15" fill="rgb(219,152,8)" fg:x="246360" fg:w="30807"/><text x="88.6810%" y="447.50">__GI___poll</text></g><g><title>syscall_return_via_sysret (1,081 samples, 0.39%)</title><rect x="99.1012%" y="421" width="0.3880%" height="15" fill="rgb(243,107,38)" fg:x="276086" fg:w="1081"/><text x="99.3512%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (105 samples, 0.04%)</title><rect x="99.4892%" y="437" width="0.0377%" height="15" fill="rgb(231,17,5)" fg:x="277167" fg:w="105"/><text x="99.7392%" y="447.50"></text></g><g><title>__GI___pthread_mutex_unlock (42 samples, 0.02%)</title><rect x="99.5269%" y="437" width="0.0151%" height="15" fill="rgb(209,25,54)" fg:x="277272" fg:w="42"/><text x="99.7769%" y="447.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (35 samples, 0.01%)</title><rect x="99.5294%" y="421" width="0.0126%" height="15" fill="rgb(219,0,2)" fg:x="277279" fg:w="35"/><text x="99.7794%" y="431.50"></text></g><g><title>evutil_tv_to_msec_ (51 samples, 0.02%)</title><rect x="99.5420%" y="437" width="0.0183%" height="15" fill="rgb(246,9,5)" fg:x="277314" fg:w="51"/><text x="99.7920%" y="447.50"></text></g><g><title>event_strlcpy_ (31,360 samples, 11.26%)</title><rect x="88.3133%" y="453" width="11.2567%" height="15" fill="rgb(226,159,4)" fg:x="246032" fg:w="31360"/><text x="88.5633%" y="463.50">event_strlcpy_</text></g><g><title>event_base_loop (32,038 samples, 11.50%)</title><rect x="88.0767%" y="469" width="11.5001%" height="15" fill="rgb(219,175,34)" fg:x="245373" fg:w="32038"/><text x="88.3267%" y="479.50">event_base_loop</text></g><g><title>MPI_Alltoall (32,286 samples, 11.59%)</title><rect x="88.0024%" y="597" width="11.5891%" height="15" fill="rgb(236,10,46)" fg:x="245166" fg:w="32286"/><text x="88.2524%" y="607.50">MPI_Alltoall</text></g><g><title>ompi_coll_tuned_alltoall_intra_dec_fixed (32,286 samples, 11.59%)</title><rect x="88.0024%" y="581" width="11.5891%" height="15" fill="rgb(240,211,16)" fg:x="245166" fg:w="32286"/><text x="88.2524%" y="591.50">ompi_coll_tuned_a..</text></g><g><title>ompi_coll_base_alltoall_intra_bruck (32,286 samples, 11.59%)</title><rect x="88.0024%" y="565" width="11.5891%" height="15" fill="rgb(205,3,43)" fg:x="245166" fg:w="32286"/><text x="88.2524%" y="575.50">ompi_coll_base_al..</text></g><g><title>ompi_coll_base_sendrecv_actual (32,286 samples, 11.59%)</title><rect x="88.0024%" y="549" width="11.5891%" height="15" fill="rgb(245,7,22)" fg:x="245166" fg:w="32286"/><text x="88.2524%" y="559.50">ompi_coll_base_se..</text></g><g><title>ompi_request_default_wait (32,286 samples, 11.59%)</title><rect x="88.0024%" y="533" width="11.5891%" height="15" fill="rgb(239,132,32)" fg:x="245166" fg:w="32286"/><text x="88.2524%" y="543.50">ompi_request_defa..</text></g><g><title>ompi_sync_wait_mt (32,286 samples, 11.59%)</title><rect x="88.0024%" y="517" width="11.5891%" height="15" fill="rgb(228,202,34)" fg:x="245166" fg:w="32286"/><text x="88.2524%" y="527.50">ompi_sync_wait_mt</text></g><g><title>opal_progress (32,273 samples, 11.58%)</title><rect x="88.0071%" y="501" width="11.5844%" height="15" fill="rgb(254,200,22)" fg:x="245179" fg:w="32273"/><text x="88.2571%" y="511.50">opal_progress</text></g><g><title>opal_progress_events (32,183 samples, 11.55%)</title><rect x="88.0394%" y="485" width="11.5521%" height="15" fill="rgb(219,10,39)" fg:x="245269" fg:w="32183"/><text x="88.2894%" y="495.50">opal_progress_eve..</text></g><g><title>opal_timer_linux_get_cycles_sys_timer (41 samples, 0.01%)</title><rect x="99.5768%" y="469" width="0.0147%" height="15" fill="rgb(226,210,39)" fg:x="277411" fg:w="41"/><text x="99.8268%" y="479.50"></text></g><g><title>PMPI_Sendrecv (31 samples, 0.01%)</title><rect x="99.5915%" y="597" width="0.0111%" height="15" fill="rgb(208,219,16)" fg:x="277452" fg:w="31"/><text x="99.8415%" y="607.50"></text></g><g><title>distLouvainMethod (96,907 samples, 34.78%)</title><rect x="64.8250%" y="629" width="34.7848%" height="15" fill="rgb(216,158,51)" fg:x="180596" fg:w="96907"/><text x="65.0750%" y="639.50">distLouvainMethod</text></g><g><title>updateRemoteCommunities (32,372 samples, 11.62%)</title><rect x="87.9899%" y="613" width="11.6199%" height="15" fill="rgb(233,14,44)" fg:x="245131" fg:w="32372"/><text x="88.2399%" y="623.50">updateRemoteCommu..</text></g><g><title>main (97,575 samples, 35.02%)</title><rect x="64.5856%" y="645" width="35.0246%" height="15" fill="rgb(237,97,39)" fg:x="179929" fg:w="97575"/><text x="64.8356%" y="655.50">main</text></g><g><title>page_fault (749 samples, 0.27%)</title><rect x="99.6127%" y="645" width="0.2689%" height="15" fill="rgb(218,198,43)" fg:x="277511" fg:w="749"/><text x="99.8627%" y="655.50"></text></g><g><title>miniVite (278,470 samples, 99.96%)</title><rect x="0.0000%" y="661" width="99.9569%" height="15" fill="rgb(231,104,20)" fg:x="0" fg:w="278470"/><text x="0.2500%" y="671.50">miniVite</text></g><g><title>syscall_return_via_sysret (178 samples, 0.06%)</title><rect x="99.8930%" y="645" width="0.0639%" height="15" fill="rgb(254,36,13)" fg:x="278292" fg:w="178"/><text x="100.1430%" y="655.50"></text></g><g><title>_cond_resched (92 samples, 0.03%)</title><rect x="99.9627%" y="341" width="0.0330%" height="15" fill="rgb(248,14,50)" fg:x="278486" fg:w="92"/><text x="100.2127%" y="351.50"></text></g><g><title>preempt_schedule_common (91 samples, 0.03%)</title><rect x="99.9630%" y="325" width="0.0327%" height="15" fill="rgb(217,107,29)" fg:x="278487" fg:w="91"/><text x="100.2130%" y="335.50"></text></g><g><title>__schedule (91 samples, 0.03%)</title><rect x="99.9630%" y="309" width="0.0327%" height="15" fill="rgb(251,169,33)" fg:x="278487" fg:w="91"/><text x="100.2130%" y="319.50"></text></g><g><title>finish_task_switch (90 samples, 0.03%)</title><rect x="99.9634%" y="293" width="0.0323%" height="15" fill="rgb(217,108,32)" fg:x="278488" fg:w="90"/><text x="100.2134%" y="303.50"></text></g><g><title>__perf_event_task_sched_in (88 samples, 0.03%)</title><rect x="99.9641%" y="277" width="0.0316%" height="15" fill="rgb(219,66,42)" fg:x="278490" fg:w="88"/><text x="100.2141%" y="287.50"></text></g><g><title>perf_pmu_enable.part.0 (88 samples, 0.03%)</title><rect x="99.9641%" y="261" width="0.0316%" height="15" fill="rgb(206,180,7)" fg:x="278490" fg:w="88"/><text x="100.2141%" y="271.50"></text></g><g><title>x86_pmu_enable (88 samples, 0.03%)</title><rect x="99.9641%" y="245" width="0.0316%" height="15" fill="rgb(208,226,31)" fg:x="278490" fg:w="88"/><text x="100.2141%" y="255.50"></text></g><g><title>intel_pmu_enable_all (88 samples, 0.03%)</title><rect x="99.9641%" y="229" width="0.0316%" height="15" fill="rgb(218,26,49)" fg:x="278490" fg:w="88"/><text x="100.2141%" y="239.50"></text></g><g><title>native_write_msr (88 samples, 0.03%)</title><rect x="99.9641%" y="213" width="0.0316%" height="15" fill="rgb(233,197,48)" fg:x="278490" fg:w="88"/><text x="100.2141%" y="223.50"></text></g><g><title>[libhwloc.so.15.1.0] (100 samples, 0.04%)</title><rect x="99.9605%" y="501" width="0.0359%" height="15" fill="rgb(252,181,51)" fg:x="278480" fg:w="100"/><text x="100.2105%" y="511.50"></text></g><g><title>[libhwloc.so.15.1.0] (100 samples, 0.04%)</title><rect x="99.9605%" y="485" width="0.0359%" height="15" fill="rgb(253,90,19)" fg:x="278480" fg:w="100"/><text x="100.2105%" y="495.50"></text></g><g><title>hwloc_linux_set_tid_cpubind (99 samples, 0.04%)</title><rect x="99.9609%" y="469" width="0.0355%" height="15" fill="rgb(215,171,30)" fg:x="278481" fg:w="99"/><text x="100.2109%" y="479.50"></text></g><g><title>__GI___sched_setaffinity_new (99 samples, 0.04%)</title><rect x="99.9609%" y="453" width="0.0355%" height="15" fill="rgb(214,222,9)" fg:x="278481" fg:w="99"/><text x="100.2109%" y="463.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (98 samples, 0.04%)</title><rect x="99.9612%" y="437" width="0.0352%" height="15" fill="rgb(223,3,22)" fg:x="278482" fg:w="98"/><text x="100.2112%" y="447.50"></text></g><g><title>do_syscall_64 (98 samples, 0.04%)</title><rect x="99.9612%" y="421" width="0.0352%" height="15" fill="rgb(225,196,46)" fg:x="278482" fg:w="98"/><text x="100.2112%" y="431.50"></text></g><g><title>__x64_sys_sched_setaffinity (98 samples, 0.04%)</title><rect x="99.9612%" y="405" width="0.0352%" height="15" fill="rgb(209,110,37)" fg:x="278482" fg:w="98"/><text x="100.2112%" y="415.50"></text></g><g><title>sched_setaffinity (97 samples, 0.03%)</title><rect x="99.9616%" y="389" width="0.0348%" height="15" fill="rgb(249,89,12)" fg:x="278483" fg:w="97"/><text x="100.2116%" y="399.50"></text></g><g><title>__set_cpus_allowed_ptr (96 samples, 0.03%)</title><rect x="99.9620%" y="373" width="0.0345%" height="15" fill="rgb(226,27,33)" fg:x="278484" fg:w="96"/><text x="100.2120%" y="383.50"></text></g><g><title>stop_one_cpu (95 samples, 0.03%)</title><rect x="99.9623%" y="357" width="0.0341%" height="15" fill="rgb(213,82,22)" fg:x="278485" fg:w="95"/><text x="100.2123%" y="367.50"></text></g><g><title>__libc_start_main (110 samples, 0.04%)</title><rect x="99.9576%" y="629" width="0.0395%" height="15" fill="rgb(248,140,0)" fg:x="278472" fg:w="110"/><text x="100.2076%" y="639.50"></text></g><g><title>orterun (110 samples, 0.04%)</title><rect x="99.9576%" y="613" width="0.0395%" height="15" fill="rgb(228,106,3)" fg:x="278472" fg:w="110"/><text x="100.2076%" y="623.50"></text></g><g><title>orte_submit_init (103 samples, 0.04%)</title><rect x="99.9602%" y="597" width="0.0370%" height="15" fill="rgb(209,23,37)" fg:x="278479" fg:w="103"/><text x="100.2102%" y="607.50"></text></g><g><title>orte_init (103 samples, 0.04%)</title><rect x="99.9602%" y="581" width="0.0370%" height="15" fill="rgb(241,93,50)" fg:x="278479" fg:w="103"/><text x="100.2102%" y="591.50"></text></g><g><title>rte_init (103 samples, 0.04%)</title><rect x="99.9602%" y="565" width="0.0370%" height="15" fill="rgb(253,46,43)" fg:x="278479" fg:w="103"/><text x="100.2102%" y="575.50"></text></g><g><title>opal_hwloc_base_get_topology (103 samples, 0.04%)</title><rect x="99.9602%" y="549" width="0.0370%" height="15" fill="rgb(226,206,43)" fg:x="278479" fg:w="103"/><text x="100.2102%" y="559.50"></text></g><g><title>hwloc_topology_load (103 samples, 0.04%)</title><rect x="99.9602%" y="533" width="0.0370%" height="15" fill="rgb(217,54,7)" fg:x="278479" fg:w="103"/><text x="100.2102%" y="543.50"></text></g><g><title>[libhwloc.so.15.1.0] (103 samples, 0.04%)</title><rect x="99.9602%" y="517" width="0.0370%" height="15" fill="rgb(223,5,52)" fg:x="278479" fg:w="103"/><text x="100.2102%" y="527.50"></text></g><g><title>_start (111 samples, 0.04%)</title><rect x="99.9576%" y="645" width="0.0398%" height="15" fill="rgb(206,52,46)" fg:x="278472" fg:w="111"/><text x="100.2076%" y="655.50"></text></g><g><title>mpirun (114 samples, 0.04%)</title><rect x="99.9569%" y="661" width="0.0409%" height="15" fill="rgb(253,136,11)" fg:x="278470" fg:w="114"/><text x="100.2069%" y="671.50"></text></g><g><title>all (278,590 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(208,106,33)" fg:x="0" fg:w="278590"/><text x="0.2500%" y="687.50"></text></g></svg></svg>